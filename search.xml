<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树</title>
      <link href="/2021/08/17/shu-ju-jie-gou/er-cha-shu/"/>
      <url>/2021/08/17/shu-ju-jie-gou/er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>二叉树是只有两个结点的树形，由于左右的不同，可以分为左子树和右子树。一个结点最多有2个结点，A为一个结点</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817151449.png" alt="二叉树"></p></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>每个结点最多只能有两个子树，二叉树中不存在度大于2的结点</p></li><li><p>左子树和右子树有顺序，次序不能颠倒。</p></li><li><p>即使树中某一个结点只有一棵子树，也要区分是左子树还是右子树。如下图，左边为左子树，右边为右子树。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817151700.png" alt="左右子树"></p></li></ul><ul><li>二叉树的五种基本形态<ol><li>空二叉树</li><li>只有一个根结点</li><li>根结点只有左子树</li><li>根结点只有右子树</li><li>根结点既有左子树又有右子树</li></ol></li></ul><h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><h3 id="1-斜树"><a href="#1-斜树" class="headerlink" title="1. 斜树"></a>1. 斜树</h3><ul><li><p>所有结点只有左子树的二叉树叫左斜树，所有结点只有右子树的二叉树叫右斜树，两者统称为<strong>斜树</strong>。</p><ul><li>线性表结果也可以理解为树的一种特殊表现形式</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817152300.png" alt="左斜树"><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817152313.png" alt="右斜树">   </p></li></ul><h3 id="2-满二叉树"><a href="#2-满二叉树" class="headerlink" title="2. 满二叉树"></a>2. 满二叉树</h3><ul><li><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层，这样的二叉树称为<strong>满二叉树</strong></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817152915.png" alt="满二叉树"></p></li></ul><ul><li>满二叉树特点<ol><li>叶子（最后结点）只能出现在最下面一层。</li><li>非叶子结点的度一定是2，即有两条树枝</li><li>同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li></ol></li></ul><h3 id="3-完全二叉树"><a href="#3-完全二叉树" class="headerlink" title="3. 完全二叉树"></a>3. 完全二叉树</h3><p>对一棵具有n个结点的二叉树按照层序编号，编号为i(1 &lt; i &lt; n) 的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，并且<strong>编号连续</strong>，则称为<strong>完全二叉树</strong>。下图上边为完全二叉树，下边不是完全二叉树。</p><p>​                    <img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817153624.png" alt="完全二叉树" style="zoom: 80%;" />                                  </p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817153702.png" alt="非完全二叉树" style="zoom:80%;" /><ul><li>完全二叉树特点<ol><li>叶子结点只能出现在最下两层</li><li>最下层叶子一定集中在左部连续位置（满足编号连续）</li><li>倒数二层，如果有叶子结点，一定都在右部连续位置</li><li>结点度为1，则该结点只有左孩子，不存在只有右子树的情况</li><li>同样结点数的二叉树，完全二叉树深度最小</li></ol></li></ul><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><ol><li><strong>在二叉树的第i层上最多有$2^{i-1}$​个结点​</strong></li></ol><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817154723.png" alt="性质1"></p><ol start="2"><li><p><strong>深度为k的二叉树至多有$2^k$-1个结点</strong></p><p>深度为k即有k层二叉树</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817154913.png" alt="性质2"></p></li><li><p><strong>任何一棵二叉树T，如果终端结点数为$n_0$​，度为2的结点数为$n_2$，则$n_0 = n_2+1$</strong></p><p>​        终端结点数为叶子结点数，即没有子结点的结点</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817163327.png" alt="二叉树"></p><ul><li><p>如上图： n0结点数共有H,I,J,F,G 5个度为0的叶子结点，E为度为1的结点，A,B,C,D4个度为2的结点。</p><p>总和为5+4+1 = 10.</p></li></ul></li><li><p><strong>具有n个结点的完全二叉树的深度为$[log_2n]+1$​ ([x]表示不大于x的最大整数)。</strong> </p></li><li><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817164629.png" alt="性质5"></p></li></ol><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817164646.png" alt="性质5图解"></p><ul><li>第一条，i = 1时，为根结点，没有双亲；i &gt;1时，例如结点5，其双亲为[5/2] = 2,结点8，双亲为[8/2] = 4.</li><li>第二条，例如结点4，2x4 = 8，小于结点总数10，所以有左孩子，为8;同样，结点6，2x6 = 12，大于结点数10，没有左孩子。</li><li>第三条，例如结点5， 2x5+1 = 11，大于结点数10，没有右孩子；同样，结点3，2x3+1 = 7，小于结点数10，有右孩子，右孩子为2x3+1 = 7.</li></ul><h2 id="二叉树存储结构"><a href="#二叉树存储结构" class="headerlink" title="二叉树存储结构"></a>二叉树存储结构</h2><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><ul><li><p>顺序存储结构只能用于完全二叉树，对于其他的二叉树会造成浪费。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817202228.png" alt="完全二叉树顺序存储"></p></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817202246.png" alt="一般二叉树顺序存储"></p><ul><li>一般二叉树没有向完全二叉树一样依照顺序编号，则容易空出很多的内存，但是顺序存储时空白位置也会占据一定空间，造成对存储空间的浪费。</li></ul><h3 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h3><ul><li><p>二叉链表，即是将指向结点的左孩子和右孩子的指针与结点存放在一起的链表，如下图，data是数据域，lchild和rchild都是指针域。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817202652.png" alt="二叉链表"></p></li></ul><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817202714.png" alt="二叉链表示意"  /><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><ul><li> 二叉搜索树也叫二叉查询树，二叉排序树，以当前节点为根，左右子树特点为：<strong>左大右小</strong> 如下图，左边的都是比50小的，右边都是比50大的</li></ul><p>  <img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817221336.png" alt="二叉搜索树"></p><h3 id="1-查找"><a href="#1-查找" class="headerlink" title="1. 查找"></a>1. 查找</h3><p>二叉树根据左大右小的特点，查找一个元素时，从根节点出发：</p><ol><li>如果查找的元素比当前节点小，到左子树找</li><li>如果查找的元素比当前节点大，到右子树找</li><li>如果查找的元素等于当前节点，则找到了</li><li>如果到叶子节点也没找到，则该元素不存在在二叉树中</li></ol><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817221706.png" alt="查找35"></p><h3 id="2-插入"><a href="#2-插入" class="headerlink" title="2. 插入"></a>2. 插入</h3><p>插入元素也有要求：</p><ol><li><p>插入的树为空树，即无节点，直接就创建根节点</p></li><li><p>插入的树非空树：</p><ol><li>插入的元素比当前节点小，则到左子树插入，找到左子树为null处，插入元素</li><li>插入的元素比当前节点大，则到右子树插入，找到右子树为null处，插入元素</li><li>插入的元素和当前节点相等，说明元素已经存在了，直接返回</li></ol><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210817222319.png" alt="插入数据" style="zoom:150%;" /></li></ol><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h3><h4 id="3-1-找到前继、后继节点"><a href="#3-1-找到前继、后继节点" class="headerlink" title="3.1 找到前继、后继节点"></a>3.1 找到前继、后继节点</h4><ul><li>删除之前需要找到删除点的前继节点，后继节点。</li><li>前继节点表示比当前节点小的最大值</li><li>后继节点是比当前节点大的最小值</li></ul><ul><li><p>寻找前继节点，当前节点左转一次，右转到底</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818081825.png" alt="寻找50的前继节点"></p></li><li><p>寻找后继节点，当前节点右转一次，左转到底</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818081938.png" alt="寻找50的后继节点"></p></li></ul><h4 id="3-2-根据子节点数量删除"><a href="#3-2-根据子节点数量删除" class="headerlink" title="3.2 根据子节点数量删除"></a>3.2 根据子节点数量删除</h4><p>删除之前要找到删除的节点，找不到则不删除</p><p>找到之后，分三种情况：</p><ol><li><p>没有子节点，即当前节点为叶子节点，直接删除</p></li><li><p>只有一个子节点，使用子节点连接到删除节点的父节点</p></li><li><p>有两个子节点，使用前或后继节点作为替换的节点，对删除节点进行数据的替换，原来的后继节点删除</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818085613.png" alt="删除50"></p></li></ol><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818085641.png" alt="查找到前继节点"></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818085657.png" alt="前继节点代替当前节点"></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210818085718.png" alt="删除原有前继节点"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>this和super的区别和各自的作用</title>
      <link href="/2021/08/16/mian-shi/this-he-super-de-qu-bie/"/>
      <url>/2021/08/16/mian-shi/this-he-super-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>this和super有何区别，以及它们各自的作用是什么</p><span id="more"></span><h1 id="this和super的区别和各自的作用"><a href="#this和super的区别和各自的作用" class="headerlink" title="this和super的区别和各自的作用"></a>this和super的区别和各自的作用</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>属性的区别<ul><li>this访问本类属性时，如果本类没有此属性则从父类中查找。</li><li>super直接访问父类的属性</li></ul></li><li>方法的区别<ul><li>this访问本类的方法，如果本类没有此方法则向父类中继续查找。</li><li>super直接访问父类的属性</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day7_js</title>
      <link href="/2021/08/05/ying-ge/day7-js/"/>
      <url>/2021/08/05/ying-ge/day7-js/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>JavaScript是前端的语言，可以为页面添加各种功能。</p><span id="more"></span><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ul><li>主要是完成页面的数据验证，运行在客户单，需要运行浏览器来解析执行<code>JavaScript</code>代码。简称JS</li><li>js的注释和java是一样的，有多行注释和单行注释</li></ul><h2 id="Js代码写入地点"><a href="#Js代码写入地点" class="headerlink" title="Js代码写入地点"></a>Js代码写入地点</h2><ol><li><p>写在html的head下，在html文件中定义script标签，所有代码必须写在标签内</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">//网页弹窗</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是我写的第一个程序！"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引入第三方js文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><h3 id="网页弹窗"><a href="#网页弹窗" class="headerlink" title="网页弹窗"></a>网页弹窗</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//网页弹窗</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是我写的第一个程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收数据类型</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> object<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/20/140546-51258.png" alt="网页弹窗"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>可是使用 <code>var/let</code>接收任意数值类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明一个变量</span>    <span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//将结果显示在浏览器弹窗中</span>    <span class="token function">alert</span><span class="token punctuation">(</span>typeof i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>typeof i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><ul><li><p><code>typeof</code>  用于判断数据的数据类型</p></li><li><p>js共有 number,string,boolean,object,undefined,function,NaN七种数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">var</span> e <span class="token operator">=</span> undefined<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="关键字NaN"><a href="#关键字NaN" class="headerlink" title="关键字NaN"></a>关键字NaN</h3><ul><li>Js的关键字，指不是数据类型</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符串拼接</span>  <span class="token comment">//Number(i) 将数据转变成数值类型</span>  <span class="token comment">//alert(Number(i) + Number(j))  Nan js的关键字 指不是数值类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/20/142440-447544.png" alt="NaN关键字"></p><h3 id="Undefind"><a href="#Undefind" class="headerlink" title="Undefind"></a>Undefind</h3><ul><li><p>表示未定义，当前变量没有赋值，在js中，所有变量都没有初始值，必须要定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//undefind 表示未定义，当前变量没有赋值 在js中，所有变量没有初始值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/20/142632-166995.png" alt="Undefind关键字"></p></li></ul><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><ul><li><p>Null实际上就是空值，可以照样赋值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//null也是js中的关键字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/20/142827-425518.png" alt="null关键字"></p></li></ul><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="js中为假的数据"><a href="#js中为假的数据" class="headerlink" title="js中为假的数据"></a>js中为假的数据</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">null</span> <span class="token boolean">false</span> <span class="token keyword">undefined</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="与运算（-amp-amp-）"><a href="#与运算（-amp-amp-）" class="headerlink" title="与运算（&amp;&amp;）"></a>与运算（&amp;&amp;）</h4><ul><li><p>布尔类型</p><ul><li>一个为假即为假</li></ul></li><li><p>不是布尔值</p><ul><li>有一个为假即为假</li><li>全部为真，显示前者数据</li><li>全部为假，显示前者数据</li></ul></li></ul><h4 id="或运算-（-）"><a href="#或运算-（-）" class="headerlink" title="或运算 （||）"></a>或运算 （||）</h4><ul><li>正常的布尔类型<ul><li>有一个为真则为真</li></ul></li><li>不是布尔类型<ul><li>有一个为真即为真</li><li>全部为真，取前者</li><li>全部为假，取后者</li></ul></li></ul><h4 id="取反（！）"><a href="#取反（！）" class="headerlink" title="取反（！）"></a>取反（！）</h4><ul><li>真即为假，假即为真</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>js中的数组是不用规定长度的</p></li><li><p>存放多少数据，长度就为多少</p></li><li><p>可以存放任意数据类型</p></li><li><p>如果直接定义到第n个,则未定义的数据都是undefined数据类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//在js中定义数组</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>    <span class="token comment">//js中的数组是不用规定长度的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//js中另外一种遍历方式</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>由于js是弱类型的语言，Js函数中的参数，是<strong>不需要指定数据类型的，直接写变量名称</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//声明一个函数 （）内体现出不需要指定数据类型</span>    <span class="token keyword">function</span> <span class="token function">getFunction01</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//调用函数</span><span class="token function">getFunction01</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js是弱类型的语言，返回值不需要指定数据类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getFunction02</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token comment">//强制转换为数值类型</span>       <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>       <span class="token keyword">return</span> sum<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getFunction02</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js中的函数是不支持重载的，定义两个函数名相同的函数，则<strong>后者会覆盖前者</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//js不支持重载，函数名相同的函数后者会覆盖前者</span>    <span class="token keyword">function</span> <span class="token function">getFunction03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"前者"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getFunction03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"后者"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token function">getFunction03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回后者</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js函数定义中有隐藏属性 <code>arguments</code>    是数组对象</p><ul><li><p>没有定义变量也可以传参数进去，根据数组对象接收数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">getFunction04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//调用函数</span><span class="token function">getFunction04</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="函数定义方式"><a href="#函数定义方式" class="headerlink" title="函数定义方式"></a>函数定义方式</h4><ul><li><p>声明一个函数类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个函数！！"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//调用函数</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接声明函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//js中函数的第二种定义方式</span>    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是第二个函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h2><ul><li>事件是可以被js侦测到的行为</li></ul><table><thead><tr><th>事件</th><th>内容</th><th>作用</th></tr></thead><tbody><tr><td><code>onload</code></td><td>加载完成事件</td><td>浏览器在解析Html最后一个标签之后触发的操作，页面加载完成之后，常用语js代码初始化操作</td></tr><tr><td><code>onclick</code></td><td>单击事件</td><td>单击某个按钮或某个模块时执行的事件</td></tr><tr><td><code>onblur</code></td><td>失去焦点事件</td><td>用于输入框失去焦点后验证输入内容是否合法</td></tr><tr><td><code>onchange</code></td><td>内容发生改变时间</td><td>用于下拉列表和输入框内容发生改变后操作</td></tr><tr><td><code>onsubmit</code></td><td>表单提交时间</td><td>用于表单提交前，验证所有表单项是否合法</td></tr></tbody></table><h3 id="注册（绑定）"><a href="#注册（绑定）" class="headerlink" title="注册（绑定）"></a>注册（绑定）</h3><h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><ul><li>直接根据Html标签内部属性绑定事件</li></ul><h4 id="动态注册（常用）"><a href="#动态注册（常用）" class="headerlink" title="动态注册（常用）"></a>动态注册（常用）</h4><ul><li>根据js获取html的dom对象(<code>html中，每个标签都属于一个dom对象</code>)，再通过dom对象.事件名 = function(){ 函数体}</li></ul><h3 id="定义事件步骤"><a href="#定义事件步骤" class="headerlink" title="定义事件步骤"></a>定义事件步骤</h3><ul><li>获取事件对象 <code>var btn = document.getElementById(&quot;btn&quot;)</code></li><li>给事件对象绑定一个事件类型 <code>var clickme = function()&#123;&#125;</code></li><li>编写事件处理函数</li></ul><h3 id="加载完成事件（onload）"><a href="#加载完成事件（onload）" class="headerlink" title="加载完成事件（onload）"></a>加载完成事件（<code>onload</code>）</h3><ul><li><p>静态注册</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>body onload<span class="token operator">=</span><span class="token string">"alert('页面加载完成')"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"text"</span> id <span class="token operator">=</span> <span class="token string">"name"</span> onblur <span class="token operator">=</span> <span class="token string">"testUser()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>在body中的dom对象中加入事件，在script中创建函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>动态注册</p><ul><li>页面加载完成后执行的事件</li><li>由于html会顺延执行下去，一般其余事件都写在<code>onload</code>事件中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">windows<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完成事件加载了！！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="DOM模型和document对象"><a href="#DOM模型和document对象" class="headerlink" title="DOM模型和document对象"></a>DOM模型和document对象</h3><ul><li>DOM 全称 <code>Document Object Model</code> 文本对象模型</li></ul><h4 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h4><ul><li><p>创建的document对象都可以通过<code>.属性</code>的形式调用标签的属性  例如：<code>.value</code>获取value的值</p></li><li><p><code>docyment.getElementById(elementId) </code>  通过标签Id属性查找标签dom对象 <strong>elementId是标签的id属性值</strong></p></li><li><p><code>document.getElementsByName(elementName)</code></p><ul><li>通过标签的Name属性查找dom对象，<strong>elementId是标签的id属性值</strong></li></ul></li><li><p><code>document.getElementsByTagName(tagname)</code> 通过标签名查找dom对象（即<strong>input,body等</strong>）</p></li></ul><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">1.可以执行所有遍历;for(let i ;i <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>集合，列表</span><span class="token punctuation">></span></span>.length;i++)&#123;    获取集合或列表元素，在script中可以直接.dom对象属性    &#125;    2.将所有属性都遍历到（不适用于集合）for(let i in element02)&#123;    element02[i]    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签常用属性"><a href="#标签常用属性" class="headerlink" title="标签常用属性"></a>标签常用属性</h2><ul><li><p>innerHTML  </p><ul><li><p>获取起始标签和结束标签中的内容</p></li><li><p>获取所有内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> text01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//innerText只获取文本内容</span>            <span class="token function">alert</span><span class="token punctuation">(</span>text01<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>            <span class="token comment">//innerHTML获取所有内容</span>            <span class="token function">alert</span><span class="token punctuation">(</span>text01<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>div01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>div内部文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/22/101435-214714.png" alt="innerHTML"></p></li><li><p><code>innerText</code> </p><ul><li><p>获取起始标签和结束标签中的文本</p></li><li><p>也可以写入文本</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">font1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"密码不合法"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>value</code> </p><ul><li>获取文本框输入的值</li></ul></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>只有定义正则字符串才能调用正则方法</li></ul><h3 id="判断是否包含中文字符"><a href="#判断是否包含中文字符" class="headerlink" title="判断是否包含中文字符"></a>判断是否包含中文字符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取输入的字符串</span>                <span class="token keyword">var</span> str <span class="token operator">=</span> user<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">//创建字符串对象</span>                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[\\u4E00-\\u9FFF]+"</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//判断是否是中文输入,如果是弹窗报错</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您输入的用户名包含中文，请重新输入"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断是否包含数字字母下划线"><a href="#判断是否包含数字字母下划线" class="headerlink" title="判断是否包含数字字母下划线"></a>判断是否包含数字字母下划线</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">password<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> str <span class="token operator">=</span> password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">//创建正则对象</span>                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^[0-9a-zA-Z_]"</span><span class="token punctuation">)</span>                <span class="token comment">//判断是否包含数字字母下划线，不包含则报错</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您输入的密码包含数字字母下划线"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您输入的密码包含其他字符"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><ul><li><p>用于检测当前字符串是否包含由正则定义的字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//定义正则字符串  /字符串/</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//创建正则对象 功能同上</span>        <span class="token keyword">let</span> regExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// .test方法检测当前字符串是否包含abc</span>        <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdedf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><ul><li><p>jQuery也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库</p></li><li><p>核心思想： <strong>写的更少，做的更多</strong></p></li><li><p>jQuery是为了方便Js开发封装的一个框架</p></li><li><p>要想使用jquery框架，必须导入jquery依赖（jquery控件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入jquery控件<span class="token punctuation">,</span>使用相对路径<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../jQuery/jquery-1.7.2.js"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过jquer调用的是<strong>方法</strong>，通过原生js调用的是dom属性</p></li></ul><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="$ (函数)"></a>$ (函数)</h2><ul><li><p>jQuery中的 <code>$</code> 是一个核心函数，可以完成jQuery的很多功能。<code>$()</code>即调用<code>$</code>这个函数。</p></li><li><p>传入参数为[函数]时：表示页面接在完成之后，相当于<code>window.onload = function()&#123;&#125;</code></p></li><li><p><strong>jQuery文本就绪函数</strong>    传入参数为<strong>函数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//jQuery文本就绪函数</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//Js原生文本就绪函数</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传入参数为[ html 字符串] 时：会为我们创建这个html标签对象</p></li><li><p>传入参数为[ DOM对象] 时：把<strong>dom对象转换为jQuery对象</strong></p></li></ul><h2 id="jQuery对象和dom对象"><a href="#jQuery对象和dom对象" class="headerlink" title="jQuery对象和dom对象"></a>jQuery对象和dom对象</h2><h3 id="Dom对象"><a href="#Dom对象" class="headerlink" title="Dom对象"></a>Dom对象</h3><ul><li>通过<code>getElementById()</code>查询出来的标签对象是Dom对象</li><li>不加$的都是Dom属性</li></ul><h4 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h4><ul><li><p>通过jQuery提供的API创建的对象，是jQuery对象</p></li><li><p>通过JQuery包装的Dom对象，也是JQuery对阿星</p></li><li><p>通过JQuery提供的API查询到的对象，是JQuery对象</p></li><li><p><code>$()</code>  jQuery对象</p></li></ul><h2 id="Dom对象和jQuery对象互转"><a href="#Dom对象和jQuery对象互转" class="headerlink" title="Dom对象和jQuery对象互转"></a>Dom对象和jQuery对象互转</h2><p><strong>dom 对象转化为 jQuery 对象</strong> </p><ul><li><p>先有 DOM 对象  <code>this</code></p></li><li><p>$( DOM 对象 ) 就可以转换成为 jQuery 对象 <code>$(this)</code></p></li></ul><p> <strong>jQuery 对象转为 dom 对象</strong></p><ul><li><p>先有 jQuery 对象  <code>$(this)</code></p></li><li><p>jQuery 对象[下标]取出相应的 DOM 对象 <code>$(this[0])</code></p></li></ul><h2 id="jQuery方法"><a href="#jQuery方法" class="headerlink" title="jQuery方法"></a>jQuery方法</h2><table><thead><tr><th>方法</th><th>作用</th><th></th></tr></thead><tbody><tr><td><code>.click</code>()</td><td>单击方法</td><td></td></tr><tr><td><code>.blur()</code></td><td>失去焦点方法</td><td></td></tr><tr><td><code>.each()</code></td><td>遍历方法</td><td></td></tr><tr><td><code>.attr()</code></td><td>设置和获取属性的值</td><td>$(this).attr(“checked”,true)</td></tr><tr><td><code>.prop()</code></td><td>设置和获取属性的值</td><td>较为常用</td></tr><tr><td><code>.html()</code></td><td>设置和获取起始标签和结束标签中的内容</td><td>跟 dom 属性 innerHTML 一样</td></tr><tr><td><code>.text()</code></td><td>设置和获取起始标签和结束标签中的文本</td><td></td></tr><tr><td><code>.val()</code></td><td></td><td>获取当前属性的值</td></tr><tr><td>a.appendTo(b)</td><td>在一个标签后插入一个标签</td><td>把 a 插入到 b 子元素末尾，成为最后一个子元素</td></tr><tr><td>a.remove()</td><td>删除整个标签</td><td></td></tr><tr><td>a.empty()</td><td>删除标签中的内容</td><td></td></tr><tr><td>mouseover()</td><td>鼠标移入事件</td><td></td></tr><tr><td>mouseout()</td><td>鼠标移出事件</td><td></td></tr></tbody></table><p>所有jquery方法只用于jquery对象  <code>$(dom对象)</code></p><ul><li><p><code>.click</code>  单击方法</p></li><li><p><code>.blur</code>  失去焦点方法</p></li><li><p><code>.each</code>  遍历方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//根据class选择器获取所有多选框 each方法可以用来遍历</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".hobby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将dom对象的checked属性赋值为true</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>attr</code> 方法 操作属性方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">jquery对象<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>dom属性，为属性赋值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>prop</code>方法 设置和获取属性的值  <strong>使用较多</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>val()</code>  获取标签value的方法</p></li></ul><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li><p>id属性值不能重复</p></li><li><p>根据id查找标签对象</p></li><li><p><code>$(&quot;#test01&quot;)</code>  通过id使用  <code>#</code> 标识选中</p><ul><li><p>为按钮添加点击响应函数</p><ul><li>使用jquery查询到标签对象</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test01"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>标签对象.click(function()&#123;函数体&#125;)</code></li></ul></li></ul></li></ul><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><ul><li><p>根据class查找标签对象</p></li><li><p>使用<code>$(.className)</code></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//通过class选择器获取所有多选框</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".hobby"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="element选择器"><a href="#element选择器" class="headerlink" title="element选择器"></a>element选择器</h3><ul><li>根据标签名查找标签对象</li><li><code>$(&quot;标签名&quot;)</code></li></ul><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><ul><li><code>[attribute]</code> 匹配包含给定属性的元素。 </li></ul><p>•<code>[attribute=value]</code> 匹配给定的属性是某个特定值的元素 </p><p>•<code>[attribute!=value]</code> 匹配所有不含有指定的属性，或者属性不等于特定值的元素。 </p><p><code>$(&quot;[name = &#39;username&#39;]&quot;)</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户名和密码文本值 属性过滤选择器</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[name = 'username']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//dom对象调用属性，jquery对象调用方法</span>           <span class="token comment">// alert(this.value)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day7_HTML</title>
      <link href="/2021/08/05/ying-ge/day7-html/"/>
      <url>/2021/08/05/ying-ge/day7-html/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍HTML语言，还记录了后端接收前端数据</p><span id="more"></span><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li><p>超文本标记语言 </p></li><li><p>页面由三部分组成：内容（结构），表现，行为</p></li><li><p>内容是我们在页面中可以看到的数据，一般用html展示</p></li><li><p>html中每一个标签都属于一个dom对象</p></li></ul><h2 id="HTML与JAVA区别"><a href="#HTML与JAVA区别" class="headerlink" title="HTML与JAVA区别"></a>HTML与JAVA区别</h2><ul><li>Java文件需要先编译，再由java虚拟机跑起来</li><li>HTML文件不需要编译，直接由<strong>浏览器解析执行</strong></li></ul><h2 id="HTML-文件书写规范"><a href="#HTML-文件书写规范" class="headerlink" title="HTML 文件书写规范"></a>HTML 文件书写规范</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    表示整个Html页面开始    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        头信息        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><table><thead><tr><th>html标签</th><th>内容</th><th>注意</th></tr></thead><tbody><tr><td><input type="text"/></td><td>普通文本框</td><td></td></tr><tr><td><textarea></textarea></td><td>文本域标签</td><td>可以输入多行文本</td></tr><tr><td><input type="password"/></td><td>密码输入框</td><td></td></tr><tr><td><input type="hidden"/></td><td>隐藏域标签，</td><td>客户端看不见，但真实存在</td></tr><tr><td><input type="radio" name = ""/></td><td>单选框</td><td>必须根据name分组，否则出现同时选中情况</td></tr><tr><td><input type="checkbox" name = ""/></td><td>多选框</td><td>根据name分组，否则出现同时选中情况<br />checked默认被选中状态</td></tr><tr><td><select> <br /><option></option><br /></select></td><td>下拉列表框</td><td></td></tr><tr><td><input type="button"/></td><td></td><td></td></tr><tr><td><input type="submit"/></td><td>表单提交按钮</td><td>需要在form中定义action= “地址”</td></tr><tr><td><table></table></td><td></td><td></td></tr><tr><td><tr></tr></td><td></td><td></td></tr><tr><td><td></td></td><td></td><td></td></tr><tr><td><h1></h1></td><td></td><td></td></tr><tr><td><br/></td><td></td><td></td></tr><tr><td><hr /></td><td>水平线</td><td></td></tr><tr><td><div></div></td><td></td><td>每一个标签独自占一行</td></tr><tr><td><sapn></span></td><td></td><td>每一个标签不独自占一行，可与<div>嵌套</td></tr></tbody></table><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h3><ul><li><p>多选框标签，根据name分组，checkde为默认被选中状态</p><p><code>&lt;input type = &quot;checkbox&quot; name = hobby&gt;</code></p></li><li><p>多选框标签可以通过按钮事件执行全选和全不选功能</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//完成多选框全选的功能            let qxElement = document.getElementById("qx");            //绑定单击事件            qxElement.onclick = function ()&#123;                //获取所有多选框标签 通过name获取所有多选框                let hobbyElement = document.getElementsByName("hobby")                //遍历多选框                for (let i = 0; i &lt; hobbyElement.length; i++) &#123;                    //多选框的checked可以默认选中多选框，在script中可以直接使用dom对象的属性                    hobbyElement[i].checked = true;                &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="字体标签"><a href="#字体标签" class="headerlink" title="字体标签"></a>字体标签</h3><blockquote><p><code>font</code> 标签是字体标签，可用来修改文本字体，颜色，大小</p><p><code>color</code> 属性修改颜色</p><p><code>face</code> 属性修改字体</p><p><code>size</code> 属性修改文本大小</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--在网页上显示，我是字体标签，并修改字体为 宋体 颜色为红色--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是字体标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><ul><li><p>h1 - h6都是标题标签</p></li><li><p>h1最大</p></li><li><p>h6最小</p></li><li><p><code>&lt;h1 align= &quot;center&quot;&gt;标签</code>  </p></li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p> <code>&lt;a href = &#39;绝对路径&#39; &gt;</code></p><ul><li><code>target=</code> 有两个属性值<ul><li><p> <code>taget=&quot;_self&quot;</code>  在自己标签内跳转</p></li><li><p><code>target=&quot;_blank&quot;</code>  创建一个新的标签页再跳转</p><p> <img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/22/075716-989452.png" alt="创建新的标签页再跳转"></p></li></ul></li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul><li><p>有序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--有序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>刘能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>赵四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>小沈阳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>宋小宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/22/080533-843704.png" alt="有序列表"></p><ul><li><p>无序列表</p><ul><li><p><code>&lt;ul&gt;</code>是无序列表父标签,嵌套<code>&lt;li&gt;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--无序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>刘能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>赵四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>小沈阳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>宋小宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/22/080506-707717.png" alt="无序列表"></p><h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><ul><li><p>img标签可以在html页面显示图片</p></li><li><p><code>src属性导入的是当前img地址</code></p><ul><li><code>./</code>代表当前文件夹当前目录</li><li><code>../</code>代表当前文件夹上级目录</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="表格标签-重点"><a href="#表格标签-重点" class="headerlink" title="表格标签(重点)"></a>表格标签(重点)</h3><ul><li><p><code>&lt;table&gt;</code> 是表格标签</p><p><code>border</code> 设置表格边框 <code>border = &quot;1&quot;</code></p><p><code>width</code> 设置表格宽度</p><p><code>height</code> 设置表格高度</p><p><code>align</code> 设置表格相对于页面的对齐方式</p><p><code>cellspacing</code> 设置单元格间距</p><p><code>tr</code> 是行标签</p><p><code>td</code> 是表头标签</p><p><code>th</code> 表头（会自动加粗）</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/22/091130-187071.png" alt="表头"></p></li></ul><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签<form></h3><ul><li><p>表单是一个包含单元素的区域</p></li><li><p>表单元素： 允许用户在表单中（文本域，下拉列表，单选框，复选框）输入信息的元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表单动作属性<code>Action</code></p><ul><li>用户单击确认按钮时，表单内容会被传送到另一个文件。</li></ul></li></ul><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><ul><li><p>标签不能交叉嵌套</p></li><li><p>属性写在标签内，必须要用<code>&quot;&quot;</code>括起来</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>早安，尚硅谷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注释不能嵌套</p></li></ul><h2 id="后端接收数据"><a href="#后端接收数据" class="headerlink" title="后端接收数据"></a>后端接收数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//文本，密码，单选都可以使用getParameter接收;</span><span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> age <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多选框传递值时，使用getParameterValues接收，返回值类型为数组</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day7_xml</title>
      <link href="/2021/08/05/ying-ge/day7-xml/"/>
      <url>/2021/08/05/ying-ge/day7-xml/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍XML的特性，作用，语法，还介绍了Cookie以及Session会话等</p><span id="more"></span><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><ul><li>XML 是<code>Extensible Markup Language</code>简称，中文翻译为可扩展标记语言。</li></ul><h2 id="XML特性"><a href="#XML特性" class="headerlink" title="XML特性"></a>XML特性</h2><ul><li>平台无关性</li><li>语言无关性</li><li>系统无关性</li></ul><h2 id="XML作用"><a href="#XML作用" class="headerlink" title="XML作用"></a>XML作用</h2><ul><li>用来保存数据，而且这些数据具有自我描述性</li><li><strong>可以作为项目或者框架或者模块的配置文件</strong></li><li>作为网络传输数据的格式</li><li>作为编程语言与编程语言之间数据交互的桥梁</li><li></li></ul><h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><ul><li><p>有且只有一个根元素</p></li><li><p><strong>xml文档声明必须放在头部（文档第一行）</strong></p><ul><li><p>xml声明</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" endoding="utf-8" ?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>所有标签必须成对出现</p></li><li><p>XML标签严格区分大小写</p></li><li><p>XML必须正确嵌套</p></li><li><p>XML中的属性值必须加引号</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>110102<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>XML中，一些特殊符号需要使用“实体”</p></li><li><p>XML中可以使用适当的注释</p></li></ul><h2 id="XML元素"><a href="#XML元素" class="headerlink" title="XML元素"></a>XML元素</h2><ul><li>XML元素指的是<strong>开始标签到结束标签</strong>的部分</li><li>一个元素包含:<ul><li>其他元素</li><li>文本</li><li>属性</li><li>以上的混合</li></ul></li><li></li></ul><h2 id="XML命名规则"><a href="#XML命名规则" class="headerlink" title="XML命名规则"></a>XML命名规则</h2><ul><li>元素的名字可以包含字母，数字和其他字符</li><li>元素的名字不能以(xmlm,XML)等开头</li><li>元素的名字不能以数字或者标点符号开头</li><li>元素的名字不能包含空格</li></ul><h2 id="XML文档节点类型"><a href="#XML文档节点类型" class="headerlink" title="XML文档节点类型"></a>XML文档节点类型</h2><ul><li><p><code>document</code>  ：文档，代表整个文档（DOM树的根节点）</p></li><li><p><code>element</code>  ：元素，表示一个元素</p></li><li><p><code>attribute</code>： 属性，代表一个属性</p></li><li><p><code>PCDATA (Parsed Character Data)</code>: 文本</p></li><li><p><code>comment</code> ： 注释，代表一个注释</p></li><li><p><code>DOCTYPE</code> ：主要研制文档内容的正确性</p></li><li><p><code>ENTITIEs</code>  实体</p></li></ul><h2 id="XML解析技术"><a href="#XML解析技术" class="headerlink" title="XML解析技术"></a>XML解析技术</h2><ul><li>dom解析技术是W3C组织制定的，所有编程语言都对这个解析技术使用自己语言的特点进行实现</li><li>java中一般使用 dom4j</li><li>jdom在dom基础上进行封装，dom4j在jdom基础上进行封装</li><li>在以后学习的各大框架，都是通过dom4j进行解析</li></ul><h2 id="XML解析过程"><a href="#XML解析过程" class="headerlink" title="XML解析过程"></a>XML解析过程</h2><ol><li>根据流对象读取xml文件</li><li>获取需要解析数据的根标签</li><li>获取子标签，并且根据子标签获取数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">JAVA中<span class="token comment">//创建流对象</span><span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取xml文件，创建Document对象</span><span class="token comment">//Docunment xml的上下文文本对象</span><span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"src/com/wufan/xml/students.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取根标签对象</span><span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取子标签 element获取的是一个子标签，elements获取的是所有子标签，返回类型为集合,  （）内为子标签名</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> student <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token comment">//遍历所有子标签</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cookie-面试重点"><a href="#Cookie-面试重点" class="headerlink" title="Cookie(面试重点)"></a>Cookie(面试重点)</h2><ul><li>Cookie 是服务器通知客户端保存键值对的一种技术。 </li><li>有了cookie，可以把数据保存在浏览器</li><li>每个Cookie大小不能超过4kb</li><li>cookie以<strong>键值对</strong>的形式存储数据</li><li>cookie 的 key如果相同，在浏览器端会覆盖</li></ul><h3 id="Cookie创建"><a href="#Cookie创建" class="headerlink" title="Cookie创建"></a>Cookie创建</h3><ul><li><p>创建cookie对象</p><p><code>req.getCookies()</code></p></li></ul><h3 id="Cookie执行原理"><a href="#Cookie执行原理" class="headerlink" title="Cookie执行原理"></a>Cookie执行原理</h3><ul><li>创建一个cookie,通知浏览器保存，实际上是通过http协议响应头的方式来通知浏览器的<ul><li>浏览器如果在响应头中发现cookie,则将cookie放入浏览器</li></ul></li></ul><h3 id="Cookie-值修改"><a href="#Cookie-值修改" class="headerlink" title="Cookie 值修改"></a>Cookie 值修改</h3><ol><li><p>创建一个相同的Key用以覆盖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建cookie</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"newValue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知客户端保存</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方案2</p><ol><li>先查找到需要修改的Cookie对象</li><li>调用setValue()方法赋予新的Cookie值</li><li>调用response.addCookie()通知客户端保存修改</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//调用工具类(工具类是自己创建的)</span>        <span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token class-name">FindCookieUtils1</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cookies<span class="token punctuation">,</span> <span class="token string">"key4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用setValue方法赋予新的Cookie值      </span>cookie1<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知浏览器保存</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Cookie生命控制"><a href="#Cookie生命控制" class="headerlink" title="Cookie生命控制"></a>Cookie生命控制</h3><ul><li><p>控制方法：<code>setMaxAge()</code></p></li><li><p>正数，表示在指定的秒数后过期</p></li><li><p>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） 即Session级别的</p></li><li><p>零，表示马上删除 Cookie</p></li></ul><h3 id="EI表达式"><a href="#EI表达式" class="headerlink" title="EI表达式"></a>EI表达式</h3><p>在jsp中可以直接调用cookie的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">&#123;</span>cookie<span class="token punctuation">.</span>键名<span class="token punctuation">.</span>值<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h2><ol><li><p>Session就一个接口(<code>HttpSession</code>)</p></li><li><p>Session就是会话，用来维护客户端和服务器之间关系的技术</p></li><li><p>每个客户端都会有自己的一个Session会话</p></li><li><p>Session会话中，经常用来保存用户登录之后的信息</p></li><li><p>Session有生命周期，在默认的生命周期范围内，无论创建多少个Session,永远指向同一个地址</p></li></ol><h3 id="创建Session会话"><a href="#创建Session会话" class="headerlink" title="创建Session会话"></a>创建Session会话</h3><ul><li><p>创建Session会话</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Session会话</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断是否是刚创建的Session</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> aNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>得到Session的会话id值</p><ul><li>Session会话id 实际上就是Cookies的value值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="获取Session域数据"><a href="#获取Session域数据" class="headerlink" title="获取Session域数据"></a>获取Session域数据</h3><ul><li><p>存数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"balue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>取数据</p><ul><li>取数据时根据key取value值，也可以在EI表达式中使用<code>$&#123;key&#125;</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="Sesson生命周期"><a href="#Sesson生命周期" class="headerlink" title="Sesson生命周期"></a>Sesson生命周期</h3><ul><li>Sesson对象具有生命周期，默认生命周期是30min</li></ul><h4 id="修改生命周期"><a href="#修改生命周期" class="headerlink" title="修改生命周期"></a>修改生命周期</h4><ul><li><p>通过配置web.xml修改超时时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>timeout内的时间实际上是以分钟计算 <span class="token number">40</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">40</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过在代码中修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一一个Sessiond对象</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代码内修改session超时时间  配置内修改在web.xml中</span><span class="token comment">//此处（）内是以秒计算</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取超时时间</span><span class="token keyword">int</span> maxInactiveInterval <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="让当前session立即失效"><a href="#让当前session立即失效" class="headerlink" title="让当前session立即失效"></a>让当前session立即失效</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day7_JSP</title>
      <link href="/2021/08/05/ying-ge/day7-jsp/"/>
      <url>/2021/08/05/ying-ge/day7-jsp/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文简要介绍了JSP九大内置对象以及四大域对象，包含了EL表达式。</p><span id="more"></span><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><ul><li>Java Server Pages   为了解决动态生成HTML文档的技术</li><li>底层是JAVA</li><li>jsp的<strong>本质</strong> 实际上就是一个Servlet程序</li><li>JSP实际上是一个模板引擎，主要作用将程序渲染到浏览器上，</li></ul><h2 id="JSP头部指令"><a href="#JSP头部指令" class="headerlink" title="JSP头部指令"></a>JSP头部指令</h2><ul><li><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; </code></li><li><code>contentType</code>属性，表示jsp返回的数据类型是什么，可以用来解决响应时中文乱码<ul><li><code>resp.setContentType(&quot;tex/html;charset=UTF-8&quot;)</code></li></ul></li></ul><h3 id="JSP底层原理"><a href="#JSP底层原理" class="headerlink" title="JSP底层原理"></a>JSP底层原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span>JSP的本质是一个<span class="token class-name">Servlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>                <span class="token comment">//设置中文乱码，让浏览器支持html文本格式</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模拟Jsp的底层</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;head>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;title>测试&lt;/title>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/hea>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>JSP的本质是一个Servlet&lt;/h1>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h2><ul><li><p>声明脚本的格式： &lt;%! 声明 java 代码 %&gt;</p></li><li><p>表达式脚本的格式：&lt;%=表达式%&gt;</p></li><li><p>代码脚本的格式： &lt;% java 语句 %&gt; <strong>常用来写java代码</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span>JSP的本质是一个<span class="token class-name">Servlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>取值<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%=</span>name<span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%=</span>age<span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>        jack <span class="token number">0</span>JSP的本质是一个<span class="token class-name">Servlet</span>jack <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h2><ul><li><p>•html 注释 <!-- html 注释 --></p></li><li><p>•java 注释<br>•&lt;% </p><p>•// 单行 java 注释 </p><p>•/* 多行 java 注释 */<br>• %&gt;</p></li><li><p>jsp 注释 &lt;%– jsp 注释 –%&gt;</p></li></ul><h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><ol><li><p><code>request</code></p></li><li><p><code>response</code></p></li><li><p><code>pageContext</code></p></li><li><p><code>exception</code></p></li><li><p><code>application</code></p></li><li><p><code>out输出</code></p></li><li><p><code>page</code></p></li><li><p><code>session</code></p></li><li><p><code>servletConfig</code></p></li></ol><h2 id="JSP四大域对象"><a href="#JSP四大域对象" class="headerlink" title="JSP四大域对象"></a>JSP四大域对象</h2><ul><li>从小到大的顺序：pageContext 、Request、Session 、application</li></ul><table><thead><tr><th align="center">域对象</th><th align="center">作用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center"><code>pageContext</code></td><td align="center">JSP上下文文本对象</td><td align="center">当前JSP</td></tr><tr><td align="center">request</td><td align="center"></td><td align="center">一次请求，多次请求无法访问</td></tr><tr><td align="center">session</td><td align="center"></td><td align="center">从浏览器开启到结束（关闭浏览器，则域对象失效）</td></tr><tr><td align="center">application</td><td align="center">实际上就是ServletContext对象</td><td align="center">整个工程</td></tr></tbody></table><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li><p><code>$&#123;域对象中的key&#125;</code></p></li><li><p>EL表达式可以获取到域对象的值，还支持很多的逻辑运算，<strong>根据Key取值</strong></p></li><li><p><strong>变量，对象，集合</strong>只有放到域对象中才可以被EI表达式获取</p></li><li><p>EL表达式调用属性会自动使用get方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建集合对象</span><span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往集合传值</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>    <span class="token comment">//随意表示一个key</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"hashMap"</span><span class="token punctuation">,</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;body>中</span>$<span class="token punctuation">&#123;</span>pageContext1<span class="token punctuation">&#125;</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>EL表达式支持三目运算符，括号内使用key取值</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%application.setAttribute(&quot;num&quot;,&quot;10&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;body&gt;    $&#123;num &gt; 0 ? &#39;测试成功&#39; :&#39;测试失败&#39;&#125;&lt;br&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JSP排版"><a href="#JSP排版" class="headerlink" title="JSP排版"></a>JSP排版</h2><ul><li><p>由于JSP和Tomcat都未提供标签排版，所以需要导入第三方标签库(jstl标签库)进行排版，导入语句使用  代码脚本格式</p><ul><li>要想使用jstl，需要导入<code>taglibs-standard-impl-1.2.1.jar包</code>和<code>taglibs-standard-spec-1.2.1.jar</code>，并在Tomcat中也导入一次</li></ul><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--要想在jsp页面使用jstl标签库，必须在jsp页面使用taglib指示元素定义前置名称和uri参考prefix 定义前置名称uri 统一资源标识符 sun公司url参考--&gt;&lt;%@taglib prefix&#x3D;&quot;c&quot; uri &#x3D; &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.线性表</title>
      <link href="/2021/08/03/shu-ju-jie-gou/3.xian-xing-biao/"/>
      <url>/2021/08/03/shu-ju-jie-gou/3.xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>线性表是数据结构最简单和最常用的一种结构，线性表，是具有像线一样性质的表，是<strong>零个或多个数据元素的有限序列</strong>。</p><span id="more"></span><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>线性表： 具有n个 <strong>相同类型元素</strong>的 有限<strong>序列</strong></li></ul><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173139.png" alt="线性表" style="zoom:200%;" /><ul><li>a1是首节点（元素）， an是尾节点</li><li><strong>a1是a2的前驱，a2是a1的后继</strong></li></ul><ul><li>常见线性表：<ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li><li>哈希表（散列表 ）</li></ul></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组： 是一种<strong>顺序存储</strong>的线性表，所有元素内存地址连续</li></ul><p><code>int[] arr = new int[]&#123;11,22,33&#125;</code></p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173141.png" alt="数组在内存中分布" style="zoom: 80%;" /><ul><li>如图，命名空间存放在 栈空间 ，具体参数存放在 堆内存，一个int型占据4字节，内存地址连续</li></ul><h3 id="数组缺点"><a href="#数组缺点" class="headerlink" title="数组缺点"></a>数组缺点</h3><ul><li>无法动态修改容量<ul><li>如<code>int[] arr = new int[]&#123;11,22,33&#125;</code>只能放置3个元素</li><li>new数组容量多大，即总体容量多大</li></ul></li></ul><h3 id="动态数组接口设计"><a href="#动态数组接口设计" class="headerlink" title="动态数组接口设计"></a>动态数组接口设计</h3><ul><li>动态数组需要包含的接口</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173144.png" alt="动态数组需要的接口"></p><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><h4 id="1-比较下面两个语句在内存中分配区别"><a href="#1-比较下面两个语句在内存中分配区别" class="headerlink" title="1.比较下面两个语句在内存中分配区别"></a>1.比较下面两个语句在内存中分配区别</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>语句1： 因为Int型是固定的4个字节，直接会在堆内存中分配4*3个字节大小的内存空间</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173354.png" alt="int内存分配"></p></li><li><p>语句2： Object创建的是一个对象数组，在堆空间中申请的连续七块内存存放的是<strong>地址值</strong>，即存放了7个引用，更方便以后指向其他对象（当用到多态时），所以可以存放任何对象元素</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173422.png" alt="Object内存地址存放"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.算法</title>
      <link href="/2021/08/03/shu-ju-jie-gou/2.suan-fa/"/>
      <url>/2021/08/03/shu-ju-jie-gou/2.suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>数据结构和算法需要相辅相成，本文简要介绍了何为算法，记录算法的设计要求，提出算法的优化方向。</p><span id="more"></span><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li><p>算法 是解决特定问题求解步骤的描述</p><p>​         在计算机中表现为指令的有限序列</p><p>​         并且每条指令都标识一个或多个操作</p></li></ul><h2 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h2><ul><li>算法有五个基本特性<ul><li>输入</li><li>输出</li><li>有穷性</li><li>确定性</li><li>可行性</li></ul></li></ul><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li>算法具有另个或者多个输入<ul><li><code>如果只打印hello word，就不需要任何输入参数</code></li></ul></li><li>算法至少有一个或者多个输出<ul><li>输出可以是打印输出，也可以是返回一个或者多个的值</li></ul></li></ul><h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h3><ul><li>有穷性： 算法执行有限的步骤后，自动结束而不会出现无限循环，每一个步骤在一定时间内完成</li></ul><h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><ul><li>确定性： 算法每一个步骤都需要<strong>确定</strong>的含义，不能有两个意思<ul><li>即相同的输入只能有唯一的输出结果</li></ul></li></ul><h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><ul><li>可行性： 算法每一步都可以通过执行 有限次数完成<ul><li>即算法可以转换为程序上机运行，并且可以得到正确的结果</li></ul></li></ul><h2 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h2><ul><li>好的算法，应该具有<strong>正确性、可读性、健壮性、高效率和低存储量</strong>的特征。</li></ul><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><ul><li>正确性： 算法至少应该具有<strong>输入、输出和加工处理无歧义性、可以正确反映问题的需求、能够得到问题的正确答案</strong></li></ul><h4 id="正确的四个层次"><a href="#正确的四个层次" class="headerlink" title="正确的四个层次"></a>正确的四个层次</h4><ul><li>算法正确性 1要求最低，4要求最高，<strong>一般将3算法是否正确的结果</strong></li></ul><blockquote><ol><li>算法程序无错</li><li>算法程序对合法输入有满足要求的正确结果</li><li>算法程序对非法输入有满足规格说明的结果</li><li><strong>算法程序对精心选择的，甚至刁难的测试数据都有满足要求的输出结果</strong></li></ol></blockquote><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>可读性： 算法设计另一目的是为了<strong>便于阅读、理解和交流</strong></p><ul><li>可读性是算法好坏的很重要的标志</li></ul><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>健壮性： 输入数据不合法时，算法也能作出相关处理，而不是产生异常的结果</p><ul><li>例如输入的时间或者距离不应该是负数</li></ul><h3 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h3><ul><li>时间效率： 算法的执行时间，即时间复杂度<ul><li>估算程序指令的执行次数</li><li>同一个问题，有多个算法可以解决，执行时间短的算法效率高，执行时间长的效率低</li></ul></li><li>存储量： 算法在执行过程中需要的最大存储空间，即空间复杂度<ul><li>主要指算法程序运行时占用的内存或者外部硬盘存储空间。</li></ul></li></ul><ul><li><strong>设计算法应该尽量满足时间效率高和存储量低的需求</strong></li></ul><h2 id="算法效率度量方法"><a href="#算法效率度量方法" class="headerlink" title="算法效率度量方法"></a>算法效率度量方法</h2><ul><li>提高算法的效率，就是缩短算法的执行时间</li><li>算法效率度量度量方法，即算法执行时间度量</li></ul><h3 id="事后统计方法"><a href="#事后统计方法" class="headerlink" title="事后统计方法"></a>事后统计方法</h3><ul><li><p>事后统计方法： 通过设计好的测试程序和数据，</p><p>使用计算机计时器对不同算法编制程序的运行时间进行比较，</p><p>以此来确定算法效率高低</p></li></ul><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ul><li>必须依据算法先编制程序，很有可能花费大量时间和精力作出很搞糟的程序</li><li>程序运行的时间比较依赖计算机硬件和软件等环境因素<ul><li>不同配置的电脑运行相同程序的时间可能不同</li></ul></li><li>测试数据的设计很困难，程序运行时间与数据量有很大关系<ul><li>十个数字的排序和一百万个随机数字排序结果不同</li></ul></li></ul><h3 id="事前分析估算法"><a href="#事前分析估算法" class="headerlink" title="事前分析估算法"></a>事前分析估算法</h3><ul><li>事前分析估算方法： 在计算机程序编制前，依据统计方法对算法进行估算。<ul><li>通过算法时间复杂度来估算算法时间效率</li></ul></li></ul><ul><li>一个程序的运行时间，<strong>依赖于算法的好坏和问题的输入规模</strong><ul><li>输入规模指 输入数据量的多少</li></ul></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173119.png" alt="不同算法操作数量对比"></p><ul><li>随着问题输入规模n值越大，在时间效率上的差异也越来越大，即规模大的，花费时间长</li></ul><h2 id="函数渐进增长"><a href="#函数渐进增长" class="headerlink" title="函数渐进增长"></a>函数渐进增长</h2><ul><li>函数渐进增长： 输入规模n在没有被限制的情况下，只要超过一直数值N，函数总大于另一个函数，则函数是渐进增长的<ul><li>例如 算法A：2n+3  与算法B：3n+1 在n=1时，A效率低于B，但n&gt;2后，A算法效率大于B</li></ul></li></ul><ul><li><p>算法中，可以忽略加法常数 </p><ul><li>2n+3 —-&gt; 2n</li></ul></li><li><p>最高次项相乘的常数并不重要</p><ul><li>例如4n+8  与 $2^n+1$​  </li></ul></li><li><p>最高次项的指数大的，函数随着n的增大，结果也会变得增长特别快</p></li><li><p><strong>判断一个算法的效率，函数中的常数和其他次要项通常可忽略，应该更</strong>关注主项（最高阶项）的阶数****</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>某个算法，随着n的增大，会越来越优于另一算法，或者越来越差于另一算法</p><p>​p></li></ul><h2 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h2><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><ul><li>一般使用<strong>大O表示法</strong>来描述复杂度，它表示数据规模n对应的复杂度</li></ul><h4 id="大O阶推导"><a href="#大O阶推导" class="headerlink" title="大O阶推导"></a>大O阶推导</h4><ul><li>满足下面三条即为大O阶</li></ul><ol><li><strong>使用常数1取代运行时间中的所有加法常数</strong><ul><li>45 –&gt; O(1)</li></ul></li><li><strong>在修改后的运行次数函数中，只保留最高阶项</strong><ul><li>2n + 1 –&gt; 2n –&gt; O(n)</li></ul></li><li><strong>如果最高阶项存在并且系数不是1，则去除与这个项相乘的系数</strong><ul><li>2n + 3 –&gt; O(n)</li></ul></li></ol><ul><li><p>即忽略常数、系数、低阶</p><ul><li>9 –&gt; O(1)</li><li>2n + 3 –&gt; O(n)</li><li>$2n^2 + 2n + 3$ –&gt; $O(n^2)$​</li></ul></li><li><p>对数阶一般省略底数</p><ul><li>例如 <code>n = n / 2 --&gt; </code>$log_2n$​​ –&gt; O(logn)</li><li>$log_2 n$、$log_9n$统称为<strong>logn</strong></li><li>$1 + 3<em>log_2 (n) + 2</em>nlog_2(n)$​​ –&gt; O($nlogn$)</li></ul></li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>顺序执行，用加法计算</li><li>循环执行语句，用乘法计算</li><li>分支结构(if else) 哪个分支语句多用哪个</li><li>把常数项去掉</li></ul><h3 id="常见算法复杂度"><a href="#常见算法复杂度" class="headerlink" title="常见算法复杂度"></a>常见算法复杂度</h3><table><thead><tr><th align="center">执行次数</th><th align="center">复杂度</th><th align="center">非正式术语</th></tr></thead><tbody><tr><td align="center">3</td><td align="center">O(1)</td><td align="center">常数阶</td></tr><tr><td align="center">2n + 3</td><td align="center">O(n)</td><td align="center">线性阶</td></tr><tr><td align="center">$4n^2 +2n+6$</td><td align="center">$O(n^2)$</td><td align="center">平方阶</td></tr><tr><td align="center">$4log_2n + 25$</td><td align="center">$O(logn)$</td><td align="center">对数阶</td></tr><tr><td align="center">$3n + 2nlog_2n + 15$</td><td align="center">$O(nlogn)$​</td><td align="center">nlogn阶</td></tr><tr><td align="center">$4n^3 + 3n^2 + 22n + 100$</td><td align="center">$O(n^3)$</td><td align="center">立方阶</td></tr><tr><td align="center">n + k</td><td align="center">$O(n + k)$</td><td align="center">多个数据规模时</td></tr></tbody></table><ul><li>$O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt;O(2^n) &lt;O(n!) &lt; O(n^n)$​</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">fib2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token comment">//时间复杂度 O(n) </span>    <span class="token keyword">int</span> fir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sec <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> fir <span class="token operator">+</span> sec<span class="token punctuation">;</span>        fir <span class="token operator">=</span> sec<span class="token punctuation">;</span>        sec <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sec<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只有for循环时才调用n次i，复杂度为 O(n)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//使用递归方法，第n项=第n-1项 + 第n-2项</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173130.png" alt="fib复杂度分析" style="zoom:200%;" /><ul><li>使用递归调用，会有重复调用代码块，因此复杂度很高，为 $O(2^n)$</li></ul><h2 id="算法优化方向"><a href="#算法优化方向" class="headerlink" title="算法优化方向"></a>算法优化方向</h2><ul><li>为了对算法进行优化：<ul><li>使用尽量少的存储空间</li><li>用尽量少的执行步骤（执行时间）</li></ul></li><li>在某些时候：<ul><li>用时间换空间</li><li>用空间换时间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.绪论</title>
      <link href="/2021/08/03/shu-ju-jie-gou/1.xu-lun/"/>
      <url>/2021/08/03/shu-ju-jie-gou/1.xu-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文是数据结构的基础知识，简要介绍数据结构的基本概念，记录数据的物理结构与逻辑结构以及它们的区别。</p><span id="more"></span><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul><li><p>数据结构是 <strong>相互之间存在一种或多种特定关系的数据元素集合</strong></p></li><li><p>数据结构是<strong>一门研究非数值计算的程序设计问题中的操作对象，以及它们之间关系和操作等相关问题的学科</strong></p></li></ul><p><strong>程序设计= 数据结构 + 算法</strong></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p><strong>数据</strong>： 描述客观事务的符号，是计算机中可以操作的对象，可以被计算机识别，并输入给计算机处理的符号集合。</p><ul><li>数据包括：<ul><li>整型、实型等数值类型</li><li><strong>字符</strong>、声音、图像、视频等非数值类型</li></ul></li></ul><h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><ul><li><p>数据元素：  组成数据的、有一定意义的基本单位，计算机中通常作为整体处理。也被称为记录。</p><blockquote><p>在人类中 数据元素是 <strong>人</strong></p><p>畜类中 数据元素是 <strong>牛，马，羊等</strong></p></blockquote></li></ul><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><ul><li><p>数据项： 一个数据元素可以由若干个数据项组成</p><blockquote><p>数据元素人 有眼，耳，鼻等数据项，也可以有姓名、年龄、性别等数据项</p><p><strong>具体有哪些数据项，视做的系统决定！！</strong></p></blockquote></li><li><p><strong>数据项是不可分割的最小单位</strong></p><ul><li>但实际生活中，一般以 人 这种数据元素为最小单位，而不会以其年龄作为最小单位</li></ul></li></ul><h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><ul><li>数据对象：是<strong>性质相同</strong>的数据元素的集合，是数据的子集<ul><li>性质相同，即<strong>数据元素具有相同数量和类型的数据项</strong>，例如人都有姓名、生日等相同的数据项</li></ul></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>结构 ： <strong>简单理解就是<em>关系</em>，不同数据元素之间不是独立的而是存在特定关系，这些关系称为结构</strong></li><li>数据结构： <strong>是相互之间存在一种或多种特定关系的数据元素的集合</strong></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li><p>逻辑结构： <strong>数据对象中数据元素之间的相互关系</strong></p></li><li><p>逻辑结构针对具体问题，</p><p>是为了解决某个问题，</p><p>在对问题理解的基础上，</p><p>选择合适的数据结构表示<strong>数据元素之间的逻辑关系</strong>。</p></li><li><p>逻辑结构有四种</p><blockquote><ol><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ol></blockquote></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>注意事项</strong>： 使用示意图标识数据逻辑结构时</p><ul><li>将每一个数据元素看做一个节点，用圆圈表示</li><li>元素之间逻辑厝用节点之间的连线表示，这个关系有方向，用<strong>带箭头的连线表示</strong>。</li></ul><h4 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h4><ul><li>集合结构： 集合结构中的数据元素除了同属一个集合，它们之间没有其它关系，各元素之间是平等的<ul><li>共同属性：<strong>同属于 一个集合</strong></li></ul></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173052.png" alt="集合结构"></p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><ul><li><p>线性结构： 线性结构中的数据元素是 一对一的关系</p><ul><li>数组、链表、队列、哈希表（用到了数组）</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173056.png" alt="线性结构"></p></li></ul><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><ul><li><p>树形结构： 树形结构中数据元素之间存在 一对多 的层次关系</p><ul><li>二叉树、AVL树、红黑树、B树、堆、Trie（字典树）、哈夫曼树、并查集</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173058.png" alt="树形结构"></p></li></ul><h4 id="图像结构"><a href="#图像结构" class="headerlink" title="图像结构"></a>图像结构</h4><ul><li>图形结构： 图形结构的数据元素是 <strong>多对多</strong>的关系</li></ul><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><ul><li>物理结构： 指数据的逻辑结构在计算机中的存储形式。</li></ul><ul><li>数据元素存储结构：<ul><li>顺序存储</li><li>链式存储</li></ul></li></ul><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><ul><li><p>顺序存储结构： 把数据元素存放在地址连续的存储单元里，数据间的逻辑关系和物理关系一致。</p><ul><li>实际上就是 排队占位。 大家按顺序排好，每人占一小段空间</li><li>数组为 顺序存储结构</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173105.png" alt="顺序存储结构"></p></li></ul><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><ul><li><p>链式存储结构： 把数据元素存放在任意存储单元，这组存储单元可以连续或不连续。</p></li><li><p>链式存储结构只需要关心下一个数据的位置就可以了</p><ul><li>链式存储很灵活，数据存在哪里不重要，有一个指针存放了相应地址就能找到它</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801173107.png" alt="链式存储结构"></p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>逻辑结构 面向问题</li><li>物理结构 面向计算机<ul><li>基本的目标：将数据及其逻辑关系存储到计算机的内存中</li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数据类型： 一组性质相同的值的集合以及定义此集合上的一些操作的总称</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>数据类型在C语言中可以分为两类：</p><ul><li>原子类型： 不可以再分解的基本类型，包括整型、实型、字符型</li><li>结构类型： 由若干个类型组合而成，可以再分解。例如整型数组由若干个整型数据组成。</li></ul><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><ul><li>抽象： 抽取出事务具有的普遍的性质<ul><li>例如测量小车的速度，则将小车抽象为一个点，而不需要考虑小车长什么样</li></ul></li><li>抽象数据类型(<code>Abstract Data Type ADT</code>)： 一个数学模型以及定义在该模型上的一组操作</li></ul><h4 id="抽象数据类型标准格式"><a href="#抽象数据类型标准格式" class="headerlink" title="抽象数据类型标准格式"></a>抽象数据类型标准格式</h4><ul><li>描述抽象数据类型的标准格式：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ADT 抽象数据类型名Data 数据元素之间逻辑关系的定义Operation 操作1初始条件操作结果描述操作2<span class="token punctuation">..</span>.操作n<span class="token punctuation">..</span>.endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程池（未完成）</title>
      <link href="/2021/06/15/ying-ge/java-jin-jie/xian-cheng-chi/"/>
      <url>/2021/06/15/ying-ge/java-jin-jie/xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>线程池是java中一个重要的知识点，还有许多知识点未学，牢记！</p><span id="more"></span><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>不使用线程池，每个任务都新开一个线程处理</p><ul><li><p>一个线程</p></li><li><p>for循环创建线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建新的线程</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//启动线程</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建线程</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接创建线程会消耗很大资源，反复创建线程开销很大</p></li></ul></li></ul><h4 id="使用线程池原因"><a href="#使用线程池原因" class="headerlink" title="使用线程池原因"></a>使用线程池原因</h4><ol><li>反复创建线程开销大</li><li>过多线程会占用太多线程</li></ol><h4 id="解决问题思路"><a href="#解决问题思路" class="headerlink" title="解决问题思路"></a>解决问题思路</h4><ul><li>用少量线程 —– 避免内存占用过多</li><li>让这部分线程保持工作，且可以反复执行任务–避免生命周期损耗</li></ul><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>加快响应速度</li><li>合理利用CPU和内存<ul><li>CPU资源不是无限，通过线程池可以掌控线程数量</li></ul></li><li>统一管理资源</li></ul><h3 id="创建和停止线程池"><a href="#创建和停止线程池" class="headerlink" title="创建和停止线程池"></a>创建和停止线程池</h3><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210615152209.png" alt="线程池构造方法参数" style="zoom: 200%;" /><ul><li><code>corePoolSize</code> :核心线程数<ul><li>线程池在完成初始化后，默认情况下，线程池中并没有任何线程，线程池会等待有任务到来时，再创建新线程去执行任务</li></ul></li><li><code>maxPoolSize</code> : 最大线程数<ul><li>在核心线程数不足的情况下，额外增加线程数的上限</li></ul></li></ul><h4 id="添加线程规则"><a href="#添加线程规则" class="headerlink" title="添加线程规则"></a>添加线程规则</h4><blockquote><ol><li>如果线程数小于corePoolSize,创建新的线程来运行新任务</li><li>如果线程数等于(或大于)corePoolSize并少于maxmumPoolSize，则将任务放入队列</li><li>如果队列满了，并且线程数小于maxPoolSize，则创建一个新县城</li><li>如果队列满，并且线程数大于或等于maxPoolSize，则拒绝</li></ol></blockquote><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210615152916.png" alt="添加线程规则" style="zoom:200%;" /><blockquote><p><strong>是否需要增加线程的判断顺序：</strong></p><ul><li>corePoolSize 核心线程是否满？</li><li>workQueue 队列是否满？</li><li>maxPoolSize 最大线程数是否满？</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（未完成）</title>
      <link href="/2021/06/10/ying-ge/java-jin-jie/redis/"/>
      <url>/2021/06/10/ying-ge/java-jin-jie/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Redis 是nosql数据库，可以用于存放前端的数据，用作单点登录。</p><span id="more"></span><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>Redis支持 5 种数据类型</p><blockquote><ol><li>string(字符串)</li><li>hash(哈希)</li><li>list(列表)</li><li>set(集合)</li><li>zset (有序集合)</li></ol></blockquote></li></ul><h2 id="Redis-keys命令"><a href="#Redis-keys命令" class="headerlink" title="Redis keys命令"></a>Redis keys命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>DEL key</code></td><td>用于在key存在时删除key</td></tr><tr><td><code>DUMP key</code></td><td>序列化给定key,并返回被序列化的值</td></tr><tr><td><code>EXISTS key</code></td><td>检查给定key是否存在</td></tr><tr><td><code>EXPIRE key seconds</code></td><td>为key设置过期时间</td></tr><tr><td><code>RENAME key newkey</code></td><td>修改key的名称</td></tr><tr><td><code>TYPE key</code></td><td>返回Key存储的值类型</td></tr></tbody></table><h2 id="Redis-字符串命令"><a href="#Redis-字符串命令" class="headerlink" title="Redis 字符串命令"></a>Redis 字符串命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SET key value</code></td><td>设置指定Key值</td></tr><tr><td><code>get Key</code></td><td>获取指定key的值</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构</title>
      <link href="/2021/06/09/ying-ge/java-jin-jie/fen-bu-shi-jia-gou/"/>
      <url>/2021/06/09/ying-ge/java-jin-jie/fen-bu-shi-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文记录如何搭建分布式架构，对RPC，dubbo等简要介绍</p><span id="more"></span><h1 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h1><ul><li><p>服务方  –&gt; 数据提供一方</p></li><li><p>消费方 –&gt; 使用web的一方</p></li><li><p>当垂直应用越来越多时，将核心业务抽取出来，作为独立服务，逐渐行程稳定的五福中心，使其阿奴单应用可以更快速的响应多变的市场需求。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210609103808.png" alt="分布式架构"></p></li><li><p>无论是什么功能的实现，都需要经过注册中心，注册中心存放了一组地址，要访问哪一个服务则指向哪一个地址。模块与模块之间通过Http协议传递数据</p></li></ul><h2 id="RPC简介"><a href="#RPC简介" class="headerlink" title="RPC简介"></a>RPC简介</h2><h3 id="RPC基本原理"><a href="#RPC基本原理" class="headerlink" title="RPC基本原理"></a>RPC基本原理</h3><ul><li><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210609103927.png" alt="RPC基本原理"></p></li><li><p>客户端从服务端订阅地址，模块与模块之间通过http协议传输数据。</p></li></ul><h2 id="dubbo简介"><a href="#dubbo简介" class="headerlink" title="dubbo简介"></a>dubbo简介</h2><ul><li>dubbo是 高性能、轻量级的开源java RPC框架，</li></ul><h3 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h3><blockquote><ol><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务自动注册和发现</li></ol></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210609143541.png" alt="image-20210609143541500"></p><blockquote><p><strong>服务提供者(provider)</strong> :暴露服务的服务提供方，服务提供者启动时，向注册中心注册自己提供的服务</p><p><strong>服务消费者(consumer)</strong>: 调用远程服务的服务消费方，服务消费者启动时，向注册中心订阅自己需要的服务，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，调用失败，则再选一台调用。</p></blockquote><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul><li>消费者只关心与前端有关的信息</li><li>实体类以及业务层接口存放在一个maven工程中</li><li>业务层具体实现以及持久层在服务端实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2021/06/04/ying-ge/java-jin-jie/springboot/"/>
      <url>/2021/06/04/ying-ge/java-jin-jie/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>SpringBoot可以很快的配置spring环境，无需写多个配置文件</p><span id="more"></span><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><ul><li>微服务 架构思想</li><li>分布式  架构模式</li><li>单体架构 一个模块（一个服务器）</li></ul><p>电商项目</p><ul><li>购物车 一个模块</li><li>秒杀 一个模块</li><li>商家管理 一个模块</li><li>运行时管理  一个模块</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>springboot: 分布式的一站式解决方案，底层封装了spring </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>快速创建独立运行的Spring项目以及与主流框架集成</li><li>使用嵌入式的Servlet容器，应用无需打成WAR包 - starters白动依<br>赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值-无需配置XML，无<br>代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算.的天然集成</li></ul><h2 id="分布式框架"><a href="#分布式框架" class="headerlink" title="分布式框架"></a>分布式框架</h2><ul><li>维护模块与模块之间的技术为springCloud或者dubbo+zookeeper</li></ul><blockquote><p>分布式管理框架：</p><p>springCloud -&gt; 分布式全套解决方案</p><p>dubbo+zookeeper -&gt;基于SOA远程服务管理技术，维护模块与模块之间的关系</p><p>​        zookeeper作为dubbo的注册中心</p></blockquote><h2 id="spring集合mybatis"><a href="#spring集合mybatis" class="headerlink" title="spring集合mybatis"></a>spring集合mybatis</h2><ul><li>注意在启动文件处使用<code>@MapperScan(&#39;持久层接口所在包的全类名&#39;)</code>  <ul><li>spring会扫描持久层所有接口，并且为所有接口创建代理对象（指的是接口对应的实现类），然后这些实现类会被装载进核心容器</li><li>不开启这一步骤，无法扫描持久层接口</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM项目整合</title>
      <link href="/2021/05/27/ying-ge/java-jin-jie/ssm-xiang-mu-zheng-he/"/>
      <url>/2021/05/27/ying-ge/java-jin-jie/ssm-xiang-mu-zheng-he/</url>
      
        <content type="html"><![CDATA[<p>摘要：电视剧</p><span id="more"></span><h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><p>和接口和科技化</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSM(Spring+SpringMVC+MyBatis) 框架集由Spring,MyBatis两个开源框架整合而成。</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>Spring是整个项目中装配bean对象的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。为<strong>项目中的粘合剂</strong></li></ul><h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><ul><li>spring</li><li>springMvc</li><li>mybatis</li><li>jquery</li><li>Ajax</li><li>mysql</li></ul><h2 id="MyBatis问题"><a href="#MyBatis问题" class="headerlink" title="MyBatis问题"></a>MyBatis问题</h2><blockquote><p>MyBatis是一个持久层的框架，最终持久层接口所对应的实现类会通过代理模式创建出来，而spring中会将web的三层实例分别装载进spring，这样的话，持久层的实例该如何装载金spring??</p></blockquote><blockquote><p>实际上： 我们需要提供一个spring整合mybatis的资源，通过这个资源做一个扫描器的配置，spring会扫描持久层所有接口，并且为所有接口创建代理对象（指的是接口对应的实现类），这些实现类会被装载进核心容器中</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><code>mybatis-config.xml</code><ul><li>mybatis核心配置文件，在整合ssm架构的时候可以不用这个配置文件</li></ul></li><li>springmvc.xml<ul><li>mvc相关配置构造</li><li></li></ul></li><li>beans.xml<ul><li> 用于注册第三方组件</li></ul></li></ul><h2 id="商品管理系统"><a href="#商品管理系统" class="headerlink" title="商品管理系统"></a>商品管理系统</h2><h3 id="完成需求"><a href="#完成需求" class="headerlink" title="完成需求"></a>完成需求</h3><p>区间模糊查询，分页功能，ssm框架整合原理</p><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><h4 id="goods-商品表"><a href="#goods-商品表" class="headerlink" title="goods 商品表"></a>goods 商品表</h4><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>gid</code></td><td>int</td><td>商品id</td></tr><tr><td><code>goods_name</code></td><td>varchar</td><td>商品名</td></tr><tr><td><code>price</code></td><td>double</td><td>价格</td></tr><tr><td><code>up_time</code></td><td>date</td><td>上架时间</td></tr><tr><td><code>brand_id</code></td><td>int</td><td>商品对应的品牌id</td></tr><tr><td><code>cate_id</code></td><td>int</td><td>商品对应的类型id</td></tr><tr><td><code>goods_desc</code></td><td>varchar</td><td>商品描述</td></tr><tr><td><code>num</code></td><td>int</td><td>商品数量</td></tr></tbody></table><h4 id="cate-类型名"><a href="#cate-类型名" class="headerlink" title="cate 类型名"></a>cate 类型名</h4><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>cid</code></td><td>int</td><td>类型Id</td></tr><tr><td><code>cid_name</code></td><td>varchar</td><td>类型名称</td></tr></tbody></table><h4 id="brand-品牌名"><a href="#brand-品牌名" class="headerlink" title="brand 品牌名"></a>brand 品牌名</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax(配合Java)</title>
      <link href="/2021/05/27/ying-ge/java-jin-jie/ajax/"/>
      <url>/2021/05/27/ying-ge/java-jin-jie/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Ajax可以将前端的数据传回后方，在前端js中定义</p><span id="more"></span><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp">Ajax学习地址</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>AJAX = 异步JavaScript 和XML</li></ul><h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><ul><li>向服务端发送请求时开启async时</li></ul><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li>同步请求</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote><ol><li>先判断是否是ie浏览器</li><li>向服务端发送请求（这一步可以写在要执行的模块中）</li><li>当响应处于事件中的就绪状态<code>onreadystatechange</code>时，判断当前状态码是否是200，XMLHttpRequest状态是否是4</li><li>在判断语句中完成需要执行的方法</li></ol></blockquote><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>只提交部分请求，而不上传所有请求</p><h2 id="jQuery中使用"><a href="#jQuery中使用" class="headerlink" title="jQuery中使用"></a>jQuery中使用</h2><p>在引入jQuery后可以直接使用jQuery语法调用ajax语法，ajax的属性都需要存在</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>type</code></td><td>提交的方式，一般选择<code>post</code></td></tr><tr><td><code>url</code></td><td>请求服务端的地址，需要将后端地址补全</td></tr><tr><td><code>data</code></td><td>提交到后端的数据，一般采取 <code>name:$(&quot;[name = &#39;a1&#39;]&quot;).val()</code>的形式传值给后端</td></tr><tr><td><code>dataType</code></td><td>预期服务器返回的数据类型</td></tr><tr><td><code>success:function(avg)&#123;&#125;</code></td><td>服务器请求成功之后的回调函数，avg为后端传回来的值</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax002</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//直接调用ajax 每一个属性都必须要有</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          url<span class="token operator">:</span> <span class="token string">"http://localhost:8080/ajax"</span><span class="token punctuation">,</span>          type<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>          <span class="token comment">//提交到后端的数据类型</span>          data<span class="token operator">:</span><span class="token punctuation">&#123;</span>              a1<span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[name = 'a1']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              a2<span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[name = 'a2']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">//预期服务器返回的数据类型</span>          dataType<span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token comment">//avg是后端传回来的结果</span>          <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">avg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>avg <span class="token operator">==</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>avg<span class="token operator">==</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2021/05/24/ying-ge/java-jin-jie/mybatis/"/>
      <url>/2021/05/24/ying-ge/java-jin-jie/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>MyBatis整合了JDBC，使用xml配置文件或者注解的形式来写sql语句，减少了配置代码。</p><span id="more"></span><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><ul><li>MyBatis总结一下</li></ul><!-- more --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>MyBatis是一款<strong>持久层框架</strong>,支持与数据库进行交互</li><li>MyBatis<strong>通过简单的XML或者注解配置和映射原始类型，接口和Java Pojo</strong></li><li>MyBatis是<strong>半自动化</strong>的<strong>ORM框架</strong>  ORM：对象映射关系</li><li>基于MyBatis的应用以<code>sqlSessionFactory</code>的实例为核心</li><li>持久层实现类不需要手动编辑，在底层使用动态代理创建，并将持久层接口与映射文件对应</li></ul><h3 id="职能"><a href="#职能" class="headerlink" title="职能"></a>职能</h3><ul><li>Mybatis帮助开发者<strong>将数据存入数据库,和从数据库中取数据</strong></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>简化开发</li><li>使用<strong>映射文件</strong>书写SQL语句，与JDBC相比很简单</li></ul><h2 id="Maven导入"><a href="#Maven导入" class="headerlink" title="Maven导入"></a>Maven导入</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在pron.xml文件中添加依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><ul><li><p>核心配置文件用于定义数据源，开启事务，映射Mapper文件</p></li><li><p>核心配置文件包含</p><blockquote><p><strong>获取数据库连接实例的数据源(<strong>DataSouece</strong>)</strong></p><p>决定事务作用域</p><p>事务管理器</p></blockquote></li></ul><blockquote><p><code>configuration</code></p><p><code>environments</code></p><p><code>typeAliases</code>  为类设置别名，全工程都可使用</p><p><code>transactionManager type=&quot;JDBC&quot;</code>  事务相关代码，开启后，可直接使用事务</p><p><code>dataSource</code>  数据源，此标签下写入数据库连接数据</p><p><code>mapper</code> 映射mapper文件位置 mapper文件时持久层与持久层接口对应的配置文件</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--为类设置别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--为User实体类设置别名，在映射文件中可以返回值类型、接收值类型都可使用别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--default:默认使用的标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mybatis/example/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><blockquote><ol><li>创建核心配置，写入数据库连接代码，选择是否开启事务，配置Mapper映射文件，此时映射文件与持久层接口对应</li><li>编写与持久层接口具有映射关系的Mapper配置文件，写在resources路径下，路径与接口路径相同</li><li>在Mapper配置文件中书写sql语句，每句sql语句全局标识必须与持久层接口方法对应</li><li>测试类中<ol><li>读取核心配置文件，连接数据库，将映射文件与持久层接口匹配</li><li>创建Sql会话工厂对象，用于获取Sql会话对象</li><li>从工厂中获取SqlSession对象</li><li>使用getMapper方法为持久层接口创建实例</li><li>对实例进行操作</li></ol></li></ol></blockquote><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">主要写<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="XML映射器"><a href="#XML映射器" class="headerlink" title="XML映射器"></a>XML映射器</h2><ul><li>Mapper配置文件用于与持久层接口对应</li><li>Mybatis中直接使用配置文件对数据库进行访问，与<strong>持久层接口对应</strong>，一般命名方式与持久层接口相同。</li><li>每一个实体类最好与一个持久层接口对应，每一个接口与一个Mapper映射文件对应</li></ul><h3 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h3><ul><li><p>配置文件需写在resources路径下，并且要与接口路径相同</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210524105030.png" alt="持久层接口对应配置文件路径"></p></li></ul><h3 id="配置文件约束"><a href="#配置文件约束" class="headerlink" title="配置文件约束"></a>配置文件约束</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顶级元素"><a href="#顶级元素" class="headerlink" title="顶级元素"></a>顶级元素</h3><blockquote><p><code>cache</code>  命名空间的缓存设置</p><p><code>cache-ref</code> 引用其他命名空间的缓存配置</p><p><code>resultMap</code> 描述如何从数据库结果集中加载对象，一般可用来从重写实体类属性与数据库字段对应关系</p><p><code>parameterType</code> 传入语句的参数的类全限定名或别名，即传入一个参数的参数类型，可谓基本或引用数据类型，并将属性一同传入。</p></blockquote><h3 id="映射内容"><a href="#映射内容" class="headerlink" title="映射内容"></a>映射内容</h3><ul><li>持久层接口映射标签为<code>mapper</code> ，需要为其配置持久层接口全类名</li><li><code>namespace</code> 名称空间，传入<strong>持久层接口对应的全类名</strong></li><li>在mapper配置中每一种sql方法对应的标签不同<ul><li><code>id</code> 全局标识，<strong>传入的值必须是持久层接口对应的方法名称</strong></li><li><code>resultType</code> 增删改查得到的结果返回的类型<ul><li>返回结果为类 填入类的全类名</li><li>返回结果为数据类型 填入数据类型名</li></ul></li></ul></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getListByUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *from tb_students    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段对应"><a href="#字段对应" class="headerlink" title="字段对应"></a>字段对应</h3><ul><li><p>要想使用实体类（类似User）来获取数据库数据，<strong>实体类属性必须与数据库字段对应</strong>，</p></li><li><p>要想使随意定义的实体类属性与数据库数据对应，有两种解决方法，都是在与持久层接口对应的配置文件中</p></li></ul><h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><ul><li>使用resultMap建立起数据库表的字段和实体类中属性的对应关系</li><li>建立联系需要将<strong>所有</strong> 属性与字段的对应关系写出</li><li><strong>当使用resultMap标签时，在使用增删改查标签时，策略需要设置为resultMap</strong><ul><li><code>property</code> 代表实体中的属性</li><li><code>column</code> 代表数据库表中字段</li></ul></li><li>相应标签：<ul><li><code>&lt;id property=&quot;...&quot; column=&quot;...&quot;/&gt;</code>  用于匹配主键id</li><li><code>&lt;result property=&quot;...&quot; column=&quot;...&quot;&gt;</code>  用于匹配非主键id</li></ul></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--id为全局标识符，type需要传入存放数据的实体类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emoVo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--匹配主键字段--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--匹配非主键字段--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--设置对应关系后，需要将策略设置为resultMap--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getListByEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select *from tb_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写出别名"><a href="#写出别名" class="headerlink" title="写出别名"></a>写出别名</h4><ul><li>将实体类中的属性作为数据表字段的别名</li><li>策略使用resultType，传入实体类的全类名</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getListByEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select eid,emp_name empName,age,sex,address,salary,hobby from tb_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul><li><p>Mybatis基本原则：在每个插入、更新或者删除操作之间，通常会执行多个查询操作</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPerson<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SELECT*FROM PERSON WHERE ID = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--语句意思：这个语句名为selectPerson，接受一个int类型的参数，返回一个hashMap类型的对像，其中键是列名，值是结果行中的对应值--></span>#&#123;id&#125; 是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>#&#123;id&#125;</code>  告诉MyBatis创建一个预处理语句参数，等同于占位符，并传入占位符的值</p></li></ul><h4 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>命名空间中唯一标识符，可以被用来引用这条语句</td></tr><tr><td><code>parameterType</code></td><td>将传入这条语句的参数的类全限定名或者别名（可选）</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或者别名，如果返回的是集合，应该设置为集合包含的类型  List<User>  返回类型为User</td></tr><tr><td><code>resultMap</code></td><td>对外部resultMap的命名引用，</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>其余属性见mybatis 官网 XML映射器</strong><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters</a></td></tr></tbody></table><h3 id="增加语句"><a href="#增加语句" class="headerlink" title="增加语句"></a>增加语句</h3><ul><li><p>添加语句中可以使用OGM表达式将实体类字段传入</p><ul><li>OGM表达式： 类似el表达式，可以取到实体类中每一个字段，包括基本数据类型和String类型</li></ul></li><li><p>添加完成后回传主键Id</p><ul><li>```xml<br>&lt;selectKey <pre><code>       resultType=&quot;int&quot;       keyProperty=&quot;eid&quot;       keyColumn=&quot;eid&quot;       order=&quot;AFTER&quot;&gt;</code></pre>  <!--/*回传最后一条数据的主键id*/--><pre><code> select  LAST_INSERT_ID();</code></pre></selectKey><pre class="line-numbers language-none"><code class="language-none">  - &#96;resultType &#96; 方法回传的数据类型  - &#96;keyProperty&#96; (只用于&#96;insert、update&#96;)实体类中主键id ，即语句结果应该被设置到的目标属性  - &#96;keyColum &#96;  （只用于&#96;insert、update&#96;）数据库中主键id,  - &#96;order&#96; 可以设置为&#96;BEFORE&#96;,&#96;AFTER&#96;，&#96;BEFORE&#96;可以先生成主键，&#96;AFTER&#96;一般用于回传主键id&#96;&#96;&#96;xml&lt;insert id&#x3D;&quot;addEmp&quot; parameterType&#x3D;&quot;com.wufan.pojo.Emp&quot;&gt;        &#x2F;*添加完数据之后用于返回记录的主键id*&#x2F;        &lt;selectKey resultType&#x3D;&quot;int&quot;                   keyProperty&#x3D;&quot;eid&quot;                   keyColumn&#x3D;&quot;eid&quot;                   order&#x3D;&quot;AFTER&quot;&gt;       &#x2F;*回传最后一条数据的主键id*&#x2F;      select LAST_INSERT_ID();        &lt;&#x2F;selectKey&gt;        insert tb_emp(        emp_name,        age,        sex,        address,        salary,        hobby) values (        #&#123;empName&#125;,        #&#123;age&#125;,        #&#123;sex&#125;,        #&#123;address&#125;,        #&#123;salary&#125;,        #&#123;hobby&#125;        )    &lt;&#x2F;insert&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h3><ul><li>修改语句传入的参数应该为一整个实体类，包含主键id和其余参数</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update tb_emp set        emp_name = #&#123;empName&#125;,        age = #&#123;age&#125;,        sex = #&#123;sex&#125;,        address = #&#123;address&#125;,        salary = #&#123;salary&#125;,        hobby = #&#123;hobby&#125;        where eid = #&#123;eid&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul><li><p>模糊查询可以使用集合传入需要模糊查询的数据</p><ul><li>集合传入数据时使用key获取value，使用El表达式传入key</li></ul></li><li><p><code>parameterType</code>  用于获取传入的参数类型</p><p><code>resultMap</code>  建立数据库表字段和实体属性的对应关系</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>模糊查询<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findEmpLikeByName"</span> parameterType<span class="token operator">=</span><span class="token string">"hashMap"</span> resultMap<span class="token operator">=</span><span class="token string">"resultMap"</span><span class="token operator">></span>  select <span class="token operator">*</span>from tb_emp where emp_name like <span class="token string">'%$&#123;likeName1&#125;%'</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><ul><li>在sql语句中传入限定条件选出对应的数据</li></ul><p>执行流程</p><ul><li>在测试类中传入相应的数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findUser</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>在mapper映射文件中的语句块中使用动态sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> tb_user <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"username != null"</span><span class="token operator">></span>  <span class="token comment">/*username为实体中的username  此处并且只能使用and不能使用*/</span>  <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token comment">#&#123;username&#125; /*此处是数据库的Username*/</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token comment">#查询数据时，当传入的实体类username!=null时，执行接下去的语句，否则只执行以上语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><ul><li>延迟加载（按需加载）<ul><li>对于数据的查询，需要的使用就执行，不需要就不执行</li></ul></li><li>立即加载<ul><li>对于数据的查询，无论需不需要，都会执行查询</li></ul></li></ul><p>场景：</p><blockquote><ul><li><p>（将用户表看出主表 一对多 一般延迟加载）一张用户表对应多个账户</p><ul><li>查询用户数据的时候，没有必要查出账户数据</li></ul></li><li><p>（将账户表看成主表 一对一 一般立即加载） 一个账户表对应一个用户</p><ul><li> 查询账户数据的时候，有必要查出用户数据</li></ul></li><li><p>一对多：</p><ul><li>用户对账户 一个用户有多个账户</li></ul></li><li><p>一对一：</p><ul><li>账户对用户</li></ul></li><li><p>多对多：员工和角色  </p><ul><li>一个员工可以有多个角色，一个角色可以有多个员工</li></ul></li></ul></blockquote><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><ul><li><p>无论是一对一还是一对多，涉及到多张表时，在主表中都要聚合主表的引用</p><p>在XML映射器中的<strong>resusltMap</strong>中需要设置类的关联，关联标签内传入相应类的resultMap</p></li></ul><h4 id="一对一关联-association"><a href="#一对一关联-association" class="headerlink" title="一对一关联 association"></a>一对一关联 association</h4><ul><li><p><code>association</code> 设置一对一关联</p><ul><li><code>property</code> 类中聚合的属性名称</li><li><code>javaType</code>  指定pojo中属性的类型</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--为主表中聚合的User属性设置关联--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="一对多集合-collection"><a href="#一对多集合-collection" class="headerlink" title="一对多集合  collection"></a>一对多集合  collection</h4><ul><li><code>collection</code> 设置一对多关联<ul><li><code>ofType</code> 指定  <strong>映射到list集合属性中pojo的类型</strong></li></ul></li></ul><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul><li>一个账户对应一个用户<ul><li>设置Account账户实体类为主表，User用户类为从表，在主表中聚合从表的属性</li></ul></li></ul><h4 id="设置关联"><a href="#设置关联" class="headerlink" title="设置关联"></a>设置关联</h4><ul><li><p>在resultMao中设置关联</p></li><li><p><code>javaType</code>  <strong>指定pojo中的属性类型</strong></p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--建立实体类Account与表ts_Account的关系--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountVo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--设置一对一的关系  即设置Account类中的User属性的关系        property  聚合从表的属性名称        javaType 从表实体的类型，一般为全类名，可以写别名        --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sql语句"><a href="#Sql语句" class="headerlink" title="Sql语句"></a>Sql语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> ts_account a<span class="token punctuation">,</span>tb_user u <span class="token keyword">where</span> a<span class="token punctuation">.</span>uid<span class="token operator">=</span>u<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><ul><li><p>一个用户对应多个账户  采用延迟加载</p></li><li><p>一对多关系时，<strong>主表中需要聚合从表的集合对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> accountList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="关联-1"><a href="#关联-1" class="headerlink" title="关联"></a>关联</h4><ul><li><p>在resultMap中设置关联</p></li><li><p>嵌套映射的结果集合到一个list中</p></li><li><p>映射文件中，建立实体类与数据库表的映射关系时，需要设置一对多的关系</p></li><li><p>将主表的引用</p></li><li><p>属性</p><ul><li><code>property</code> 聚合从表的属性名称</li><li><code>ofType</code> 指定pojo中的属性类型</li></ul> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.pojo.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul><li><p>使用延迟加载</p></li><li><p>一个用户对应多个角色，一个角色也可以对应多个用户</p></li><li><p>需要一张表作为中间表</p></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>存在缓存里的临时数据</p><p>将用户经常查询的数据存放在缓存中，用户查询数据不需要从磁盘上查询，从缓存查询效率，解决<strong>高并发系统的性能问题</strong></p><p>缓存不支持持久化</p><p>经常查询并且长时间不会改变的数据放入缓存</p><p>MyBatis查询数据顺序<code>二级缓存--&gt; 一级缓存--&gt;数据库</code></p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>减少和数据库的交互次数</li><li>减少系统开销</li><li>提高系统效率</li></ul><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>MyBatis会在一次会话的表示—一个SqlSession对象中创建了一个本地缓存(<code>local cache</code>)</p><p>每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中</p><p>存在，则直接从缓存中取出</p><p>不存在，则从数据库读取数据，将查询结果存入缓存并返回给用户</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210525151548.png" alt="缓存机制"></p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>即本地缓存，默认存在</li><li>MyBatis的一级缓存是在会话(SqlSession)层面进行缓存的，一级缓存默认开启</li><li>存放到缓存中的是封装的对象<ul><li>mysql将整个对象存放在一级缓存中，如果缓存开启，则创建的两个对象地址相同</li></ul></li></ul><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><ul><li>先从数据库中查询数据，查询出来的数据会被封装成一个对象，最终这个对象会被存放在缓存中</li></ul><h4 id="失效原因"><a href="#失效原因" class="headerlink" title="失效原因"></a>失效原因</h4><ol><li>第一次获取之后，对查询结果集造成了影响，会导致第二次查询的时候重新访问数据库</li><li>在第一次sql语句执行之后，使用了清空缓存的方法<code>sqlSession.clerCache</code></li></ol><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><p>使用一级缓存不能跨会话共享，不同的会话之间对于相同的数据可能有不一样的缓存。</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li>二级缓存用来解决一级缓存不能跨会话共享问题</li><li>二级缓存是sqlSessionFactory级别的</li><li>存放到缓存中的是数据</li><li>范围:namespace级别，可以被多个SqlSession共享，即<strong>只要是同一个接口里面的相同方法，都可以共享数据</strong>。</li><li>二级缓存范围比一级缓存广，当一级缓存消失时，依旧会从二级缓存中取得数据</li></ul><h4 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h4><blockquote><ol><li><p>在核心配置文件settings标签中开启缓存</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启缓存--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在需要开启二级缓存的持久层接口对应的mapper文件中添加<code>&lt;cache&gt;</code>标签，用于让当前mapper支持缓存</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--让当前mapper支持缓存--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在对应的sql标签上添加<code>userCache</code>属性，让当前sql语句支持缓存</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAllUserByRole<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userVo<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></blockquote><h2 id="注解写SQL"><a href="#注解写SQL" class="headerlink" title="注解写SQL"></a>注解写SQL</h2><ul><li>基于注解写SQL的方式与基于Mapper文件类似</li><li>在持久层接口的方法上可直接写SQL语句</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote><ol><li><p>在核心配置文件中添加需要注解的持久层接口的映射</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.mapper.StuMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在方法上添加对应的SQL语句</p><ul><li><code>@Select</code> 用于写入SQL语句，此处是查询</li><li><code>@Results(value=&#123;@Result()&#125;)</code> 用于将数据库中字段与表中字段对应</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_students"</span><span class="token punctuation">)</span>  <span class="token comment">/*查询标签*/</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"id"</span> <span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"stu_name"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="/2021/05/22/ying-ge/java-jin-jie/spring/"/>
      <url>/2021/05/22/ying-ge/java-jin-jie/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Spring是一个轻量级框架，主要用于与前端交互，IOC控制反转让对象与对象之间有效解耦。</p><span id="more"></span><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><ul><li><p>面向表现层，主要与前端进行交互</p></li><li><p>Spring是容器，可以帮忙管理很多可重用的组件</p></li><li><p>最大的目的就是使JAVA EE开发更加容易</p></li><li><p>Spring  <strong>方便解耦，简化开发</strong></p></li><li><p>Spring容器中的实例默认是单例的，是可重用的组件，内存地址为一份</p></li></ul><h2 id="Spring-核心"><a href="#Spring-核心" class="headerlink" title="Spring 核心"></a>Spring 核心</h2><ul><li>IOC容器<ul><li>IoC负责创建与管理系统对象，在此基础上扩展功能</li></ul></li><li>AOP面向切面编程</li></ul><h2 id="正转"><a href="#正转" class="headerlink" title="正转"></a>正转</h2><ul><li><p>(传统开发方式)</p></li><li><p><strong>正转</strong> ： 在软件开发中，聚合在类中的实例，是由开发人员创建的，对象实例创建的控制权在开发人员手上</p><ul><li><strong>即在程序中new对象</strong></li><li>坏处： 使类与类之间产生了依赖关系，使得程序的执行效 率变低</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TestDao</span> dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDaoimpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>即聚合实例的引用时，使用构造方法或set方法，在类调用处传入对象</p></li></ul><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210513093509.png" alt="控制反转"></p><ul><li><p>IOC控制反转，<code>Inversion  of Control</code></p></li><li><p>由代理人创建与管理对象，消费者通过代理人来获取对象</p><blockquote><p>代理人   对象   消费者</p><p>中介        房东           租房客</p></blockquote></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210701213000.png" alt="IOC容器概念"></p><ul><li>在IOC容器中，持久层(B)通过xml文件或注解的形式注入到业务层(service)</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>利用Ioc容器，让对象与对象之间有效解耦<ul><li>解释：使用配置文件进行对象创建及配置，不需要修改代码，也不需要new对象</li></ul></li><li>加入<strong>IOC容器</strong>将对象同一管理，让对象关联变为弱耦合<ul><li>消费者获取对象都是从IOC容器中获取</li></ul></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>将程序中写死的文本剥离出来，放入配置文件中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在Ioc容器启东时，自动由spring实例化Apple对象，取名sweepApple放入到容器中，即全局标识--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sweetApple<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.spring.ioc.entity.Apple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红富士<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>origin<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>欧洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红色<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h2><ul><li><p>DI <code>Dependency Injection</code>具体技术实现，在运行时 让程序创建对象</p></li><li><p>Java中通过<strong>反射</strong>实现对象注入，即本质为反射技术  </p></li><li><p>在类中直接创建对象的方式改成给该引用指定构造方法，程序里不存在new关键字,这也被称为依赖注入，</p><p><strong>程序由主动地创建对象变成被动的接收对象，这是控制反转的一种思想</strong>，对象创建的控制权交给了客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//聚合接口的引用</span><span class="token keyword">private</span> <span class="token class-name">TestDao</span> dao<span class="token punctuation">;</span>    <span class="token comment">/*在类中直接创建对象的方式改成给该引用指定构造方法，    程序里不存在new关键字,这也被称为依赖注入，    程序由主动地创建对象变成被动的接收对象，这是控制反转的一种思想    对象创建的控制权交给了客户端*/</span>    <span class="token keyword">public</span> <span class="token class-name">TestServiceimpl</span><span class="token punctuation">(</span><span class="token class-name">TestDao</span> dao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dao <span class="token operator">=</span> dao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>使用者不再面向具体的对象，而是面向IOC容器</li></ul><h2 id="Spring官方支持"><a href="#Spring官方支持" class="headerlink" title="Spring官方支持"></a>Spring官方支持</h2><ul><li><p>要想使用spring框架，需要导入相应的jar包</p><blockquote><p>消息组件：</p><p>commons-logging-1.2.jar  </p><p>spring-expression-5.0.2.RELEASE.jar  内置表达式模块，spring有自己的表达式语言，实际操作中，通过此模块解析和处理</p><p>核心容器：</p><p>spring-beans-5.0.2.RELEASE.jar   对象管理模块，ioc容器中对象实例化或者设置关联</p><p>spring-context-5.0.2.RELEASE.jar  上下文文本对象，通过此模块可使用代码对spring对象进行创建</p><p>spring-core-5.0.2.RELEASE.jar   容器jar包   spring核心代码在此书写</p></blockquote></li></ul><h3 id="xml文档设置"><a href="#xml文档设置" class="headerlink" title="xml文档设置"></a>xml文档设置</h3><ul><li><p><strong>xml约束部分</strong></p><ul><li>进入spring.io</li><li>Project –&gt; Spring FrameWork –&gt;Core –&gt;1.2.1XML文件配置</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>    xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="使用maven导入"><a href="#使用maven导入" class="headerlink" title="使用maven导入"></a>使用maven导入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--添加阿里云镜像--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--添加spring依赖--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring框架模块"><a href="#Spring框架模块" class="headerlink" title="Spring框架模块"></a>Spring框架模块</h3><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210523092424.png" alt="Spring框架模块"></p><p>Spring分为四层</p><ul><li><p><code>Data Access/Integration</code>  数据访问与集成模块</p><ul><li>JDBC  对数据库访问的集成</li><li>ORM 对OM数据访问框架的集成</li><li>OXM  提供了JAVA对象和XML文档的互相转换</li><li>JMS  为Spring消息服务提供支持</li><li>Transctions  事务管理部分</li></ul></li><li><p><code>Web </code>  基于Web应用的模块</p><ul><li>WebSocket</li><li>Servlet</li><li>Web</li><li>Portlet</li></ul></li><li><p><code>Instrumentation</code>  检测器  检测运行中各项组件</p></li><li><p><code>Messaging</code>  Spring提供的消息处理功能</p></li><li><p>最核心的是<code>Core Container</code> 层</p><ul><li>Core 核心模块，提供Spring核心代码实现</li><li>Beans  对对象创建和装配</li><li>SpEL  Spring表达式语言</li></ul></li><li><p>Test  Spring提供的测试模块</p></li></ul><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ul><li>在spring中需要对数据库数据进行提交或者回滚操作</li><li>声明式事务规则，进入方法打开事务，成功时提交，运行异常时回滚</li><li><strong>@Transactional</strong>是声明式事务的注解，一般情况下都使用注解方式进行操作</li></ul><ul><li><p>使用声明时事务只需要在需要的方法上加上**@Transactional注解**</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210704150000.png" alt="使用注解形式添加事务"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Transactional声明时事务，加在类上所有方法都会开启事务，加在方法上单个方法开启事务</span><span class="token comment">//Propagation.REQUIRED 对于需要事务的方法自动开启，</span><span class="token comment">//rollbackFor = RuntimeException.class 当遇到什么异常时回滚数据，一般情况下实际上是遇到运行时异常RuntimeException时回滚数据</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Transactional()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编程时事务"><a href="#编程时事务" class="headerlink" title="编程时事务"></a>编程时事务</h2><ul><li><p>通过在类中写入代码的形式实现编程时事务</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210704145808.png" alt="编程时事务"></p></li></ul><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><ul><li><p>基于XML配置Bean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--bean的作用是通知容器实例化哪个对象  bean标签默认通过构造方法创建对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.spring.ioc.entity.Apple<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>基于注解配置Bean</p></li><li><p>基于Java代码配置Bean JavaConfig</p></li></ul><h2 id="XML管理对象-Bean"><a href="#XML管理对象-Bean" class="headerlink" title="XML管理对象(Bean)"></a>XML管理对象(Bean)</h2><p>Bean —————–容器中的对象</p><ul><li>Java Bean: 拥有构造方法，私有属性，get,set方法</li></ul><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h3><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210701160059.png" alt="bean生命周期"></p><h3 id="全局标识符"><a href="#全局标识符" class="headerlink" title="全局标识符"></a>全局标识符</h3><ul><li><p>使用bean创建对象时存在  name和id</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple6<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple7<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><ul><li>bean id 与 name 都是设置对象在IoC容器中唯一标识</li><li>两者在同一个配置文件中都不允许重复</li><li>两者允许在多个配置文件中出现重复，新的对象会覆盖原有的重名对象</li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li>id 要求更严格，一次只能定义一个对象标识(<strong>推荐</strong>)</li><li>name更宽松，一次允许定义多个对象标识</li></ul><h3 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h3><ul><li><strong>基于构造方法对象实例化</strong></li><li>基于静态工厂实例化<ul><li>通过静态方法创建对象，隐藏创建对象的细节</li><li>优点：在Ioc容器之外，通过程序的形式帮助组织对象</li></ul></li><li>基于工厂实例方法实例化<ul><li>IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程</li></ul></li></ul><h4 id="基于构造方法对象实例化"><a href="#基于构造方法对象实例化" class="headerlink" title="基于构造方法对象实例化"></a>基于构造方法对象实例化</h4><ul><li><p>利用构造方法参数名实例化  <strong>最常使用！！！</strong></p><ul><li> <code>&lt;constructor-arg name=&quot;...&quot; value=&quot;...&quot;&gt;&lt;/con..&gt;</code></li><li>name为实体类的属性  value为属性值</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造方法参数位置实例化</p><ul><li><code>index=&quot;…&quot;</code> 参数从0开始</li><li><code>&lt;constructor-arg index=&quot;0&quot; value=&quot;...&quot;</code></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--使用构造方法采纳数位置对象实例化--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红富士<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红色<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>欧洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="基于静态工厂对象实例化"><a href="#基于静态工厂对象实例化" class="headerlink" title="基于静态工厂对象实例化"></a>基于静态工厂对象实例化</h4><ul><li>静态工厂类：通过静态方法创建对象，隐藏创建对象的细节</li><li>优点：在IoC容器之外，通过程序的形式帮助组织对象</li></ul><p><strong>使用注意！！</strong> xml中使用bean获取方法时，使用<code>factory-method</code>获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//工厂类中定义静态方法  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Apple</span> <span class="token function">createSweetApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//logger.info("")  日志打印，使用静态工厂容易实现，使用配置文件很难实现</span>        <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apple<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"红富士"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apple<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apple<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span><span class="token string">"欧洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> apple<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--CML中利用静态工厂获取对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.spring.ioc.factory.AppleStaticFactory<span class="token punctuation">"</span></span>      <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createSweetApple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--factory-method工厂中方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于工厂实例方法实例化"><a href="#基于工厂实例方法实例化" class="headerlink" title="基于工厂实例方法实例化"></a>基于工厂实例方法实例化</h4><ul><li>IoC容器对工厂类进行实例化并调用对应的实例方法创建对象</li><li>方法中不添加静态关键字，<strong>由XML文件进行bean创建对象</strong></li></ul><p><strong>使用注意！！！</strong> xml中获取方法时，需先获取工厂对象，再使用factory-bean进行对象调用，使用factory-method进行方法调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//工厂类中  无static</span><span class="token keyword">public</span> <span class="token class-name">Apple</span> <span class="token function">createSweetApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//logger.info("")  日志打印，使用静态工厂容易实现，使用配置文件很难实现</span>  <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  apple<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"红富士"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  apple<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  apple<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span><span class="token string">"欧洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> apple<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--利用工厂实例方法获取对象--></span>  <span class="token comment">&lt;!--对工厂对象进行实例化--></span> <span class="token comment">&lt;!--factory-bean 调用工厂对象，factory-method调用工厂类中具体方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factpryInstance<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.spring.ioc.factory.AppleFactoryInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple5<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factpryInstance<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createSweetApple<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="IoC容器中获取bean"><a href="#IoC容器中获取bean" class="headerlink" title="IoC容器中获取bean"></a>IoC容器中获取bean</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><p>使用getBean(“全局标识”,对应的类)  <strong>优先使用此形式！！</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Apple</span> apple2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"apple2"</span><span class="token punctuation">,</span> <span class="token class-name">Apple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用getBean(“全局标识”)  需对获取对象进行强制转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Apple</span> apple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"apple2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="路径匹配表达式"><a href="#路径匹配表达式" class="headerlink" title="路径匹配表达式"></a>路径匹配表达式</h3><ul><li><p>路径匹配表达式：在加载配置xml文件时传入的特殊格式字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">classpath<span class="token operator">:</span>applicationContext<span class="token punctuation">.</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>classpath:在类路径下加载配置文件，实际上加载的是target路径下的类文件</p><ul><li><p>当程序第一次编译时，会自动创建类classes包，<strong>加载的配置文件存在于此包下</strong></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210523152237.png" alt="类路径"></p></li></ul></li></ul><h4 id="加载单个配置文件"><a href="#加载单个配置文件" class="headerlink" title="加载单个配置文件"></a>加载单个配置文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始化IOC容器并实例化对象  路径表达式意思：加载类路径下配置文件</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span>   <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="加载多配置文件"><a href="#加载多配置文件" class="headerlink" title="加载多配置文件"></a>加载多配置文件</h4><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210523152440.png" alt="加载多配置文件"></p><h4 id="路径表达式"><a href="#路径表达式" class="headerlink" title="路径表达式"></a>路径表达式</h4><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210523152643.png" alt="路径表达式"></p><h4 id="Spring-底层"><a href="#Spring-底层" class="headerlink" title="Spring 底层"></a>Spring 底层</h4><ul><li>spring在底层会通过dom4j去解析xml文档，找到所有的bean标签，在找到每个bean标签对应的class属性，获取class属性的属性值，根据反射创建实例，保存在spring工厂中</li></ul><h4 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h4><p><code>scope</code>属性设置</p><ul><li>如果对象是单例，那核心容器在加载的时候，对象就会创建，核心容器关闭的时候（调用close方法），对象就会销毁</li><li>如果对象是多例，什么时候获取对象(getBean方法)，容器什么时候才会创建，对象的销毁需要由垃圾回收机制回收，即与容器无关</li></ul><h3 id="注解配置Bean"><a href="#注解配置Bean" class="headerlink" title="注解配置Bean"></a>注解配置Bean</h3><h4 id="注解种类"><a href="#注解种类" class="headerlink" title="注解种类"></a>注解种类</h4><h5 id="用于创建对象"><a href="#用于创建对象" class="headerlink" title="用于创建对象"></a>用于创建对象</h5><p>创建对象注解对象当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p><ul><li><strong><strong>@Component</strong></strong>  :（一般用于实体类中）<ul><li><strong>配置管理的资源</strong></li><li>把资源让 spring 来管理。相当于在 xml 中配置一个 bean。</li></ul></li><li>****@Controller<strong>：一般用于表现层的注解。</strong></li><li><strong><strong>@Service</strong></strong><strong>：一般用于业务层的注解。</strong></li><li>****@Repository<strong>：一般用于持久层的注解。</strong></li></ul><h5 id="用于注入数据"><a href="#用于注入数据" class="headerlink" title="用于注入数据"></a>用于注入数据</h5><p>相当于 </p><p><code>&lt;property name=&quot;&quot; ref=&quot;&quot;&gt;  </code>  <code>&lt;property name=&quot;&quot; value=&quot;&quot;&gt;</code></p><ul><li><p><strong>@Autowired</strong>（根据类型注入）</p><ul><li><p>自动按照类型注入。当使用注解注入属性时，set 方法可以省略。</p><p>它只能注入其他 bean 类型。</p><p>当有多个类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功。找不到就报错。</p></li></ul></li><li><p><strong>@Qualifier</strong>（不能单独使用） 根据名称注入</p><ul><li>如果匹配多个类型一致的对象，将无法选择具体注入哪一个对象<br>使用@Qualifier()注解告诉spring容器自动装配哪个名称的对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//根据类型注入</span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//按名称注入，不能单独使用</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"accountServiceImpl"</span><span class="token punctuation">)</span>  <span class="token comment">//配合Autowired使用</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>@Resource</strong>（根据id注入的） <strong>最常使用的自动装配注解</strong></p><ul><li>直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。</li><li><code>@Resource(“name”) ** @Autowired + @Qualifier(“name”)</code></li></ul></li><li><p><strong>@Value</strong>（用于注入基本数据类型和String类型）</p></li><li><p><strong><strong>@Scope</strong></strong></p><ul><li><strong>指定 bean 的作用范围。</strong></li></ul></li><li><p><strong>@PostConstruct</strong>用于指定初始化的方法</p></li><li><p><strong>@PreDestroy</strong>用于指定销毁的方法</p></li><li><p><strong>@Transactional</strong> 声明式事务管理 编程中使用的注解</p><ul><li>只被应用到 public 方法上</li></ul></li></ul><h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        开启spring对注解的支持<span class="token operator">:</span>        首先spring会找到component<span class="token operator">-</span>scan标签，确定已经开启包扫描        然后去扫描base<span class="token operator">-</span><span class="token keyword">package</span>属性指定的包，扫描的过程中，spring会        一一过滤每一个组件，看一下这些组件有没有spring提供的注解，如果有        会通过反射创建该组件的实例，然后装载进核心容器    <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ygkj"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ygkj"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210514093305.png" alt="配置比较"></p><h2 id="自动装配注解"><a href="#自动装配注解" class="headerlink" title="自动装配注解"></a>自动装配注解</h2><ul><li>Controller层依赖Service层，Service层依赖dao层，如果要使各层依赖注入成功，并且彼此间耦合度减小，使用装配注解的方式进行配置</li></ul><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><ul><li><p><strong>@Autowired</strong>注解  基于类型进行装配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  <span class="token comment">//按类型装配，自动分辨是持久层还是业务层</span>                <span class="token comment">//如果还需要另外一个持久层的聚合，使用Autowired无法分辨出哪个是持久层的聚合</span><span class="token comment">//Autowired注解没有set方法</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>spring IOC容器会<strong>自动通过反射技术</strong>将属性private修饰符转换为public，这个过程我们是不可见的，并且被<strong>Autowired</strong>修饰的属性，不再执行set方法</p></li></ul><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><h3 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h3><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Configuration</td><td>用来声明一个类是spring的核心配置类</td></tr><tr><td>@Bean</td><td>会将修饰方法所对应的返回值装在到spring核心容器中</td></tr><tr><td>@ComponentScan(“com.wufan”)</td><td>开启扫描包</td></tr><tr><td>@Import(JDBCConfig.class)</td><td>用于导入其他核心配置类  ，括号内的可以视为子类</td></tr><tr><td>@PropertySource(“classpath:jdbc”)</td><td></td></tr></tbody></table><ul><li></li></ul><h2 id="Java-Config"><a href="#Java-Config" class="headerlink" title="Java Config"></a>Java Config</h2><ul><li>Java Config是除去注解，xml方式的第三种Ioc容器配置方式</li><li><strong>使用Java类替代原始的xml文件</strong></li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li><p>完全摆脱xml束缚，使用独立Java类管理对象和依赖</p></li><li><p>注解配置相对分散，分散在各个类中</p><ul><li>Java Config可对配置集中管理 </li></ul></li><li><p>可以在编译时进行依赖检查，不容易出错</p></li></ul><h3 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h3><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210710172922.png" alt="JavacOnfig核心注解"></p><h3 id="配置创建"><a href="#配置创建" class="headerlink" title="配置创建"></a>配置创建</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment">//该注解确认当前类是一个配置类，用于替代applicationContext.xml</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//Java Config利用方法创建对象，将方法返回对象放入容器，beanId - 方法名</span>            <span class="token comment">//等同于 &lt;bean id="userDao" ...> 用于创建实例</span>    <span class="token keyword">public</span> <span class="token class-name">UserDao</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * @param userDao  在JavaConfig中，依赖注入是通过参数形式注入，     *                 Java首先会生成bean，当检测到参数名与beanId相同时，自动将对应的bean赋值给参数     *                 实现依赖注入，等同于注解@Autowired     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//依赖注入时，先按name尝试注入，name不存在按类型注入</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span> <span class="token function">userController</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserController</span> userController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userController<span class="token punctuation">.</span><span class="token function">setUserService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userController<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依赖注入时，先按name尝试注入，name不存在按类型注入</li></ul><h2 id="模拟底层解耦"><a href="#模拟底层解耦" class="headerlink" title="模拟底层解耦"></a>模拟底层解耦</h2><p><strong>模拟SPring Ioc基于注解底层解耦过程：</strong></p><ul><li>在xml中开启包扫描，Spring会去扫描指定包下面的组件</li><li>通过反射机制去过滤组件上是否有spring提供的注解(Controller,Service..)</li><li>如果有注解，Spring会通过反射机制创建实例，保存到容器中,然后Spring会根据反射机制检查该类中是否有属性需要注入（也就是属性上是否有Spring提供的注解）</li><li>如果有注解，Spring会根据反射机制进行注入</li></ul><h2 id="Spring整合junit4"><a href="#Spring整合junit4" class="headerlink" title="Spring整合junit4"></a>Spring整合junit4</h2><h3 id="spring测试使用步骤"><a href="#spring测试使用步骤" class="headerlink" title="spring测试使用步骤"></a>spring测试使用步骤</h3><ol><li><p>在porm.xml中引入spring-test、junit的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--spring测试模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--junit测试框架--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在创建的测试类中增加``@RunWith<code> </code>@ContextConfiguration`注解，完成测试类的初始化工作</p><ul><li><code>@RunWith</code> 将Junit4执行权交给SpringTest，在测试用例执行前自动初始化IoC容器</li><li><code>Contextfiguration</code> 在IoC容器加载时通知IoC容器使用哪个配置文件</li></ul></li><li><p>使用<code>@test</code>注解加在方法上来测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 两个注解搭配使用 * @RunWith 将Junit4的执行权交给Spring Test，在测试用例执行前自动初始化IoC容器 * @COntextConfiguration 在IoC容器加载时通知IoC容器使用哪个配置文件 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:applicationContext1.xml"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTestor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserServcie</span> userServcie<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        userServcie<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><ul><li><p>参照案例</p><blockquote><ol><li>D:\Data\JAVA\MianShi_Practise\Spring_AOP</li></ol></blockquote></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>AOP:Aspect Oriented Programming  面向切面编程</p></li><li><p>程序执行前，程序执行后都可以执行一些扩展功能，这种扩展功能称为切面</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210711154938.png" alt="Spring中可插拔组件技术"></p></li></ul><ul><li>连接点 JoinPoint  通过连接点可以获取目标类/方法的信息，即真正需要执行的方法称为目标方法<ul><li>在aop切面类中的切面方法中使用</li></ul></li><li>PointCut  切点，使用execution表达式描述切面的作用范围<ul><li>在spring-bean配置文件中配置AOP时使用</li></ul></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>程序运行期间，在不修改源码的情况下对程序行为进行扩展</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ul><h3 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h3><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210711172906.png" alt="springAOP 关键概念"></p><h2 id="需要依赖"><a href="#需要依赖" class="headerlink" title="需要依赖"></a>需要依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--aspectjweaver 是spring aop的底层依赖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="xml-schema"><a href="#xml-schema" class="headerlink" title="xml schema"></a>xml schema</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h3><p>在porm.xml中引入 <code>spring-context spring-aop aspect jweaver(Spring AOP底层依赖)</code>等依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--aspectjweaver 是spring aop的底层依赖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建切面类和切面方法"><a href="#2-创建切面类和切面方法" class="headerlink" title="2. 创建切面类和切面方法"></a>2. 创建切面类和切面方法</h3><ol><li><p>创建切面类，包含对原有代码的扩展方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wufan<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 方法的切面  即扩展 */</span><span class="token comment">//切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//切面方法，用于扩展额外功能</span>    <span class="token comment">//JoinPoint 连接点  通过连接点可以获取目标类/方法的信息，即真正需要执行的方法称为目标方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printExecutionTime</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// SSS代表毫秒级别</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> now <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getTarget 查找目标执行的类   getSignature 查找目标执行的方法</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取目标类的名称</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------>"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-配置切面类-Aspect-Bean"><a href="#3-配置切面类-Aspect-Bean" class="headerlink" title="3.配置切面类 Aspect Bean"></a>3.配置切面类 Aspect Bean</h3><ul><li><p>在spring-bean配置文件中通过 <code>aop:config</code>标签进行aop配置</p></li><li><p><strong>注意导入aop的schema</strong> (官网中在<code>Appendix中的The aop Schema</code>)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置切面类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>methodAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wufan.aspect.MethodAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="4-定义PointCut"><a href="#4-定义PointCut" class="headerlink" title="4.定义PointCut"></a>4.定义PointCut</h3><ul><li><p>PointCut定义与切面类配置都在同一个spring-bean配置文件中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--用于配置aop--></span>       <span class="token comment">&lt;!--Pointcut 切点，使用excution表达式描述切面的作用范围--></span>     <span class="token comment">&lt;!--execution(public * com.wufan..*.*(..)) 说明切面作用在com.wufan包下的所有类的所有方法上--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(public * com.wufan..*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--定义切面类 aop:aspect用于定义切面类--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>methodAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!--before通知，前置通知，代表目标方法运行前先执行methodAspect.printExecutionTime()方法--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>printExecutionTime<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><p><code>execution(public * com.wufan..*.*(..)) </code> 等介于</p><p>​                    <code>public void com.wufan....... </code></p><ul><li>*  为  通配符  –&gt; 用于对应一切可能出现的情况</li><li>..  为  包通配符 –&gt; 只要隶属于com.wufan，无论是一层还是多层，都可以进行查找</li><li>(..) 为 参数通配符 –&gt; 去匹配任意形式，不限个数，不限形式的方法</li></ul><h3 id="5-配置Advice-通知"><a href="#5-配置Advice-通知" class="headerlink" title="5.配置Advice 通知"></a>5.配置Advice 通知</h3><ul><li>见上部分代码，与pointCut共同写在aop:config中</li></ul><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><ul><li>通知即为在什么时间去执行切面的方法</li></ul><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p><code>Before Advice</code></p><ul><li>在目标方法执行前执行<ul><li>可用作对目标方法权限的控制</li></ul></li></ul><h3 id="返回后"><a href="#返回后" class="headerlink" title="返回后"></a>返回后</h3><p><code>After Returning Advice</code></p><ul><li>在目标方法<strong>返回数据</strong>后执行的方法</li></ul><h3 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h3><p><code>After Throwing Advice</code></p><ul><li>在目标方法抛出异常后执行<ul><li>类似于<code>try catch</code>关键字</li></ul></li></ul><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p><code>After Advice</code></p><ul><li>在目标方法<strong>运行</strong>后执行</li></ul><h3 id="最强大通知！！环绕通知"><a href="#最强大通知！！环绕通知" class="headerlink" title="最强大通知！！环绕通知"></a>最强大通知！！环绕通知</h3><p><code>Around Advice</code></p><ul><li>自定义通知的执行时机，可以决定目标方法是否运行</li></ul><h1 id="单元测试junit"><a href="#单元测试junit" class="headerlink" title="单元测试junit"></a>单元测试junit</h1><ul><li>在spring中，可以集成单元测试模块，单元测试莫夸可以去测试任何模块，而不需要写主函数</li><li>单元测试在底层封装了main函数(运行器)</li></ul><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><ul><li><p><code>@Test</code>  为模块添加单元测试注解，在方法上添加</p></li><li><p><code>@RunWith(SpringJUnit4ClassRunner.class)</code>  替换运行器  添加在类上</p><ul><li>括号内 ： <code>SpringJUnit4ClassRunner.class</code>  Spring提供的运行器，可以在程序运行时，<strong>动态获取核心容器对象</strong></li></ul></li><li><p><code>ContextConfiguration()</code>  告诉运行器配置文件时是基于什么配置</p></li></ul><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>使用单元测试junit，无需创建核心容器对象，可直接对方法进行操作</li><li>需要调用的属性使用<code>Autowired</code>注明</li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//替换运行器为Spring运行器，在程序运行时，可以动态获取核心容器对象</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:beans.xml"</span><span class="token punctuation">)</span>  <span class="token comment">//指定配置文件  必须与RunWith搭配使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//由于已经使用RunWith动态创建核心容器对象，可以直接提取核心容器对象进行使用</span>    <span class="token comment">//不需要使用new关键字进行对象创建</span>    <span class="token annotation punctuation">@Autowired</span>  <span class="token comment">//从容器中获取代理对象</span>    <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token comment">//使用junit单元测试运行加钱扣钱方法</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        accountService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><table><thead><tr><th>术语</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>Joinpoint</code></td><td>连接点</td><td>连接点指被拦截到的点，拦截实际上是增强的意思。<br /><strong>实际上是目标类中的方法，代理类可以访问的方法都可以称为连接点</strong></td></tr><tr><td><code>Pointcut</code></td><td>切入点</td><td><strong>目标类中需要被增强的方法</strong></td></tr><tr><td><code>Advice</code></td><td>通知/增强</td><td>拦截到<code>Joinpoint</code>后要做的事情就是通知。<strong>前置通知，后置通知，异常通知，最终通知，环绕通知</strong></td></tr><tr><td><code>Target</code></td><td>目标对象</td><td><strong>代理的目标对象</strong></td></tr><tr><td><code>Weaving</code></td><td>织入</td><td>指把增强应用到目标对象来创建新的代理对象的，<strong>spring采用动态代理织入</strong></td></tr><tr><td><code>Proxy</code></td><td>代理</td><td>一个类被AOP织入增强后，就产生一个结果代理类</td></tr><tr><td><strong><code>Asperct</code></strong></td><td>切面</td><td>切入点（目标类中需要被增强的方法）和通知（怎么增强）之间的关系</td></tr></tbody></table><h3 id="Joinpoint-连接点"><a href="#Joinpoint-连接点" class="headerlink" title="Joinpoint(连接点)"></a>Joinpoint(连接点)</h3><ul><li>拦截实际上是增强的意思</li></ul><p>连接点指被拦截到的点。在spirng中，这些点指的是方法，<strong>实际上是目标类中的方法，代理类可以访问的方法都可以称为连接点</strong></p><h3 id="Pointcut-切入点"><a href="#Pointcut-切入点" class="headerlink" title="Pointcut(切入点)"></a>Pointcut(切入点)</h3><ul><li>指对那些连接点在代理中进行增强，被增强的连接点称为切入点，没有被增强的依旧称为连接点</li></ul><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><ul><li>通知/增强 即怎么增强，整个增强的过程称为通知</li><li>在调用目标方法之前调用（织入）的内容为前置通知</li><li>在调用目标方法之后调用的内容为后置通知</li><li>在catch语句块中的内容称为异常通知</li><li>在finally语句块中的内容称为最终通知</li><li>整个invoke方法执行的过程称为环绕通知</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><ul><li>目标对象</li></ul><h3 id="Weaving"><a href="#Weaving" class="headerlink" title="Weaving"></a>Weaving</h3><ul><li>织入</li><li>增强应用实际上就是执行增强目标方法的代码</li></ul><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li>代理</li><li>一个类被AOP织入增强后产生一个结果代理类</li></ul><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><ul><li>切面</li><li>切入点和通知之间的关系</li><li><strong>Spring中配置AOP实际上是配置切入点和通知的关系</strong></li></ul><h2 id="基于XML的AOP配置"><a href="#基于XML的AOP配置" class="headerlink" title="基于XML的AOP配置"></a>基于XML的AOP配置</h2><blockquote><p><code>aop:config</code>  用于声明开始aop的配置</p><p><code>aop:aspect</code> 配置切面</p><p><code>aop:pointcut</code> 配置切入点表达式</p><p><code>aop:before</code> 配置前置通知</p><p><code>after-returning</code> 配置后置通知</p></blockquote><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210630175249.png" alt="spring MVC"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>MVC是<strong>架构模式</strong></li><li>Sping MVC 是Spring体现的轻量级Web MVC框架</li><li>Spring MVC核心Controller控制器，用于处理请求，产生响应</li></ul><blockquote><p>M –&gt;  Model  模型  指业务逻辑部分</p><p>V –&gt; View  视图  界面部分</p><p>C –&gt; Controller  控制器  作为一个中间者，接收视图中所传入的数据，再调用相应的业务逻辑回传数据</p></blockquote><h2 id="springMVC拦截器"><a href="#springMVC拦截器" class="headerlink" title="springMVC拦截器"></a>springMVC拦截器</h2><ul><li>用于对Controller进行前置或者后置处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java进阶总结</title>
      <link href="/2021/04/28/ying-ge/java-jin-jie/"/>
      <url>/2021/04/28/ying-ge/java-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Java进阶总结</p><span id="more"></span><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><ul><li>I: Input</li><li>O:Output</li><li>通过IO可以完成硬盘文件的读和写</li><li>往内存中去，即从硬盘中将数据存入内存，叫输入<code>Input</code>,或者叫做读<code>Read</code></li><li>从内存中出来，即将内存中的数据存储到硬盘中，叫输出<code>Output</code>或者叫做写<code>Write</code></li></ul><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li>按照__字节的方式__读取数据，一次读取1个字节byte,等同于一次读取8个二进制位，每读取的一个字符实际上是该字符所对应的ascll值，字节流可以读取任意文件。<ul><li>可以读取任何文件</li></ul></li><li>按照__字符的方式__读取数据，一次读取一个字符，一个英文字符占用1个字节，一个中文字符占用2个字节.<ul><li>字符流方便读取普通文本文件存在。</li></ul></li></ul><ul><li>任何流在使用完毕之后，都需要调用 <code>close()</code>方法进行关闭</li><li><strong>输出流</strong>每次写入数据到硬盘中时都需要使用 <code>flush()</code>方法进行刷新，否则可能导致数据存入失败</li></ul><h3 id="流的抽象类"><a href="#流的抽象类" class="headerlink" title="流的抽象类"></a>流的抽象类</h3><table><thead><tr><th align="center">流</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td align="center">java.io.InputStream</td><td>字节输入流</td><td>读取任何文件</td></tr><tr><td align="center">java.io.OutputStream</td><td>字节输出流</td><td></td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">java.io.Reader</td><td>字符输入流</td><td>读取文本文件</td></tr><tr><td align="center">java.io.Writer</td><td>字符输出流</td><td></td></tr></tbody></table><p><strong>只要后缀是Stream结尾的就是字节流，后缀是Reader,Writer结尾的就为字符流</strong></p><h3 id="文件专属流"><a href="#文件专属流" class="headerlink" title="文件专属流"></a>文件专属流</h3><table><thead><tr><th align="center">流名称</th></tr></thead><tbody><tr><td align="center">java.io.FileInputStream （掌握）</td></tr><tr><td align="center">java.io.FileOutputStream</td></tr><tr><td align="center">java.io.FileReader （掌握）</td></tr><tr><td align="center">java.io.FileWriter</td></tr></tbody></table><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><table><thead><tr><th align="center">流接口</th></tr></thead><tbody><tr><td align="center">java.io.BufferedReader</td></tr><tr><td align="center">java.io.BufferWriter</td></tr><tr><td align="center">java.io.BufferInputStream</td></tr><tr><td align="center">java.io.BufferOutputStream</td></tr></tbody></table><ul><li>缓冲流会将字节先写到一个缓冲区中，通过<code>flush()</code> 或者关闭这个缓冲流来实现将缓冲流中的数据回显</li></ul><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><table><thead><tr><th align="center">流接口</th></tr></thead><tbody><tr><td align="center">java.io.DataInputStream</td></tr><tr><td align="center">java.io.DataOutputStream</td></tr><tr><td align="center"></td></tr></tbody></table><ul><li>Data写入的数据必须使用Data读取，否则为乱码</li><li></li></ul><h3 id="对象专属-重要"><a href="#对象专属-重要" class="headerlink" title="对象专属(重要)"></a>对象专属(重要)</h3><ul><li><p><code>java.io.ObjectInputStream</code></p></li><li><p><code>java.io.ObjectOutputStream</code></p></li><li><p>涉及虚拟化，反虚拟化</p></li></ul><h2 id="字节流对象使用"><a href="#字节流对象使用" class="headerlink" title="字节流对象使用"></a>字节流对象使用</h2><h3 id="创建流对象"><a href="#创建流对象" class="headerlink" title="创建流对象"></a>创建流对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li><code>fileInputStream.read()</code>方法一次只能获取一个字节，如果需要获取所有字节，需要使用遍历，获取的值为<strong>ASCII码</strong>，当read读取完数据时，返回-1</li></ul><h4 id="方法1：遍历"><a href="#方法1：遍历" class="headerlink" title="方法1：遍历"></a>方法1：遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//读取数据</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用read方法获取数据</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当字节读取完成后会输出-1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法2：字节数组"><a href="#方法2：字节数组" class="headerlink" title="方法2：字节数组"></a>方法2：字节数组</h4><ul><li><p>读取规则：</p><ol><li><p>创建字节数组</p><p> <code>byte[] a = new byte[i]</code>  i为需要读取的字节数</p></li><li><p>使用流对象读取数据，存入字节数组</p><p>  <code>int num = fileInputStream.read(a)</code></p></li><li><p>对字符串进行转码 </p><p><code>String s = new String(a1);</code></p><p>或者</p><p><code>String s = new String(a1,0,i)</code> i 为读取的数据值，一般设为流对象读取到的数据个数</p></li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个字节数组 read()方法中可以传入一个字节数组,一次读取规定的字节数</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用流对象读取字节数组，如果接收值，返回的是Int型</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new String(a) 将字节码转换成字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一次输出 abc</span><span class="token comment">//第二次输出 dbc</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一次读取3个字节</span><span class="token comment">//读到几个字节，转换几个字节 ,从0开始，转化read个字节</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新读取数据，此时获取的数据个数为1</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>*注意：！！！<ul><li>字节数组会自动往前读，第一次读取的是abc,第二次读取时会自动重复 dbc</li><li><code>new String(bytes)</code> 会将字节数组转换成字符串，即数据本身</li></ul></li></ul><h4 id="读取数据最终版"><a href="#读取数据最终版" class="headerlink" title="读取数据最终版"></a>读取数据最终版</h4><ul><li><p>由于java中一次读取多个字节会报错，因此分为两种方法</p><ul><li>第一种 <strong>适合少量字节</strong><ul><li>直接通过available方法获取到文件中未读取的字节数量</li><li>然后赋值给字节数组</li><li>通过read方法读取数据,存入字节数组</li><li>使用new String方法转化字节为字符</li></ul></li><li>第二种  <strong>适合大量字节</strong><ul><li>创建字节数组对象</li><li>获取读取到的字节数组个数</li><li>使用while遍历数组，限定条件为读取到的字节不为-1</li><li>while中每一次遍历都将数组中的字节转化为字符输出，输出方法为<code>prin</code></li></ul></li></ul></li><li><p><code>new String(bytes, )</code></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//--------------读取数据，适合少量数据，read一次读取多字节会报错</span><span class="token comment">//创建流对象</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Game\\cccc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取到文件中未读取到的字节数量</span><span class="token keyword">int</span> available <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到未读取的字节数量为："</span><span class="token operator">+</span>available<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>available<span class="token punctuation">]</span><span class="token punctuation">;</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---------------读取数据，适合大量字节（常用）</span><span class="token comment">//创建流对象</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Game\\cccc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建数组对象</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//防止多读1次</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//获取读取的数据个数 并判断返回值是否为-1,Reada方法读取到最后一个字节后会返回-1</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h3><h4 id="创建输出流对象"><a href="#创建输出流对象" class="headerlink" title="创建输出流对象"></a>创建输出流对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//参数指定是 要把内存中的数据 具体写到哪个文件中，如果没有指定，默认在idea文件夹中创建文件</span><span class="token comment">//构造方法中追加true,可以让数据追加写入，不会覆盖</span> fileOutputStream <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Game\\cccc.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建文字</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token comment">//转换字符为字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新数据</span>fileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出数据需要注意"><a href="#输出数据需要注意" class="headerlink" title="输出数据需要注意"></a>输出数据需要注意</h4><ul><li>使用输出对象后，必须要调用刷新方法，否则会导致数据丢失。</li></ul><h2 id="字符流对象使用"><a href="#字符流对象使用" class="headerlink" title="字符流对象使用"></a>字符流对象使用</h2><h2 id="缓冲流对象使用"><a href="#缓冲流对象使用" class="headerlink" title="缓冲流对象使用"></a>缓冲流对象使用</h2><ul><li><p>缓冲流对象：</p><ul><li>自带缓冲区的流，在一次性读取多个字符或字节的时候，不需要创建数组。</li></ul></li><li><p>在缓冲流对象中传入的应该是其他的流对象（例如字节流，字符流）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//创建文件字符输入流</span><span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\\Game\\cccc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建缓冲流对象</span><span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fileReader相对来说称为节点流</span><span class="token comment">//bufferReader在外层，被称为包装流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据流对象使用"><a href="#数据流对象使用" class="headerlink" title="数据流对象使用"></a>数据流对象使用</h2><ul><li><p>数据流写出来的文件，是通过加密的，只能通过对应的数据流读取出来</p></li><li><p>数据流读取或者写入要按照写入的顺序，否则乱码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//写入数据</span>dataOutputStream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataOutputStream<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读出数据 要按照写入的顺序依次读取</span><span class="token keyword">int</span> i <span class="token operator">=</span> dataInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> dataInputStream<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正常输出</span><span class="token number">3</span>好  <span class="token comment">//更换顺序读取 ,造成乱码</span><span class="token number">219517</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="标准输出流对象使用"><a href="#标准输出流对象使用" class="headerlink" title="标准输出流对象使用"></a>标准输出流对象使用</h2><ul><li><p>一般用于控制台打印，日志的收集</p></li><li><p>默认路径是控制台，可以使用 <code>System.setOut()</code>方法改变输出路径 ,要<strong>先更改输出路径再获取</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建标准输出流对象</span><span class="token class-name">PrintStream</span> printStream2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data02.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更改输出路径</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>printStream2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out返回值为标准输出流</span><span class="token class-name">PrintStream</span> printStream1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span> <span class="token comment">//</span> <span class="token comment">// 等同于 System.out.println()</span><span class="token comment">//打印hello word//</span>printStream1<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="日志打印案例"><a href="#日志打印案例" class="headerlink" title="日志打印案例"></a>日志打印案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建标准输出流对象，传入的是文件输出流对象</span><span class="token class-name">PrintStream</span> printStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"logger.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置输出路径</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>printStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建日期格式化对象，用于规定日期的格式</span><span class="token class-name">SimpleDateFormat</span> simpleDateFormat  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化日期，返回值为日期字符串</span><span class="token class-name">String</span> dataTime <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新流对象 只需要刷新最外层包装流</span>printStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象专属流"><a href="#对象专属流" class="headerlink" title="对象专属流"></a>对象专属流</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><ul><li>在java中主要操作Java对象,在硬盘和内存中，模块与模块中，都需要用到序列化和反序列化的技术。<ul><li>序列化 ： 将java对象输出到硬盘上 ，生成看不懂的文件</li><li>反序列化： 将硬盘上的看不懂的文件输入到内存中，转成Java对象</li></ul></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210508111329.png" alt="java对象序列化"></p><h3 id="序列化java对象-类"><a href="#序列化java对象-类" class="headerlink" title="序列化java对象(类)"></a>序列化java对象(类)</h3><ul><li><p>java对象要想实现序列化，则必须要实现序列化接口<code>Serializable</code>,这个接口只能被jvm虚拟机识别</p><ul><li><code>Serialzable</code>是一个序列化接口，jvm在检测到该类有这个接口时，才会赋予该类序列化的权限</li></ul></li><li><p>在程序执行的时候，当前类会被生成字节码文件</p><p>同时jvm会检测该类是否实现了序列化接口Serialzable</p><p>如果实现了则给该类分配一个序列化版本号，也是一个标识的作用。</p><p>(例如两个User类都序列化，则通过其序列版本号进行分辨)</p><p><strong>如果在执行序列化Java对象后，对java对象进行了更改，则其版本号也会更改</strong></p><p><strong>指定唯一的序列化版本号，避免User类修改后序列化版本号异常</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单实例</span><span class="token comment">//序列化接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//自己指定唯一的序列化版本号，避免User类修改后序列化版本号异常</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">4546878613565265748L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> aaa<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age='"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化单个对象"><a href="#序列化单个对象" class="headerlink" title="序列化单个对象"></a>序列化单个对象</h3><ul><li>由于序列化是将数据输出到硬盘中，为输出流</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建对象输出流对象 对象是文件输出流对象</span><span class="token class-name">ObjectOutputStream</span> objcetOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"dataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建java对象</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将对象写入到文件中,生成的是一堆乱码</span>objcetOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>objcetOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化单个对象"><a href="#反序列化单个对象" class="headerlink" title="反序列化单个对象"></a>反序列化单个对象</h3><ul><li><strong><strong>反序列化是从硬盘中读取文件到内存，为输入流</strong></strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反序列化是从硬盘中读取文件到内存，为输入流</span><span class="token comment">//创建反序列化对象,读取文件名要和序列化保持一致</span><span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"dataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取数据，返回的是Object对象</span><span class="token class-name">Object</span> object <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于不知道返回的到底是什么数据类型，需要判断是否为User对象，是的话对数据进行强转，读取到真正的数据</span><span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>objcet<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化多个对象"><a href="#序列化多个对象" class="headerlink" title="序列化多个对象"></a>序列化多个对象</h3><ul><li><p>由于ArrayList集合底层也实现了序列化接口<code>Serializable</code>并指定了唯一的版本号,因此在序列化多个对象时，可以直接使用ArrayList集合进行存储</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//序列化是将数据输出到硬盘中，为输出流</span><span class="token comment">//创建输出流对象</span><span class="token class-name">ObjectOutputStream</span> objcetOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"dataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建多个Java对象</span><span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三1"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三2"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三3"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三4"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建集合，存放数据</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将集合输出到文件中</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>objcetOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化多个对象"><a href="#反序列化多个对象" class="headerlink" title="反序列化多个对象"></a>反序列化多个对象</h3><ul><li><strong><strong>反序列化是从硬盘中读取文件到内存，为输入流</strong></strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"dataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读取数据,由于数据为集合，所以将数据转换为集合</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历集合对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭流</span>objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多线程（重要）"><a href="#多线程（重要）" class="headerlink" title="多线程（重要）"></a>多线程（重要）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>进程</p><ul><li>操作系统中一个程序以及其数据在处理机上顺序执行时发生的活动</li><li>例如电脑上一个应用</li></ul></li><li><p>线程</p><ul><li>也被称为<strong>轻量进程</strong>，是进程中某一个单一顺序的控制流</li><li>一个进程有多个线程，运行不同的功能</li></ul></li><li><p>多进程</p><ul><li>在操作系统中同时运行多个任务（程序）</li></ul></li><li><p>多线程</p><ul><li>在<strong>同一个应用程序</strong>中有多个顺序流同时执行</li></ul></li></ul><ul><li>线程生命周期<ul><li>一个线程从创建到执行完的整个过程</li></ul></li></ul><h2 id="多线程在jvm的分布"><a href="#多线程在jvm的分布" class="headerlink" title="多线程在jvm的分布"></a>多线程在jvm的分布</h2><p>jvm :</p><ul><li><p>栈</p><ul><li><p>局部变量的声明</p><p><code>CreadThread t1</code></p></li></ul></li><li><p>堆</p><ul><li><code>new CreadThread()</code></li></ul></li><li><p>方法区 </p><ul><li><p>字符常量池、字节码文件</p><p><code>CreadThread.class</code></p><p><code>ThreadTest05.class</code></p></li></ul></li></ul><ul><li><p>在java多线程中，一个线程对应一个栈</p></li><li><p>栈中的资源是不同享的</p></li><li><p>堆和方法区中的资源是线程共享的</p></li><li><p>成员变量属于堆内存，可以作为共享对象，局部变量在栈中开辟空间，不能作为共享对象</p></li><li><p>jvm 是运行在计算机上的一个进程，一个线程对应一栈，当新建一个线程时，在内存中开辟一个新的栈空间，多栈之间不会共享资源，</p></li></ul><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><h3 id="方法一：实现Runnable接口-常用"><a href="#方法一：实现Runnable接口-常用" class="headerlink" title="方法一：实现Runnable接口(常用)"></a>方法一：实现Runnable接口(常用)</h3><ul><li><p>实现Runnable接口后，必须要重写run方法</p></li><li><p>实现Runnable接口的类仍然只是一个可实现的类，并不是一个线程类，需要在对象调用处将其包装成线程类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实现Runnable接口，作为线程的实现类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//表示线程的名称</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//通过构造方法配置name属性，免去使用setName</span>  <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//重写run方法，作为线程的操作主体</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"运行,i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">//main方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDemo01</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//实例化对象 ，传入名称</span>    <span class="token class-name">MyThread</span> mt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"线程A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span> mt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"线程B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实例化Thread对象</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启线程</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="方法二：继承Thread类"><a href="#方法二：继承Thread类" class="headerlink" title="方法二：继承Thread类"></a>方法二：继承Thread类</h3><ul><li>由于开启线程时会默认调用线程类中的run方法，所以在创建完一个线程对象后，要重写run方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 创建线程类的方法一：继承<span class="token class-name">Thread</span>类 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span>  <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">//显示线程的名称</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//通过构造方法配置name属性</span>  <span class="token keyword">public</span> <span class="token class-name">MyThreadTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//创建完线程类，需要重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">MyThread</span> mt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"线程A "</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 实例化对象 </span>   <span class="token class-name">MyThread</span> mt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"线程B "</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 实例化对象 </span>   mt1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 调用线程主体 </span>   mt2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 调用线程主体</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：FutureTask"><a href="#方法三：FutureTask" class="headerlink" title="方法三：FutureTask"></a>方法三：FutureTask</h3><ul><li>未来任务类对象</li></ul><ul><li>这种方式其创建线程对象可以获得线程的返回值</li></ul><ul><li>返回值必须要等到线程结束之后才能返回</li><li>缺点：线程结束之后才能获取返回值，获取返回值时会造成主线程的阻塞。</li></ul><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><ul><li>新建状态</li><li>就绪状态</li><li>运行状态</li><li>阻塞状态</li><li>死亡状态</li></ul><h3 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态"></a>新建状态</h3><ul><li><p>创建一个线程类对象即为新建状态</p></li><li><p>创建了一个线程类对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此对象由自己创建</span><span class="token class-name">ThreadTest</span> threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><ul><li><p>调用start方法后，就会在内存中开辟一个栈空间，进入就绪状态，<strong>认为它有了抢占cpu时间片的权利</strong>，可视为一个线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开启线程</span>threadTest<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h3><ul><li><p>如果当前线程争夺到cpu使用权，则该线程会进入run方法，进入run方法的线程处于运行状态</p></li><li><p>执行run方法，才是 <strong>运行状态</strong></p></li><li><p>开启线程之后，默认调用线程类中的run方法，所以在创建完一个线程对象之后，一定要重写run方法。</p></li><li><p>java支持多线程，jvm虚拟机，有一个多线程调度功能，多个线程同时去争夺cpu时间片，抢到的线程 执行run方法，等到时间执行结束，重新回到就绪状态，再去争抢cpu时间片。</p></li></ul><h3 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h3><ul><li>处于运行状态的线程调用sleep方法，进入了睡眠或控制台打印等需要发生等待的操作，那该线程处于阻塞状态,处于阻塞状态的线程，会释放cpu使用权，重新进入就绪状态</li></ul><h3 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h3><ul><li>当所有线程执行完毕了，即进入死亡状态</li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><ul><li>线程优先级数字越高，优先级越高</li><li>在没有设置的情况下，所有线程的优先级是相同的，即<strong>抢占CPU时间的概率相同</strong>000</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取线程类对象</span><span class="token class-name">Thread</span> thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadTest01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置线程优先级</span>thread01<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span>型<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取线程当前优先级</span><span class="token keyword">int</span> priority <span class="token operator">=</span> thread01<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程调度模型"><a href="#线程调度模型" class="headerlink" title="线程调度模型"></a>线程调度模型</h2><h3 id="抢占式调度模型"><a href="#抢占式调度模型" class="headerlink" title="抢占式调度模型"></a>抢占式调度模型</h3><ul><li>哪个线程优先级比较高，抢到的CPU时间片的概率就多一些，<strong><strong>java采用的是抢占式调度模型</strong></strong></li></ul><h3 id="均分式调度模型"><a href="#均分式调度模型" class="headerlink" title="均分式调度模型"></a>均分式调度模型</h3><ul><li>平均分配CPU时间片。每个线程占有的CPU时间片长度一样。</li></ul><h2 id="yield-与-sleep方法"><a href="#yield-与-sleep方法" class="headerlink" title="yield() 与 sleep方法"></a>yield() 与 sleep方法</h2><h3 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h3><p>暂停当前正在执行的线程对象，并执行其他线程</p><p>yield()方法的执行会让当前线程从“运行状态”回到“就绪状态”。</p><h3 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h3><ul><li>作用：让当前线程进入到休眠状态，即为线程的阻塞状态</li><li>参数是 <code>ms</code></li><li>通常用sleep方法模拟网络延迟</li></ul><p>sleep方法在指定的毫秒数中让指定的线程休眠，休眠后重新进入就绪状态。</p><ul><li>无论是否使用t1.sleep方法，在运行的时候最终都会变成Thread.sleep方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//sleep方法休眠之后重新进入就绪状态</span>    <span class="token comment">//让当前线程休眠2s,进入阻塞状态，2s后再进行下一个数据输出，可以用来模拟网络延迟</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程安全-（最重要）"><a href="#线程安全-（最重要）" class="headerlink" title="线程安全 （最重要）"></a>线程安全 （最重要）</h2><h3 id="线程存在不安全条件"><a href="#线程存在不安全条件" class="headerlink" title="线程存在不安全条件"></a>线程存在不安全条件</h3><ul><li>多线程并发</li><li>有共享数据</li><li>共享数据有修改的行为</li></ul><p>满足以上条件，必须要注意线程安全</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><ul><li>线程与线程之间发生了等待关系，即有联系</li><li>堆内存</li></ul><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><ul><li>线程一般处于异步状态，即互不干扰，即线程并发状态</li></ul><ul><li>线程与线程必须同步（两个线程之间有联系）</li><li>如果没有设置线程安全，线程一般情况下处于异步状态（互不干扰）</li></ul><h3 id="线程同步关键字"><a href="#线程同步关键字" class="headerlink" title="线程同步关键字"></a>线程同步关键字</h3><ul><li><code>synchronized()</code>  线程同步关键字/线程同步锁</li><li>修饰普通方法  对象锁</li><li>修饰静态方法  类锁</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>假设当前程序有t1,t2线程，this一般称为对象锁。</p><p>如果t1线程先来到同步代码块，发现this对象锁没有被占有，这时t1线程会占有这把锁，然后执行代码块中的内容。</p><p>在t1线程没有结束之前，t2线程过来，发现this对象锁已经被占有，这时t2线程必须在锁时等待，等待t1释放对象锁，t2才能重新持有</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><ul><li><p>可以使线程同步</p></li><li><p>括号内为线程共享对象</p></li><li><p>this指向当前实例，必须为同一个共享对象，对于别的线程来说，是不共享的</p></li><li><ul><li>局部变量不可以共享对象</li><li>成员变量可以作为共享对喜爱那个，因为其在堆内存中创建</li><li>引用数据类型”abc”可以作为共享对象，因为其存放在方法区的常量池中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h5><ul><li>如果用synchronized修饰方法时，对象方法一定是this，锁住的方法时整个代码块</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点是会把整个方法体中的内容全部锁住，会降低程序的执行效率</strong></p><h2 id="多线程其他方法"><a href="#多线程其他方法" class="headerlink" title="多线程其他方法"></a>多线程其他方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ul><li>当前线程进入阻塞状态，</li></ul><h3 id="suspend"><a href="#suspend" class="headerlink" title="suspend()"></a>suspend()</h3><ul><li>线程把自己挂起</li></ul><h3 id="resume"><a href="#resume" class="headerlink" title="resume()"></a>resume()</h3><ul><li>线程把自己唤醒</li></ul><h3 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h3><ul><li>中断线程执行</li></ul><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h3><ul><li>强制将线程从睡眠唤醒</li><li>通过异常机制唤醒</li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>Java语言中线程分为两大类：<ul><li>用户线程</li><li>守护线程</li></ul></li></ul><h3 id="设置守护线程"><a href="#设置守护线程" class="headerlink" title="设置守护线程"></a>设置守护线程</h3><ul><li>```<br>//将该线程对象设置为守护线程<br>thread.setDaemon(true);<pre class="line-numbers language-none"><code class="language-none">## 生产者模式和消费者模式- 生产者与消费者模型![img](https:&#x2F;&#x2F;wgmpwy.oss-cn-beijing.aliyuncs.com&#x2F;typoraNew&#x2F;20210507142110.jpeg)### 执行模式1. 生产者先判断仓库是否有产品，有产品则让生产者等待，让消费者消费2. 生产者判断无产品，则生产一个产品，并唤醒消费者进行消费3. 消费者判断仓库中是否有商品，有则进行消费操作，无则进行等待，让生产者执行生产操作### 使用方法- wait()，notify方法只有在多线程同步的情况下，即有共享对象之间才能使用，线程与线程之间有等待关系，需要加锁 synchronized()#### wait()方法- 所有引用数据类型都有的方法，如果需要使用，则必须要有共享对象- 让该对象上活动的线程进入等待状态，并且无限期等待，直到被唤醒为止  ，如  - 例如 t1,t2,t3线程有一共享对象account，当account.wait()方法时，可以使t1,t2,t3线程进入等待池中，直到被唤醒为止。唤醒方法为&#96;notify()&#x2F;notifyAll()方法&#96;，**两者成对出现**- &#96;&#96;&#96;  加入同步锁，在同一时刻，只会有一个线程进行操作，使用wait方法时就只会让一个线程进行等待<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="notify-方法"><a href="#notify-方法" class="headerlink" title="notify()方法"></a>notify()方法</h4><ul><li>notify()是在等待池中随机唤醒一个线程，</li></ul><h4 id="notify-方法-1"><a href="#notify-方法-1" class="headerlink" title="notify()方法"></a>notify()方法</h4><ul><li>唤醒等待池中所有线程</li></ul><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><ul><li><p>反射机制是各大框架底层都有，如果想读懂框架底层，必须学号反射</p></li><li><p>通过java语言中的反射机制可以操作字节码文件</p></li><li><p>通过反射机制可以操作代码片段</p></li><li><p>反射机制也可以创建对象，操作字节码文件创建，<strong>不会在堆内存中开辟空间</strong>，而直接new对象会在堆内存中开辟空间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取字节码对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userClass <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//通过反射机制创建类的实例</span>        <span class="token comment">//只要使用new 关键字，就一定会在堆内存中开辟空间，</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>反射可以在类加载时获取类的信息，包括属性，构造，普通方法，静态方法，以及相关的子类，父类以及接口。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>反射是通过操作字节码的方式来操作类，或者获取类的信息</p><p>通过反射创建对象，不用在内存中开辟空间，这样会节约系统资源</p><p>以后学习的各大框架的底层，都会用到反射机制</p><h2 id="反射机制中的类"><a href="#反射机制中的类" class="headerlink" title="反射机制中的类"></a>反射机制中的类</h2><ol><li><code>java.lang.Class</code> ：代表</li></ol><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210508093621.png" alt="反射机制中的类"></p><h2 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h2><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><ul><li><p>第一种：<code>Class c = Class.forName(&quot;完整类名&quot;)</code></p><ul><li>直接根据一个字符串定义的类名称获取Class类的实例化对象，由于字符串的支持较多并且拼接方便，这种获取Class类实例的方式最灵活</li><li><strong>注：</strong> 当使用此方法获取Class类对象实例化时必须传入完整类名，否则报<code>ClassNotFountException</code>异常。</li></ul></li><li><p>第二种  <code>Class c = 对象.getClass</code></p><ul><li>利用Object类中提供的<code>getClass()方法</code>获取实例化对象</li></ul></li><li><p>第三种  使用 <code>类.class</code> 形式获取指定类或接口的Class实例化对象</p><ul><li>如图：</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210508092040.png" alt="image-20210508092035566"></p><ul><li>当线程对象的Class类对象实例与Sell1字节码对象相同时，执行方法</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//法1 获取User类的字节码对象 Class.forName("全类名")  只有获取字节码对象，才能操作这个类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wufan.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//法2 对象.getClass() 在java中，所有引用数据类型都有getClass()这个方法，用于获取字节码对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> aClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//法3.类.class</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> aClass2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取类的属性，值，名称"><a href="#获取类的属性，值，名称" class="headerlink" title="获取类的属性，值，名称"></a>获取类的属性，值，名称</h3><ul><li><p>获取类对象后，再使用<strong>对象.方法</strong>的形式 获取类的属性</p></li><li><p><code>getField(“需要获取的属性)</code>  :  获取被public 修饰的属性</p></li><li><p><code>getFields()</code>  : 获取所有被Public修饰的属性</p></li><li><p><code>getDeclaredField(&quot;需要获取的属性&quot;)</code> :获取所有属性</p></li><li><p><code>getDeclaredFields()</code> ：获取所有属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取字节码对象</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> userClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wufan.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取属性字节码对象</span>            <span class="token comment">//getField()方法只能获取被public修饰的某个属性</span>            <span class="token comment">//getFields()方法获取被public修饰的所有属性</span>            <span class="token comment">//getDeclaredField 获取任何属性</span>            <span class="token class-name">Field</span> id <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取一个类中所有属性</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> name <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历属性数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ul><li><p>获取属性前，首先需要获取属性的方法获取对象属性，再进行操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> declaredField <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>属性.getModifiers()</code> <strong>获取属性的修饰符代号</strong>  （配合toString方法获取属性修饰符）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取属性修饰符代号</span><span class="token keyword">int</span> modifiers <span class="token operator">=</span> decalaredField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将修饰符转换成字符串</span><span class="token class-name">String</span> toString <span class="token operator">=</span> modifiers<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>属性.getType()</code> <strong>获取属性的数据类型</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>属性.getName()</code> <strong>获取属性的名称</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="获取类的方法"><a href="#获取类的方法" class="headerlink" title="获取类的方法"></a>获取类的方法</h3><ul><li><p>要想获取类的方法，必须要先获取类对象</p></li><li><p><code>对象.getMethod()</code>   获取被pubilc修饰的方法</p></li><li><p><code>对象.getDeclaredMethod()</code> 获取所有方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取字节码对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userClass <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//获取方法的字节码对象  name: 方法名  String...args:可变长参数，传入 参数数据类型的对象</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>方法字节码对象.getModifiers()</code> : 获取方法的修饰符代号</p><ul><li>使用 <code>Modifier.toString(修饰符代号)</code>转换代号为字符串</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取方法的修饰符</span>       <span class="token keyword">int</span> modifiers <span class="token operator">=</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> toString <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>方法字节码对象.getParameterTypes()</code> :获取方法的所有参数类型 （需遍历）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取方法的参数数据类型</span>       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parameterType <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">//获取方法的参数数据类型名称</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><ul><li><p>要想获取构造方法，必须先获取类对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"全类名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>对象.getDeclaredConstructors</code> : 创建构造类对象</p></li><li><p><code>对象.getDeclaredConstructor(&quot;参数数据类型&quot;)</code> :获取指定的构造类对象，通过参数数据类型判断是哪个构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  ```  # 注解## 什么是注解：<span class="token operator">-</span> 注解只起到标识的作用<span class="token operator">-</span> 是元数据（<span class="token class-name">Annotation</span>），是一种对代码进行说明的数据，JDK1<span class="token punctuation">.</span><span class="token number">5</span>引入的新规范，是与类、接口、枚举等<span class="token operator">-</span> 注解中可以拥有属性，但是不可以拥有方法<span class="token operator">-</span> 在注解中声明属性后，用该注解修饰元素的时候一定要给属性赋值，除非有默认值  `给属性赋值 <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">)</span>`## 注解运用范围<span class="token operator">-</span> 语法格式  `<span class="token annotation punctuation">@interface</span> 注解名称`<span class="token operator">-</span> 注解可以出现在类上，属性上，方法上，变量上## JDK常用注解<span class="token operator">-</span> `override`  表示一个方法声明打算重写超类中的另一个方法<span class="token operator">-</span> `<span class="token class-name">Deprecated</span>`  ：标注的内容不再被建议使用<span class="token operator">-</span> `<span class="token annotation punctuation">@Documented</span>` <span class="token operator">:</span> 所标注的内容，可以出现在javadoc中## 元注解# 设计模式<span class="token operator">-</span> `design pattern`   是对软件设计中普遍存在的问题，所提出的解决方法<span class="token operator">-</span> 设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。<span class="token operator">-</span> 要求程序具有可读性，规范性，维护性## 用处<span class="token operator">-</span> 设计模式主要是为了解决类与类之间的关系## 目的<span class="token operator">-</span> 为了让代码具有更好的重用性，可读性，可扩展性，可靠性，使程序呈现高内聚，低耦合  <span class="token operator">-</span> 重用性： 很多代码是可以重复使用的，例如工具类  <span class="token operator">-</span> 可读性： 为了与别人进行协作，写的代码别人看得懂  <span class="token operator">-</span> 可扩展性： 对修改关闭，对扩容开放 <span class="token punctuation">,</span>修改之后，不会对其他功能造成影响  <span class="token operator">-</span> 高内聚<span class="token operator">:</span>    <span class="token operator">-</span> 低耦合：## 设计模式七大原则<span class="token operator">></span> <span class="token number">1.</span> 单一职责原则<span class="token operator">></span> <span class="token number">2.</span> 接口隔离原则<span class="token operator">></span> <span class="token number">3.</span> 依赖倒转（倒置）原则<span class="token operator">></span> <span class="token number">4.</span> 里氏替换原则<span class="token operator">></span> <span class="token number">5.</span> <span class="token operator">*</span><span class="token operator">*</span>开闭原则<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.</span> <span class="token operator">*</span><span class="token operator">*</span>迪米特法则<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">></span> <span class="token number">7.</span> 合成复用原则### <span class="token number">1.</span>单一职责原则单个接口或类不应该有多个职责，应尽可能的划分职责，通过组合的方式，完成更复杂的业务<span class="token operator">-</span> 降低类的复杂度<span class="token operator">-</span> 让一个类只做一类事，一个方法做一件事### <span class="token number">3.</span>接口隔离原则<span class="token operator">-</span> 一个接口不要包含过多的职责，应合理划分，跟单一职责原则相辅相成<span class="token operator">-</span> 每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。  <span class="token operator">-</span> 使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。<span class="token operator">-</span> 客户端不应该依赖它不需要的接口，即<span class="token operator">*</span><span class="token operator">*</span>一个类对另一个类的依赖应该建立在最小的接口上<span class="token operator">*</span><span class="token operator">*</span>。  <span class="token operator">-</span> 一个完整的接口内包含许多方法，将类需要使用的方法以及变量提取到一个最新的接口，即为最小接口    ```java  <span class="token comment">//需求：</span>   <span class="token comment">//*  假设A需要用到接口1中getMethod01(),getMethod02()和接口2中的getMethod04()</span>   <span class="token operator">*</span>    <span class="token comment">//将接口1，接口2中需要的方法聚合到接口3中</span>  <span class="token keyword">interface</span> interface3<span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">getMethod01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">getMethod02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">getMethod04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> interface3<span class="token punctuation">&#123;</span>          <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMethod01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMethod02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMethod04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">场景：<span class="token operator">-</span> 动物，鸟，人   人和鸟都会吃，人会走路，鸟会飞，<span class="token operator">-</span> 应该把走路和飞这两个行为抽象成接口，通过组合的方式让人拥有走路的行为，让鸟拥有分行的行为。<span class="token operator">-</span> 再仔细划分，人有多个走路姿势，鸟有多个飞行方式，可以分别继承走路和飞的抽象行为扩展其具体的行为。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><ul><li>高层模块不应该依赖于底层模块，二者都应该依赖其抽象</li><li>面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</li><li>多态思维</li><li>依赖倒转原则的中心思想是<strong>面向接口</strong></li></ul><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul><li>都可以替换为其子类。从而可以实现子类间的动态切换。换句话说就是要有面向接口的编程思维。结合“开闭原则”</li><li>当A类想要使用B类的方法时，少使用继承的方式，多使用聚合或者组合。<ul><li>因为使用继承，父类所有方法对于子类来说都是透明的，当子类和父类拥有相同方法时会构成重写，这样会造成数据的错乱</li></ul></li><li>子类对父类的方法尽量不要重写和重载</li></ul><h4 id="聚合与组合区别"><a href="#聚合与组合区别" class="headerlink" title="聚合与组合区别"></a>聚合与组合区别</h4><ul><li><p>组合是整体与部分的关系, 并且部分不可以离开整体而单独存在。  组合在随着类的创建而创建（构造方法里）</p></li><li><p>聚合是整体与部分的关系, 并且部分可以离开整体而单独存在。聚合等外界传入方法</p></li><li></li><li><p><strong>组合是在创建一个类时，创建一个对象</strong></p></li><li><p><strong>聚合是不会立即创建对象，而是等着外界传入一个对象给它,使用set方法或者使用构造的形式传入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hand</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>组合<span class="token number">1</span>：<span class="token class-name">A</span>类的构造方法里创建<span class="token class-name">B</span>类的对象，随着<span class="token class-name">A</span>类创建。随着<span class="token class-name">A</span>类消亡<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Hand</span> hand<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>组合<span class="token number">2</span>：  <span class="token keyword">private</span> interface2 interface2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>聚合：使用set方法传入具体对象<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Computer</span> computer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">setComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a><strong>开闭原则</strong></h3><ul><li>用抽象构建架构，用实现扩展细节</li><li>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。</li></ul><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a><strong>迪米特法则</strong></h3><p>最少知道原则，一个对象尽量让其它对象保持最少的了解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">典型场景：我点外卖，我只关心外卖员，不关系具体的店。我的类中只依赖外卖员，不会依赖具体的店。是不是静态代理。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>只与直接的朋友通信。</p><p>类之间只要有耦合关系，就叫朋友关系。</p><p>耦合分为依赖、关联、聚合、组合等。</p><p>我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。</p><p>局部变量、临时变量则不是直接的朋友。</p><p>我们要求陌生的类不要作为局部变量出现在类中。</p></blockquote><h3 id="合成复用模式"><a href="#合成复用模式" class="headerlink" title="合成复用模式"></a>合成复用模式</h3><p>多用组合，少用继承</p><h2 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h2><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210510104341.png" alt="设计模式类型"></p><h3 id="单例模式-！！（面试重点）"><a href="#单例模式-！！（面试重点）" class="headerlink" title="单例模式 ！！（面试重点）"></a>单例模式 ！！（面试重点）</h3><ul><li>类的单例模式，就是采取一定的方法保证在整个软件的设计系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）</li></ul><h4 id="单例模式作用-！！！"><a href="#单例模式作用-！！！" class="headerlink" title="单例模式作用 ！！！"></a>单例模式作用 ！！！</h4><ul><li><p>以后在做企业级项目的时候，针对于某一类，可能很多地方都需要获取他的实例，这样的话就需要使用new关键字，每次使用new关键字都会在堆内存中开辟空间。</p><p>这样的话，需要用到几次实例，就要开辟几次空间，会造成系统资源的损耗，从而降低了程序的执行效率！</p><p><strong>我们可以把该类设计出单例模式，在整个项目中获取的是该类唯一的内存地址</strong>，解决了资源，提升了效率！</p></li></ul><h4 id="单例模式两种方式"><a href="#单例模式两种方式" class="headerlink" title="单例模式两种方式"></a>单例模式两种方式</h4><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><ul><li>直接实例化对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法1，直接new对象 </span><span class="token comment">//1.构造方法私有化，不希望在外界可以实例化对象</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.1 方法1.在本类中实例化该类的实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingletonTest01</span> singletonTest01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.提供静态方法，获取当前类的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonTest01</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> singletonTest01<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//方法2.将对象存放到静态代码块中</span><span class="token comment">//1.构造方法私有化，不希望在外界可以实例化对象</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.在本类中实例化该类的实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingletonTest02</span> singletonTest02<span class="token punctuation">;</span>    <span class="token comment">//将new对象放在静态代码块中</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        singletonTest02 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingletonTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3.提供静态方法，获取当前类的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonTest02</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> singletonTest02<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><ul><li><p>不会直接实例化对象，而是先判断引用是否为空。</p></li><li><p>懒汉式线程安全问题：</p><ul><li><p>解决方按：</p><ul><li><p> 1.直接在方法上加锁，这样的话会解决线程安全问题，但是没有解决效率问题</p><p>   因为在实例已经存在的情况下，多线程可以并发的去获取实例，不需要排队</p><p>   所以这种方案不是最佳解决方案</p></li><li><p> 2.使用同步代码块加<strong>双重判断</strong>，既解决了线程安全问题，又解决了同步代码块问题</p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//双检锁/双重校验锁方式</span><span class="token comment">//1.构造方法私有化，不希望在外界可以实例化对象</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonTest03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.在本类中聚合本类的引用</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token class-name">SingletonTest03</span> singletonTest03<span class="token punctuation">;</span>    <span class="token comment">//3.提供静态方法，获取当前类的实例</span>    <span class="token comment">//直接在方法上加锁，这样的话会解决线程安全问题，但是没有解决效率问题</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">SingletonTest03</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//判断当前实例是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singletonTest03 <span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//由于是静态方法，共享对象应该写类对象</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingletonTest03</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//因为第一个判断语句时如果已经有多个线程并发，在锁中，让一个线程先创建实例后，另外一个线程检测到实例不为空，则不用再创建实例了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singletonTest03 <span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    singletonTest03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTest03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singletonTest03<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="代理模式-Proxy-（面试重点）"><a href="#代理模式-Proxy-（面试重点）" class="headerlink" title="代理模式(Proxy)  !! （面试重点）"></a>代理模式(Proxy)  !! （面试重点）</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>代理模式：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><blockquote><p>​               逻辑发起点 （访问对象）、代理对象、被代理对象（目标对象）</p><p>可以看做  租客 –&gt; 中介 –&gt; 房东</p><p>​    </p></blockquote></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：<ul><li>代理模式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用</li><li>代理对象可以扩展目标对象的功能</li><li>代理模式能将客户端与目标对象分类 ，在一定程度上降低了系统的耦合度，增加了程序的可扩展性</li></ul></li></ul><ul><li><p>缺点：</p><ul><li><p>代理模式会造成系统设计中类的数量增加</p></li><li><p>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢</p></li><li><p>增加了系统的复杂度</p></li></ul><blockquote><p>使用动态代理方式可以解决以上缺点</p></blockquote></li></ul><h4 id="使用范围："><a href="#使用范围：" class="headerlink" title="使用范围："></a>使用范围：</h4><p>​    要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等</p><h4 id="代理模式作用"><a href="#代理模式作用" class="headerlink" title="代理模式作用"></a>代理模式作用</h4><ul><li><p>对于一些可重复利用的组件，可以把这些组件通过代理模式完成对核心模块的增强！！即添加功能</p><blockquote><p>以后学习的spring框架，其中的springAop底层就是封装了代理模式（动态代理）</p></blockquote></li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>远程代理  用于隐藏目标对象存在于不同地址空间的事实，方便客户端访问。</p><blockquote><p>例如用户申请某些网盘空间时，会在用户的文件系统中建立一个虚拟的硬盘，用户访问虚拟硬盘时实际访问的是往</p></blockquote></li></ul><h4 id="代理模式形式"><a href="#代理模式形式" class="headerlink" title="代理模式形式"></a>代理模式形式</h4><h5 id="选择代理模式"><a href="#选择代理模式" class="headerlink" title="选择代理模式"></a>选择代理模式</h5><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210511141033.png" alt="选择代理模式"></p><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><ul><li>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类</li></ul><ul><li>优点:<ul><li>在不修改日标对象的功能前提下，能通过代理对象对目标功能扩展</li></ul></li><li>缺点:<ul><li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类一旦接口增加方法,目标对象与代理对象都要维护</li></ul></li></ul><ul><li><p>逻辑</p><blockquote><p>1.创建代理对象 和被代理对象（目标对象）的共同接口，实现相同的方法</p><p>2.在代理对象中聚合共同接口的引用，使用多态获取被代理对象</p><p>3.逻辑发起点可以与代理对象进行交互，创建代理对象，在代理对象中实现方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDao</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyInterface</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**    *代理对象可以直接和被代理对象联系，    *但代理对象可能有多个被代理对象，即一个中介可能认识多个房东，    *聚合接口的引用    *要想获得房东对象，可以使用多态的方法*/</span>    <span class="token keyword">private</span> <span class="token class-name">ProxyInterface</span> proxyInterface<span class="token punctuation">;</span>    <span class="token comment">//从外界通过多态的方式传入房东对象</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyDao</span><span class="token punctuation">(</span><span class="token class-name">ProxyInterface</span> proxyInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyInterface <span class="token operator">=</span> proxyInterface<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用房东的找房方法  虽然使用接口，但实际上代表目标类的逻辑</span>        proxyInterface<span class="token punctuation">.</span><span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyInterface</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到房东，合同签署完毕！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//共同接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProxyInterface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 找房的方法     */</span>    <span class="token keyword">void</span> <span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//逻辑发起点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApp</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 代理模式的作用：     *  在不修改被代理对象的情况下，完成对目标功能扩展     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//逻辑发起点是可以直接和代理对象交互的，创建代理对象</span>        <span class="token comment">//使用多态，传入房东类的引用</span>        <span class="token class-name">ProxyDao</span> proxyDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyDao</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProxyDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用中介找房方法</span>        proxyDao<span class="token punctuation">.</span><span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h5><ul><li>在代理对象中完成对目标对象的增强</li></ul><p>代理类是在程序运行时，通过反射机制在内存中创建出来，不是手动创建的，必须实现相同接口</p><ul><li>JDK代理<ul><li>也被称为接口代理，要求目标类和代理类实现相同的接口</li><li>代理类是在程序运行时，通过反射机制在内存中创建出来，不是手动创建出来的。</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//需要使用目标对象</span>        <span class="token class-name">ProxyDaoimpl1</span> proxyDaoimpl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyDaoimpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//传入目标对象，用于创建代理对象</span>        <span class="token class-name">CreatProxy</span> creatProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreatProxy</span><span class="token punctuation">(</span>proxyDaoimpl1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建代理对象 返回的数据类型实际上是目标对象，但是一个代理对象有多个目标对象，因此强转为接口父类</span>        <span class="token class-name">ProxyInterface</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProxyInterface</span><span class="token punctuation">)</span>creatProxy<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ji <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"黄焖鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ji<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建接口</span><span class="token keyword">interface</span> <span class="token class-name">ProxyInterface</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建目标对象</span><span class="token keyword">class</span> <span class="token class-name">ProxyDaoimpl1</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyInterface</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"吃的是"</span><span class="token operator">+</span>food<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过反射机制创建代理对象</span><span class="token keyword">class</span> <span class="token class-name">CreatProxy</span><span class="token punctuation">&#123;</span>    <span class="token comment">//聚合目标类对象的引用，由于有多个类对象，所以聚合父类的引用</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> object<span class="token punctuation">;</span>    <span class="token comment">//提供构造，传入目标对象实例</span>    <span class="token keyword">public</span> <span class="token class-name">CreatProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//使用反射机制，获取反射机制创建出来的代理对象，在反射包下有Proxy类</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/**         * ClassLoader loader, 目标对象的类加载器         *Class&lt;?>[] interfaces, 目标对象的接口         *InvocationHandler h  接口对象         */</span>        <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/**                     *                      * @param proxy  代理对象的字节码对象                      * @param method 代理对象的方法字节码对象  = 目标对象的                     * @param args    代理对象方法所对应的参数 = 目标对象的                     * @return                     * @throws Throwable                     */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//由于代理对象与目标对象都是实现同一个接口的方法，方法相同</span>              <span class="token comment">//invoke方法用来获取目标对象的方法  参数1：目标对象的对象，参数2：目标对象的参数</span>                <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>总结</strong></p><blockquote><ol><li>创建目标对象与代理类对象共同接口</li><li>创建目标对象</li><li>利用反射机制创建代理类对象，传入目标对象的类加载器，目标对象的接口（多个）,扩展处理器(InvocationHandler类)</li></ol></blockquote><ul><li><p>Cglib代理</p><ul><li>子类代理，<strong>目标类可不实现接口</strong> ，创建的类为目标类子类</li><li>可以在内存动态的创建对象，而不需要实现接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">方法<span class="token number">1</span>  实现某一接口，此接口重写方法即为增强方法<span class="token comment">/** * 用于创建代理类的类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateCglib</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//被代理类的对象实例</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CreateCglib</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 用于获取代理对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建cglib对象</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置父类 （即目标类）</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//增强目标类的方法  传入当前类实例  设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建代理对象的方法</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 用于增强目标类的方法，作用和Jdk动态代理中invoke方法相同     * @param o  代理类的字节码对象     * @param method  代理类方法的字节码对象     * @param objects  参数     * @param methodProxy     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强代码2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="普通工厂模式："><a href="#普通工厂模式：" class="headerlink" title="普通工厂模式："></a>普通工厂模式：</h4><ul><li><p> 由一个工厂对象决定创建出哪一种产品类的对象</p></li><li><p>根据标识，new相应的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"mi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//创建小米手机实例</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">mi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"huaWei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//创建华为手机实例</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">huaWei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul><li><p>让所有对象实现某一接口，在工厂中使用方法方式创建相应对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取小米手机实例的方法     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">getMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">mi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取华为手机实例的方法     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">getHuawei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">huaWei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li><p>所有对象都实现一个接口，一个工厂实现一个接口，在接口中聚合对象接口的属性 ，通过反射机制创建对象</p></li><li><p>横向纵向使用的</p></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//制作手机的接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//制作手机的方法  接口中套一个接口，返回的是接口</span>    <span class="token class-name">Phone</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory4</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生产手机的方法     * @param className 传入的是全类名     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>className <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取字节码对象</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//通过反射创建手机实例</span>                <span class="token class-name">Object</span> obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Phone</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际上抽象工厂模式就是创建一个工厂接口，传入的参数是全类名，返回值为产品的接口，传入产品的全类名后，通过反射创建对象，再将对象返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><ul><li>Spring是容器，可以帮忙管理很多可重用的组件</li><li>最大的目的就是使JAVA EE开发更加容易</li><li>Spring  <strong>方便解耦，简化开发</strong></li><li>Spring容器中的实例默认是单例的，是可重用的组件，内存地址为一份</li></ul><h2 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h2><ul><li><strong>方便解耦，简化开发</strong></li><li><strong>AOP编程支持</strong><ul><li>AOP是面向切面编程，OOP是面向对象编程</li></ul></li><li></li></ul><h2 id="程序的耦合"><a href="#程序的耦合" class="headerlink" title="程序的耦合"></a>程序的耦合</h2><ul><li><p>耦合性(Coupling)，也叫耦合度,是对模块间关联程度的度量。</p><p>耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差(降低耦合性,可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的,但是我们只讨论软件工程中的耦合。</p></li><li><p>耦合度越高，关联度越大</p></li></ul><ul><li><p>总部是在苏州</p><ul><li><p>70人左右</p></li><li><p>产品项目研发</p><ul><li><ol><li>管理</li><li>技术<ol><li>工业</li><li>算法要求很高</li><li></li></ol></li></ol></li></ul></li></ul></li></ul><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210513093509.png" alt="控制反转"></p><ul><li>IOC控制反转，<code>Inverse of Control</code></li><li>由代理人创建与管理对象，消费者通过代理人来获取对象</li><li></li></ul><h3 id="正转"><a href="#正转" class="headerlink" title="正转"></a>正转</h3><ul><li><p><strong>正转</strong> ： 在软件开发中，聚合在类中的实例，是由开发人员创建的，对象实例创建的控制权在开发人员手上</p><ul><li>坏处：使类与类之间产生了依赖关系，使得程序的执行效 率变低</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TestDao</span> dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDaoimpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li>即聚合实例的引用时，使用构造方法或set方法，在类调用处传入对象</li></ul><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><ul><li><p>在类中直接创建对象的方式改成给该引用指定构造方法，程序里不存在new关键字,这也被称为依赖注入，</p><p><strong>程序由主动地创建对象变成被动的接收对象，这是控制反转的一种思想</strong>，对象创建的控制权交给了客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//聚合接口的引用</span><span class="token keyword">private</span> <span class="token class-name">TestDao</span> dao<span class="token punctuation">;</span>    <span class="token comment">/*在类中直接创建对象的方式改成给该引用指定构造方法，    程序里不存在new关键字,这也被称为依赖注入，    程序由主动地创建对象变成被动的接收对象，这是控制反转的一种思想    对象创建的控制权交给了客户端*/</span>    <span class="token keyword">public</span> <span class="token class-name">TestServiceimpl</span><span class="token punctuation">(</span><span class="token class-name">TestDao</span> dao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dao <span class="token operator">=</span> dao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Spring核心API"><a href="#Spring核心API" class="headerlink" title="Spring核心API"></a>Spring核心API</h2><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210513110332.webp" alt="核心Api"></p><ul><li><code>BeanFactory</code>  </li></ul><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><ul><li><p>要想使用spring框架，需要导入相应的jar包</p><blockquote><p>消息组件：</p><p>commons-logging-1.2.jar  </p><p>spring-expression-5.0.2.RELEASE.jar</p><p>核心容器：</p><p>spring-beans-5.0.2.RELEASE.jar  </p><p>spring-context-5.0.2.RELEASE.jar</p><p>spring-core-5.0.2.RELEASE.jar   容器jar包</p></blockquote></li></ul><h2 id="XML创建容器对象"><a href="#XML创建容器对象" class="headerlink" title="XML创建容器对象"></a>XML创建容器对象</h2><h3 id="1-xml文档设置"><a href="#1-xml文档设置" class="headerlink" title="1.xml文档设置"></a>1.xml文档设置</h3><ol><li>导入spring的约束，</li><li>使用<code>bean</code>标签，设置容器的全局标识，全类名</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--xmlns 约束，包含了名称空间，spring框架需要使用spring的名称空间--></span>    <span class="token comment">&lt;!--    把user类的实例装载到spring中：    bean标签：声明一个组件    id属性：该组件所对应的全局标识，全局标识一定是唯一的    class属性：指的是该组件所对应的全类名    spring底层会通过dom4j去解析xml文档，找到bean标签，在找到每个bean便签对应的class属性，    获取class属性的属性值，根据反射创建实例，保存在spring的工厂中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.class1.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            根据实体的set方法进行注入。            name填的是实体类中setId()方法中set后面的名称并且首字母小写，（如：getID(),getName(),就写id，name等）,            和实体类中封装的id属性没有关系            如果是基本数据类型和String，可以直接使用value属性进行赋值            如果是引用数据类型（除了String），需要用ref属性引入别的实例(与之对应的组件)            ref 写的是别的组件的全局标识        --></span>        <span class="token comment">&lt;!-- &lt;property name="id" value="100">&lt;/property>         &lt;property name="name" value="张三">&lt;/property>         &lt;property name="password" value="123456">&lt;/property>         &lt;property name="date" ref="date">&lt;/property>--></span>        <span class="token comment">&lt;!--            通过构造方法进行注入            这边的name里面写的是实体类中的属性(如sname,id等属性参数)和上面的不一样        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建dao实例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.class1.dao.TestDaoimpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建Service实例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.class1.service.TestServiceimpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>servlet<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.class1.servlet.TestServlet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--声明一个日期组件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-底层"><a href="#Spring-底层" class="headerlink" title="Spring 底层"></a>Spring 底层</h4><ul><li>spring在底层会通过dom4j去解析xml文档，找到所有的bean标签，在找到每个bean标签对应的class属性，获取class属性的属性值，根据反射创建实例，保存在spring工厂中</li></ul><h4 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h4><p><code>scope</code>属性设置</p><ul><li>如果对象是单例，那核心容器在加载的时候，对象就会创建，核心容器关闭的时候（调用close方法），对象就会销毁</li><li>如果对象是多例，什么时候获取对象(getBean方法)，容器什么时候才会创建，对象的销毁需要由垃圾回收机制回收，即与容器无关</li></ul><h3 id="2-创建容器对象"><a href="#2-创建容器对象" class="headerlink" title="2.创建容器对象"></a>2.创建容器对象</h3><ol><li>Java文件中创建<code>ClassPathXmlApplicationContext</code>对象</li><li>使用<code>getBean(id)</code>方法在容器中获取实例</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//基于xml的方式创建核心容器对象</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"xml/beans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在容器中获取实例</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h2><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210513150805.png" alt="image-20210513150802786"></p><h2 id="基于注解的IOC配置"><a href="#基于注解的IOC配置" class="headerlink" title="基于注解的IOC配置"></a>基于注解的IOC配置</h2><h3 id="注解种类"><a href="#注解种类" class="headerlink" title="注解种类"></a>注解种类</h3><h4 id="用于创建对象"><a href="#用于创建对象" class="headerlink" title="用于创建对象"></a>用于创建对象</h4><p>相当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p><ul><li><p><strong>@Component</strong>  :（一般用于实体类中）</p><ul><li><strong>配置管理的资源</strong></li><li>把资源让 spring 来管理。相当于在 xml 中配置一个 bean。</li><li><strong>将类交由容器托管,在其他类中可使用Autowired对其作属性获取</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>@Controller：一般用于表现层的注解。</strong></p></li><li><p><strong>@Service：一般用于业务层的注解。</strong></p></li><li><p><strong>@Repository：一般用于持久层的注解。</strong></p><h4 id="用于注入数据"><a href="#用于注入数据" class="headerlink" title="用于注入数据"></a>用于注入数据</h4><p>相当于 </p><p><code>&lt;property name=&quot;&quot; ref=&quot;&quot;&gt;  </code></p><p><code>&lt;property name=&quot;&quot; value=&quot;&quot;&gt;</code></p></li><li><p>@Autowired（根据类型注入）</p><ul><li><p>自动按照类型注入。当使用注解注入属性时，set 方法可以省略。</p><p>它只能注入其他 bean 类型。</p><p>当有多个类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功。找不到就报错。</p></li></ul></li><li><p>@Qualifier（不能单独使用） 根据名称注入</p><ul><li>如果匹配多个类型一致的对象，将无法选择具体注入哪一个对象<br>使用@Qualifier()注解告诉spring容器自动装配哪个名称的对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//根据类型注入</span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//按名称注入，不能单独使用</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"accountServiceImpl"</span><span class="token punctuation">)</span>  <span class="token comment">//配合Autowired使用</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@Resource（根据id注入的）</p><ul><li>直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。</li><li><code>@Resource(“name”) ** @Autowired + @Qualifier(“name”)</code></li></ul></li><li><p>@Value（用于注入基本数据类型和String类型）</p></li><li><p><strong>@Scope</strong></p><ul><li><strong>指定 bean 的作用范围。</strong></li></ul></li><li><p>@PostConstruct用于指定初始化的方法</p></li><li><p>@PreDestroy用于指定销毁的方法</p></li></ul><h3 id="创建-spring-的-xml-配置文件并开启对注解的支持"><a href="#创建-spring-的-xml-配置文件并开启对注解的支持" class="headerlink" title="创建 spring 的 xml 配置文件并开启对注解的支持"></a>创建 spring 的 xml 配置文件并开启对注解的支持</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        开启spring对注解的支持<span class="token operator">:</span>        首先spring会找到component<span class="token operator">-</span>scan标签，确定已经开启包扫描        然后去扫描base<span class="token operator">-</span><span class="token keyword">package</span>属性指定的包，扫描的过程中，spring会        一一过滤每一个组件，看一下这些组件有没有spring提供的注解，如果有        会通过反射创建该组件的实例，然后装载进核心容器    <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ygkj"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ygkj"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210514093305.png" alt="配置比较"></p><h2 id="基于注解创建核心容器对象"><a href="#基于注解创建核心容器对象" class="headerlink" title="基于注解创建核心容器对象"></a>基于注解创建核心容器对象</h2><h3 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h3><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Configuration</td><td>用来声明一个类是spring的核心配置类</td></tr><tr><td>@Bean</td><td>会将修饰方法所对应的返回值装在到spring核心容器中</td></tr><tr><td>@ComponentScan(“com.wufan”)</td><td>开启扫描包</td></tr><tr><td>@Import(JDBCConfig.class)</td><td>用于导入其他核心配置类  ，括号内的可以视为子类</td></tr><tr><td>@PropertySource(“classpath:jdbc”)</td><td></td></tr></tbody></table><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typoraNew/20210514144400.png" alt="新注解"></p><h2 id="模拟底层解耦"><a href="#模拟底层解耦" class="headerlink" title="模拟底层解耦"></a>模拟底层解耦</h2><p><strong>模拟SPring Ioc基于注解底层解耦过程：</strong></p><ul><li>在xml中开启包扫描，Spring会去扫描指定包下面的组件</li><li>通过反射机制去过滤组件上是否有spring提供的注解(Controller,Service..)</li><li>如果有注解，Spring会通过反射机制创建实例，保存到容器中,然后Spring会根据反射机制检查该类中是否有属性需要注入（也就是属性上是否有Spring提供的注解）</li><li>如果有注解，Spring会根据反射机制进行注入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day9_JDBC+事务</title>
      <link href="/2021/04/13/ying-ge/day9/"/>
      <url>/2021/04/13/ying-ge/day9/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>JDBC</p><span id="more"></span><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><ul><li>JDBC是java语言连接数据库</li><li>JDBC实际上是一套接口，一套规范</li></ul><h2 id="JDBC运行原理"><a href="#JDBC运行原理" class="headerlink" title="JDBC运行原理"></a>JDBC运行原理</h2><ul><li>Java定义一套接口，数据库厂家提供驱动实现数据库连接</li></ul><h2 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h2><ul><li> 1.注册驱动 将jar包导入</li><li> 2.获取连接</li><li> 3.获取数据库操作对象</li><li> 4。预编译sql</li><li> 5.执行sql</li><li> 6.遍历结果集（关闭资源）</li></ul><h3 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a>注册驱动</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span>forname <span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//括号内存放全类名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h3><ul><li><p>要想使用数据库，必须先要连接数据库</p></li><li><p>使用<code>DriverManager.getConnection(url,user,password)</code>获取sql连接,返回值是<code>Connection</code>类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test03"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdbc:mysql是jdbc的一个协议，类似http协议</span><span class="token comment">//localhost:3306 是电脑本地地址，端口号为3306</span><span class="token comment">//test03为需要操作或查询的数据库名称，在要打开数据库时，必须跟上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="获取数据库操作对象"><a href="#获取数据库操作对象" class="headerlink" title="获取数据库操作对象"></a>获取数据库操作对象</h3><ul><li><p>只有获取数据库操作对象，才能对数据库增删改查</p></li><li><p>获取数据库操作对象有两种</p><ul><li><p>添加占位符<code>?</code>，在获取数据库操作对象后对占位符赋值,获取操作对象使用 <code>Statement</code>的子类<code>PrepareStatemen</code>,使用connection的<code>connection.prepareStatemnt(语句)</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一条sql语句，对需要修改的地方使用占位符?表示</span><span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"insert student (name,sex) values (?,?)"</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"update student set name =? where name = ? "</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql3 <span class="token operator">=</span> <span class="token string">"delete from student where name = ?"</span><span class="token punctuation">;</span><span class="token comment">//获取数据库操作对象并且预编译数据</span><span class="token class-name">PrepareStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取操作对象并对sql语句中占位符赋值，从1开始</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"小南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表示第一个占位符处填入小南</span>prepareStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表示性别为男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接获取数据库操作对象，使用<code>connection.createStatement()方法</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取数据库操作对象</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预编译sql语句</span><span class="token keyword">int</span> num <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token string">"insert student (name,sex) values ('男人','男')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="预编译sql"><a href="#预编译sql" class="headerlink" title="预编译sql"></a>预编译sql</h3><ul><li>预编译sql主要是为了防止数据别人篡改</li><li>使用prepareStatement()预编译sql，将数据以其他语句写入</li></ul><h3 id="执行sql"><a href="#执行sql" class="headerlink" title="执行sql"></a>执行sql</h3><ul><li><p>执行时时分为==sql操作语句==<code>DML</code>和==sql查询语句==<code>DQL</code></p></li><li><p>DML预编译时返回的是int,影响记录条数,需要用整型类型接收</p><ul><li>操作语句方法: <code>statement.excuteUpdate(sql语句)</code></li></ul></li><li><p>DQL返回值类型为ResultSet结果集对象</p><ul><li>DQL方法： <code>statement.excuteQuery(sql语句);</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//操作语句执行</span><span class="token keyword">int</span> num <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token string">"insert student(name ,sex) values ('呜呜呜',1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询语句执行</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">.</span><span class="token function">excuteQuery</span><span class="token punctuation">(</span>sql语句<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="注册驱动-1"><a href="#注册驱动-1" class="headerlink" title="注册驱动"></a>注册驱动</h3><ul><li>新版本mysql驱动Driver全类名：com.mysql.cj.jdbc.Driver</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册驱动 通过反射机制，forName里存放全类名</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加url,username,password</span>string url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://数据库地址?characterEncoding=utf8&amp;serverTimezone=GMT%2B8"</span><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span> <span class="token comment">//用户名</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span> <span class="token comment">//密码</span><span class="token comment">//连接数据库</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据库操作对象，只有获取操作对象才可对数据库增删改查</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往表中添加数据 *注：如果在url中未指定数据库，无法写入</span><span class="token keyword">int</span> num <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert student (name,sex) values ('张三',1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭数据库 *注：在finally中输入</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC工具类封装"><a href="#JDBC工具类封装" class="headerlink" title="JDBC工具类封装"></a>JDBC工具类封装</h2><ol><li><p>工具类构造方法私有化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注册驱动</p><ul><li>注册驱动步骤存放在静态代码块中，在类加载时加载，只加载一次，提高效率</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//注意捕获异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据库连接对象</p><ul><li>由于getConnection报异常，上抛异常给调用对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Drivermanager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://http://localhost:3306/test01"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据库操作对象</p><ul><li>由于获取数据库操作对象分为数据库查询对象和数据库操作对象，所以在实现类中写出</li></ul></li><li><p>关闭资源</p><ul><li><p>将调用的数据库对象从小到大一次关闭 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span><span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">,</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否非空，非空则关闭</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token function">catcah</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token comment">//其余两个一次关闭</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul><li><p>事务，一般是指要做的或所做的事情。在计算机<a href="https://baike.baidu.com/item/%E6%9C%AF%E8%AF%AD">术语</a>中是指访问并可能更新数据库中各种<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%A1%B9/3227309">数据项</a>的一个程序执行单元(unit)。</p></li><li><p>事务是为解决<a href="https://www.baidu.com/s?wd=%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">数据安全</a>操作提出的，事务控制实际上就是控制数据的安全访问。</p></li><li><p>事务面向的是数据库</p></li></ul><h3 id="事务的原子性"><a href="#事务的原子性" class="headerlink" title="事务的原子性"></a>事务的原子性</h3><ul><li>表示事务执行过程中的任何失败都将导致事务所做的任何修改失效</li></ul><h3 id="事物的一致性"><a href="#事物的一致性" class="headerlink" title="事物的一致性"></a>事物的一致性</h3><ul><li>表示事务执行失败时，所有被该事务影响的数据都应该被恢复到事务执行前的状态</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day8_Mysql数据库</title>
      <link href="/2021/04/12/ying-ge/day8/"/>
      <url>/2021/04/12/ying-ge/day8/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍了Mysql数据库，并记录了一些mysql的使用案例，介绍了一对一，一对多，多对一的实现</p><span id="more"></span><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><code>DataBase</code> 简称DB,通常是一个或一组文件，保存了一些符合特定规格的数据。</li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><ul><li>表示一种结构化文件，可以用来存储特定类型的数据.表有特定的名称，不能重复。<ul><li>表有几个概念：<ul><li>列：字段<code>Column</code></li><li>行：表中的记录</li><li>主键：，每张表必须要有自己的主键</li><li>每一个字段都有：字段名称/字段数据类型/字段约束/字段长度</li></ul></li></ul></li></ul><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><ul><li><strong>主键不允许为空，主键必须唯一，在创建主键时，需要为其指定主键，数据类型为整型，不允许为空值</strong></li><li>一般多张表之间相互关联，员工表中有部门表的连接，一般称之为<strong>外键</strong>，而外键一般为另一张表主键。</li></ul><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ul><li><p>数据<strong>查询</strong>语言(DQL-Data Query Language) </p><ul><li>代表关键字:select </li></ul></li><li><p>数据<strong>操纵</strong>语言(DML-Data Manipulation Language)</p><ul><li>代表关键字:insert,delete,update </li></ul></li><li><p>数据定义语言(DDL-Data Definition Language)</p><ul><li>代表关键字:create ,drop,alter,</li></ul></li><li><p>事务控制语言(TCL-Transactional Control Language)</p><ul><li>代表关键字:commit ,rollback;</li></ul></li><li><p>数据控制语言(DCL-Data Control Language)</p><ul><li>代表关键字:grant,revoke.</li></ul></li></ul><h2 id="数据库基本语言"><a href="#数据库基本语言" class="headerlink" title="数据库基本语言"></a>数据库基本语言</h2><ul><li>进入数据库   <code>mysql -u root -p</code></li><li>创建数据库 <code>create database 数据库名称</code><ul><li>在数据库中建立表。因此创建表的时候必须要选择数据库</li></ul></li><li>查询数据库  <code>select database()</code></li><li>查询数据库版本 <code>select version()</code></li><li>使用数据库<code>use 数据库</code></li><li>终止语句 <code>\c</code></li><li>退出mysql <code>\q</code> <code>QUIT</code> <code>EXIT</code></li><li>删除数据库 <code>drop database 数据库</code></li><li>查询数据库的表 <code>show tables</code></li><li>查询表中数据结构 <code>select *from 表名 </code></li></ul><h3 id="DQL数据查询语言-select-查询"><a href="#DQL数据查询语言-select-查询" class="headerlink" title="DQL数据查询语言  select(查询)"></a><code>DQL</code>数据查询语言  <strong>select(查询)</strong></h3><ul><li><code>select</code>用于查询表中的数据<ul><li><code>select * from 表名; </code>  *代表所有数据</li></ul></li></ul><h3 id="DML数据操作语言-insert-添加-delete-删除-update-修改"><a href="#DML数据操作语言-insert-添加-delete-删除-update-修改" class="headerlink" title="DML数据操作语言 insert(添加)  delete(删除) update(修改)"></a><code>DML</code>数据操作语言 <strong>insert(添加)  delete(删除) update(修改)</strong></h3><ul><li><p><code>insert</code>  添加一条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> tb_students <span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个 ()内是添加表的每个字段 ，第二个()内添加相应字段的数据</p></li><li><p><code>update</code> 修改一条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tb_students <span class="token keyword">set</span> stu_name <span class="token operator">=</span> <span class="token string">'赵六new'</span><span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">35</span> <span class="token keyword">where</span> stu_name <span class="token operator">=</span> <span class="token string">'赵六'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>delete</code> 删除一条数据 以主键id删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> tb_students <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul><li><strong>条件查询需要用到where语句，where必须放到from语句表后面</strong></li><li>sql99语法在from后面where只能出现一次</li></ul><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>between … and ….</td><td>两个值之间,<strong>等同于 &gt;= and &lt;=</strong></td></tr><tr><td>is null</td><td>为null（is not null 不为空）</td></tr><tr><td><strong>and</strong></td><td>并且</td></tr><tr><td><strong>or</strong></td><td>或者</td></tr><tr><td>in</td><td>包含，相当于多个or（not in不在这个范围中）</td></tr><tr><td>not</td><td>not可以取非，主要用在is 或in中</td></tr><tr><td>like</td><td>like称为模糊查询，支持%或下划线匹配  %匹配任意个字符  下划线，一个下划线只匹配一个字符</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算所有员工的年薪select empno &#39;编号&#39;,ename &#39;姓名&#39;,sal* 12 &#39;年薪&#39; from emp;select ename as &#39;员工姓名&#39; ,sal*12 &#39;年薪&#39; from emp;#查询薪水不等于5000的员工select ename &#39;员工&#39;,sal &#39;月薪&#39; from emp where sal &lt;&gt; 5000;#查询月薪大于1500的员工select ename &#39;员工&#39; ,sal &#39;月薪&#39; from emp where sal &gt; 1500;#查询月薪在900-1500之间的元select ename &#39;员工&#39; ,sal &#39;月薪&#39; from emp where sal &gt; 900 and sal &lt; 1500;select ename &#39;员工&#39; ,sal &#39;月薪&#39; from emp where sal between 900 and 1500;#查询津贴为空的员工 is nullselect ename,comm from emp where comm is null;#查询津贴不为空的员工 is not nullselect ename,comm from emp where comm is not null;#查询出job为manager或者job为salesman的员工 or或者关键字select * from emp where job &#x3D; &#39;manager&#39; or job &#x3D; &#39;salesman&#39;;#查询出编号为 7499 和7521的员工 in关键字select *  from emp where empno in(7499,7521);#或者select *from emp where  empno &#x3D; 7499 or empno &#x3D; 7521;#查询薪水包含1600和薪水包含3000的员工；select *from emp where sal in (1600,3000);#查询出薪水不包含1600和薪水不包含3000的员工#法1select *from emp where sal not in (1600,3000);#法2select *from emp where sal &lt;&gt; 1600 and sal&lt;&gt;3000;#法3select *from emp where not (sal &#x3D; 1600 or sal &#x3D; 3000);#查询薪水大于1800，并且部门代码为20或30的员工select *from emp where (deptno &#x3D; 20 or deptno &#x3D; 30) and sal &gt;1800;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul><li>聚合函数只能和分组字段一起出现</li><li>聚合函数不能出现在from之后</li></ul><table><thead><tr><th>count</th><th>取得记录数</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">##求管理部门员工的个数 count 取得记录数# count(*)表示取得所有记录值，忽略null,为null的值也会取得select count(*) &#39;管理部门员工个数&#39; from emp where job &#x3D; &#39;manager&#39;;#取得津贴不为null的员工个数 *注：count会自动过滤掉空值，可以直接从津贴获得记录#采用count(字段名称),不会取得null的记录select count(comm)  &#39;津贴不为空员工数 &#39;from emp; #取得工作岗位的个数  *注：distinct 关键字用于去重select count(distinct job ) from emp;#取得薪水总和 *注：sum可以取得某一列的和，null会被忽略。select sum(sal)  &#39; 薪水综合&#39; from emp;#求取得薪水的合计（薪资+津贴） *注：津贴中含有null值，需要将comm字段转换成0select sum(sal+ifnull(comm,0)) from emp;#求薪水最高的员工select max(sal) &#39;薪资&#39; from emp;&#x2F;&#x2F;求薪水最底的员工select min(sal) &#39;薪资&#39; from emp;&#x2F;&#x2F;求员工薪水平均值select avg(sal) &#39;薪水平均值&#39; from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模糊查询-：-like-关键字-重要！！"><a href="#模糊查询-：-like-关键字-重要！！" class="headerlink" title="模糊查询 ： like 关键字 (重要！！)"></a>模糊查询 ： like 关键字 (重要！！)</h2><ul><li>like支持<code>%和下划线匹配</code><ul><li><code>%匹配任意字符出现的个数</code>，<code>下划线只匹配一个字符</code></li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查找出员工姓名中包含字母&#39;L&#39;的员工select * from emp where ename like &#39;%L%&#39;;#查询以M开头的员工select * from emp where ename like &#39;M%&#39;;#查询以N结尾的员工的薪资select * from emp where ename like &#39;%l%&#39;;#查询第二个字母是O的员工select * from emp where ename like &#39;__O%&#39;;#查询倒数第三个字母是M的员工select *from emp where ename like &#39;%m__&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h2><ul><li>排序采用<code>order by</code>子句，<code>order by</code>后面跟排序字段</li><li><strong>排序字段可以放多个</strong>，多个采用<code>,</code>间隔，如果第一个字段重复，根据第二个字段排序。</li><li><code>order by</code>默认采用升序 ，降序则在排序语句后加<code>desc</code></li><li>如果存在<code>where子句</code>,<code>order by</code>必须放到<code>where</code>语句<strong>后面</strong></li><li></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#按照薪水从小到大排序 从小到大在排序语句后加 ascselect * from emp order by sal asc; asc可写可不写#取得job为MANAGER的员工，按照薪水由小到大排序 *注意where子句在order by前select *from emp where job &#x3D; &#39;manager&#39; order by sal asc;# 如果有字段存在多个元素，则首先需要按照此字段排序，再按照原有字段排序#首先按照job排序，再按照sal排序select *from emp order by job,sal;#按照薪水从大到小排序 *注：降序需要在排序语句后加 desc;select *from emp order by sal desc;&#x2F;&#x2F;查询员工姓名中包含&quot;L&quot;的员工，并按薪水从大到小排序select * from emp where ename like &#39;%L%&#39; order by sal desc;#按照字段位置排序 order by 字段所处位置  *注：要想使用此方法，必须将所有信息全部输出才可排序#按照薪水排序select *from emp order by 6; #薪水sal字段处于第六个#按照姓名排序 姓名字段处于第二个select *from emp order by 2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="group-by-分组查询"><a href="#group-by-分组查询" class="headerlink" title="group by 分组查询"></a>group by 分组查询</h2><ul><li><p>分组函数自动忽略空值</p></li><li><p>排序关键字<code>order by</code>要放在分组关键字<code>group by</code>后面</p></li><li><p>分组查询主要涉及到两个子句，分别是：<code>group by和having</code></p></li></ul><p><strong>SQL语句中若有group by 语句，那么在select语句后面只能跟</strong>分组函数+参与分组的字段,即只能有一个分组字段<strong>。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#取得每个工作岗位的工资合计，要求显示岗位名称和工资合计select job &#39;岗位&#39;, sum(sal) &#39;岗位获得所有薪水&#39; from emp group by job;#取得每个工作岗位的平均工资，要求显示岗位名称和平均工资，然后按照薪资升序 *注：字段如果使用了别名，在其余地方都需要使用别名select job &#39;岗位&#39;, avg(sal) sal1  from emp group by job order by sal1 asc;#按照工作岗位和部门编码分组，取得的工资合计 *注：group by后只能有一个分组字段select job,deptno,sum(sal) from emp group by job,deptno;&#x2F;&#x2F;按照工作岗位和部门编码分组，取得的工资合计 select job ,deptno,sum(sal) from emp group by job,deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组查询的执行顺序"><a href="#分组查询的执行顺序" class="headerlink" title="分组查询的执行顺序"></a>分组查询的执行顺序</h3><ul><li>根据条件查询数据<ul><li>分组<code>group by</code><ul><li>采用<code>having</code>过滤，取得正确的数据</li></ul></li></ul></li></ul><h2 id="having-再过滤"><a href="#having-再过滤" class="headerlink" title="having 再过滤"></a>having 再过滤</h2><ul><li><p><code>having 关键字</code>  对分组后的数据再次进行过滤</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;取得每个方位的平均工资大于2000select job,avg(sal) avg from emp group by job having avg &gt; 2000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="分页-limit"><a href="#分页-limit" class="headerlink" title="分页 limit"></a>分页 limit</h2><ul><li>分页的关键字一定是出现在整个sql语句的后面（即在order by后面）</li><li>表达： <code>limit startIndex,length</code><ul><li>startIndex  起始位置，下表从0开始</li><li>length 取几条数目</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">limit</span> 起始索引位置<span class="token punctuation">,</span>分页单位<span class="token comment">#起始索引从0开始，分页单位即从索引位置开始往后几条。</span>例：查出员工表<span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>条数据<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>案例：查出员工表<span class="token number">2</span><span class="token operator">-</span><span class="token number">9</span>条数据，然后按照薪资进行降序排列<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="SQL92语法"><a href="#SQL92语法" class="headerlink" title="SQL92语法"></a>SQL92语法</h3><ul><li><strong>没有指定 连接条件</strong>时，会出现“笛卡尔乘积”的现象，此时会出现遍历情况，表1字段和表2字段会完全遍历。</li></ul><p><code>elect 表1内字段，表2内字段 from 表1，表2 where 限定条件</code></p><p><code>select 表1内字段，表2内字段 from 表1，表2 where 限定条件</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#例：查询所有部门信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token comment">#显示每个员工，并显示所属部门名称 where后建立连接</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>dname <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>DEPTNO <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">#一般需要为表起别名，在查询或者限定条件时，都以别名进行查询，（类似java中的声明）</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>DEPTNO <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">//取得员工和所属领导的姓名 通过员工的mgr与领导工号匹配，将领导的姓名匹配出来</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>ename <span class="token string">'员工姓名'</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>ename <span class="token string">'领导'</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>emp m <span class="token keyword">where</span> e<span class="token punctuation">.</span>mgr <span class="token operator">=</span> m<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL99语法"><a href="#SQL99语法" class="headerlink" title="SQL99语法"></a>SQL99语法</h3><ul><li>SQL99 语法中 <code>where </code>需要换为<code>on</code></li></ul><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li><p>内连接会自动过滤掉空值</p></li><li><p>join连接</p></li></ul><p><code>表1 (inner) join 表2 on 限定条件 </code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#等值连接 限定条件处相同</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>DEPTNO <span class="token operator">=</span> d<span class="token punctuation">.</span>DEPTNO<span class="token comment">#非等值连接  例如介于某个区间之内，>&lt;,非空判断</span><span class="token comment">#查询每个员工对应的薪资等级(要求显示员工姓名，员工薪资，员工薪资等级)</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>GRADE <span class="token keyword">from</span> emp e <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal  <span class="token comment">#确定约束条件是薪资</span><span class="token operator">BETWEEN</span> s<span class="token punctuation">.</span>LOSAL <span class="token operator">AND</span> s<span class="token punctuation">.</span>HISAL  <span class="token comment">#显示在某个区间之内</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>自连接 </p><ul><li>自己连接自己，将一张表当成两张表操作</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>ENAME<span class="token punctuation">,</span>b<span class="token punctuation">.</span>ENAME<span class="token keyword">FROM</span> emp a <span class="token keyword">join</span> emp b<span class="token keyword">on</span> a<span class="token punctuation">.</span>EMPNO <span class="token operator">=</span> b<span class="token punctuation">.</span>MGR  <span class="token comment">#限定条件是领导编号与员工编号对应</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>外连接需要将<code>while ---&gt; on</code></li><li>外连接是多表查询的一种，把其中一张表看成主表，另外一张看成从表</li><li>外连接在查询过程中，要求主表的数据是必须全部出现的，<strong>如果匹配字段为null，这个null会直接显示</strong>，不会被过滤掉。(主表类比java的key,必须要全部有值，从表类比java的value，不一定赋值)</li><li>sql99语法在from后面where只能出现一次</li></ul><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><ul><li><p><code>主表 left (outer) join 从表</code></p></li><li><p>如果A表连接B表，把一张表看做主表，一张表看做副表</p></li><li><p>主表的内容全部显示，副表的内容可以不用全部显示，如果副表没有字段匹配，则返回null</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#左连接</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>ENAME <span class="token string">'员工姓名'</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>ENAME <span class="token string">'领导姓名'</span><span class="token keyword">FROM</span> emp a <span class="token keyword">left</span> <span class="token keyword">join</span> emp b<span class="token keyword">on</span> a<span class="token punctuation">.</span>MGR <span class="token operator">=</span> b<span class="token punctuation">.</span>EMPNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><ul><li><code>从表 right join 主表</code><ul><li>右连接以右边的表为准和左边的表比较，和右表相等的不相等的都会显示出来，左表符合条件的显示，不符合条件的不显示。</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> d<span class="token punctuation">.</span>DNAME <span class="token punctuation">,</span> e<span class="token punctuation">.</span>DEPTNO<span class="token keyword">FROM</span> emp e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> dept d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>DEPTNO <span class="token operator">=</span> d<span class="token punctuation">.</span>DEPTNO<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>DEPTNO <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token comment">#此时e表作为副表，如果没有字段与主表匹配，则显示为空，通过判空查找结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>左连接能完成的功能右连接一定可以完成</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;要求显示所有员工姓名，以及员工对应的领导select e.ename &#39;员工姓名&#39;,m.ename &#39;领导&#39; from emp e,emp m where e.mgr &#x3D; m.empno;select e.ename &#39;员工姓名&#39;,m.ename &#39;领导&#39; from emp e left join emp m on e.mgr &#x3D; m.empno;  此时强制显示员工的所有姓名显示员工信息，并显示所属的部门名称# 外连接select e.ename ,e.sal,d.dname from emp e right join dept d on e.deptno &#x3D; d .deptno and sal &gt; 2000;# SQL92select e.ename,e.sal,d.dname from emp e , dept d where e.deptno &#x3D; d.deptno and sal &gt; 2000;# 如果某字段只存在于一张表中，则无需使用别名去声明；如果两张表中都存在某字段，一般此字段为两个表的连接字段，并且为其中一张表主键。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h3><ul><li>多张表连接查询只能使用外连接</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;三张表或者三张表以上的连接查询1.查询所有员工的薪水，薪水等级，部门名称#把两张表查出来来的结果与第三表进行连接# 将emp表作为主表select e.ename &#39;员工姓名&#39;,d.dname &#39;所属部门&#39;,e.sal &#39;薪水&#39;,s.grade  &#39;薪水等级&#39;from dept d right join emp e   on e.deptno &#x3D; d.deptnoleft join salgrade s #之前的结果连接当前的等级表on e.sal between s.losal and s.hisalorder by s.grade ,e.sal;#案例#求每个员工的薪水等级select e.ename,avg(e.sal),s.gradefrom dept d inner join emp eon d.deptno &#x3D; e.deptnoleft join# 求薪水等级大于2的员工信息，并降序排列select e.* ,d.dname &#39;所属部门&#39;,s.grade  &#39;薪水等级&#39;from dept d right join emp e   on e.deptno &#x3D; d.deptnoinner join salgrade s #之前的结果连接当前的等级表on e.sal between s.losal and s.hisal and s.grade &gt; 2order by s.grade desc;select job &#39;岗位&#39;, avg(sal) sal1  from emp group by job order by sal1 asc;#显示员工对应的薪资等级，领导，所属部门SELECT e1.ENAME &#39;员工姓名&#39;,e2.ENAME &#39;领导姓名&#39; ,d.DNAME &#39;部门&#39;,e1.SAL &#39;薪资&#39;,s.GRADE &#39;薪资水平&#39;from emp e1 join dept d on e1.DEPTNO &#x3D; d.DEPTNO #作为emp与deptno的连接条件join emp e2  #自连接，on e1.MGR &#x3D; e2.EMPNO #用于将员工与领导对应join salgrade son e1.SAL BETWEEN s.LOSAL AND s.HISAL #规定薪资的范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子查询-嵌套查询"><a href="#子查询-嵌套查询" class="headerlink" title="子查询(嵌套查询)"></a>子查询(嵌套查询)</h2><ul><li>子查询实际上是语句的嵌套，无论是几张表，永远都只从两张表开始分析</li></ul><h4 id="where语句中"><a href="#where语句中" class="headerlink" title="where语句中"></a>where语句中</h4><ul><li><p>在where语句中使用子查询，也就是在where语句中加入select语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询员工信息，查询哪些人是管理者，要求显示出其员工编号和员工姓名1.查询管理员编号select distinct mgr from emp where mgr is not null;2.查询员工编号中包含管理员编号的select empno,ename from emp where empno in (select distinct mgr from emp where mgr is not null);#查询哪些人的薪水高于员工的平均薪水，需要显示员工编号，员工姓名，薪水1.找到平均薪水select avg(sal) from emp;2.找到薪水高于平均薪水的员工select empno&#39;员工编号&#39;,ename &#39;员工姓名&#39;,sal from emp where sal &gt; (select avg(sal) from emp);SELECT *FROM empWHERE SAL&gt; (SELECT avg(SAL) from emp)  #将员工的薪水和得到的平均薪水作对比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="from语句中"><a href="#from语句中" class="headerlink" title="from语句中"></a>from语句中</h4><ul><li><p>from语句中使用子查询，可以将子查询看做一张表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询各个部门的平均薪水所属等级，需要显示部门编号，平均薪水，等级编号1.查各部门的平均薪水select d.dname,avg(e.sal) avgfrom emp e inner join dept d on e.deptno &#x3D; d.deptno  group by d.dname; 2.select a.dname ,s.gradefrom(select d.dname,avg(e.sal) avg_salfrom emp e inner join dept d on e.deptno &#x3D; d.deptno  #指定连接条件group by d.dname ) a left join salgrade s on a.avg_sal between s.losal and s.hisal;  #求部门的平均薪水，并显示薪水等级 1.求部门的平均薪水 select d.dname ,avg(e.sal) from  emp e inner join dept d on e.deptno &#x3D; d.deptno group by d.dname;  2.与薪水等级表连接起来 select a.dname &#39;部门名称&#39;,a.avg_sal &#39;平均薪水&#39; from  ( select d.dname ,avg(e.sal) avg_sal from  emp e inner join dept d on e.deptno &#x3D; d.deptno group by d.dname) a left join salgrade s on avg_sal between s.losal and hisal;  #完整实现 SELECT t.dname,t.avg1,s.GRADEFROM (SELECT d.dname dname,avg(e.sal) avg1FROM dept d left join emp e  #首先执行on d.DEPTNO &#x3D; e.DEPTNO GROUP BY d.DNAME) t LEFT JOIN salgrade son t.avg1  BETWEEN s.LOSAL and s.HISAL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>D:\necessary\MySQL\bin</p><h4 id="select语句中"><a href="#select语句中" class="headerlink" title="select语句中"></a>select语句中</h4><ul><li><p>在select语句中使用子查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询员工信息，并显示出员工所属的部门名称#方法1 员工表与部门表连接select e.ename ,d.dname from emp e,dept d where e.deptno &#x3D; d.deptno;#方法2 将部门表信息嵌套进员工表内select e.ename ,(select d.dname from dept d where e.deptno &#x3D; d.deptno) dnamefrom emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="select语句总结"><a href="#select语句总结" class="headerlink" title="select语句总结"></a>select语句总结</h2><p>一个完整的select语句格式：</p><pre class="line-numbers language-none"><code class="language-none">select 字段from 表名where …….group by ……..having …….(就是为了过滤分组后的数据而存在的—不可以单独的出现)order by ……..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行顺序</strong>：</p><ol><li>   首先执行where语句过滤原始数据</li><li>   执行group by进行分组</li><li>   执行having对分组数据进行操作</li><li>   执行select选出数据</li><li>   执行order by排序</li></ol><p><strong>原则</strong>：能在where中过滤的数据，尽量在where中过滤，效率较高。having的过滤是专门对分组之后的数据进行过滤的。</p><h1 id="数据库注意事项"><a href="#数据库注意事项" class="headerlink" title="数据库注意事项"></a>数据库注意事项</h1><ul><li>Mysql默认情况下大小写不敏感</li><li>条件操作时，表达式具有优先级，如果想优先执行的语句，可以使用<code>( )</code>括起来。</li><li></li></ul><h1 id="mysql案例"><a href="#mysql案例" class="headerlink" title="mysql案例"></a>mysql案例</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span>创建student和score表<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student      <span class="token punctuation">(</span> Id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span><span class="token string">'学号'</span><span class="token punctuation">,</span>Name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span><span class="token string">'姓名'</span><span class="token punctuation">,</span>Sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'性别'</span><span class="token punctuation">,</span>    Birth <span class="token keyword">year</span> <span class="token keyword">comment</span><span class="token string">'出生年份'</span><span class="token punctuation">,</span>    Department <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'院系'</span><span class="token punctuation">,</span>    Address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'家庭住址'</span><span class="token punctuation">,</span>      <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score      <span class="token punctuation">(</span> Id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span><span class="token string">'编号'</span><span class="token punctuation">,</span>Stu_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span><span class="token string">'学号'</span><span class="token punctuation">,</span>C_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'课程名'</span><span class="token punctuation">,</span>    Grade <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'分数'</span><span class="token punctuation">,</span>      <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">2.</span>为student表和score表增加记录<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">901</span><span class="token punctuation">,</span><span class="token string">'张老大'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">1985</span><span class="token punctuation">,</span><span class="token string">'计算机系'</span><span class="token punctuation">,</span> <span class="token string">'北京市海淀区'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">902</span><span class="token punctuation">,</span><span class="token string">'张老二'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">1986</span><span class="token punctuation">,</span><span class="token string">'中文系'</span><span class="token punctuation">,</span> <span class="token string">'北京市昌平区'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">903</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">1990</span><span class="token punctuation">,</span><span class="token string">'中文系'</span><span class="token punctuation">,</span> <span class="token string">'湖南省永州市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">904</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">1990</span><span class="token punctuation">,</span><span class="token string">'英语系'</span><span class="token punctuation">,</span> <span class="token string">'辽宁省阜新市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">905</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">1991</span><span class="token punctuation">,</span><span class="token string">'英语系'</span><span class="token punctuation">,</span> <span class="token string">'福建省厦门市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">906</span><span class="token punctuation">,</span><span class="token string">'王六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">1988</span><span class="token punctuation">,</span><span class="token string">'计算机系'</span><span class="token punctuation">,</span> <span class="token string">'湖南省衡阳市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查询student表所有记录</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">#查询student表的第2条到第4条记录</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">#从student表查询所有学生的学号（id）、姓名（name）和院系（department）的信息</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> department <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">#6.从student表中查询计算机系和英语系的学生的信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> student <span class="token keyword">where</span> department <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'计算机系'</span><span class="token punctuation">,</span><span class="token string">'英语系'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#7.从student表中查询年龄18~22岁的学生信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span>birth<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">18</span> <span class="token operator">and</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token comment">#从student表中查询每个院系有多少人</span><span class="token keyword">select</span> department <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">group</span> <span class="token keyword">by</span> department<span class="token punctuation">;</span><span class="token comment">#9从score表中查询每个科目的最高分</span><span class="token keyword">SELECT</span> C_name<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span><span class="token keyword">FROM</span> score<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> C_name<span class="token comment">#10 查询李四的考试科目（c_name）和考试成绩（grade）</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>r<span class="token punctuation">.</span>C_name<span class="token punctuation">,</span>r<span class="token punctuation">.</span>grade <span class="token keyword">from</span> student s<span class="token punctuation">,</span>score r <span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token operator">and</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">#11.用连接的方式查询所有学生的信息和考试信息</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span>  score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>Stu_id <span class="token operator">and</span> r<span class="token punctuation">.</span>C_name <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">and</span> r<span class="token punctuation">.</span>grade <span class="token operator">&lt;</span> <span class="token number">95</span><span class="token punctuation">;</span><span class="token comment">#12 计算每个学生的总成绩</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>Name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Grade<span class="token punctuation">)</span><span class="token keyword">FROM</span> student t <span class="token keyword">JOIN</span> score e<span class="token keyword">on</span> t<span class="token punctuation">.</span>Id <span class="token operator">=</span> e<span class="token punctuation">.</span>Stu_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>Name<span class="token punctuation">`</span><span class="token comment">#13计算每个考试科目的平均成绩</span><span class="token keyword">select</span> c_name <span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">group</span> <span class="token keyword">by</span> c_name<span class="token punctuation">;</span><span class="token comment">#查询计算机成绩低于95的学生信息</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span>  score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>Stu_id <span class="token operator">and</span> r<span class="token punctuation">.</span>C_name <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">and</span> r<span class="token punctuation">.</span>grade <span class="token operator">&lt;</span> <span class="token number">95</span><span class="token punctuation">;</span><span class="token comment">#由于此处以成绩做判断，所以以分数作为主表</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>Name<span class="token punctuation">`</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span>C_name<span class="token punctuation">,</span>s1<span class="token punctuation">.</span>Grade<span class="token keyword">FROM</span> student s <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score s1<span class="token keyword">on</span> s<span class="token punctuation">.</span>Id <span class="token operator">=</span> s1<span class="token punctuation">.</span>Stu_id<span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>C_name <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">AND</span> s1<span class="token punctuation">.</span>Grade <span class="token operator">&lt;</span> <span class="token number">95</span><span class="token comment">#查询同时参加计算机和英语考试的学生的信息</span><span class="token number">1.</span>查询参加计算机<span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token keyword">where</span> r<span class="token punctuation">.</span>c_name <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">;</span><span class="token number">2.</span>将<span class="token number">1</span>作为表，查询参加英语的     <span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> score r <span class="token keyword">right</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token keyword">where</span> r<span class="token punctuation">.</span>c_name <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span> s <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token keyword">where</span> r<span class="token punctuation">.</span>c_name <span class="token operator">=</span> <span class="token string">'英语'</span><span class="token punctuation">;</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token keyword">where</span> r<span class="token punctuation">.</span>c_name <span class="token operator">=</span><span class="token string">'计算机'</span><span class="token punctuation">)</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> score r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>stu_id <span class="token keyword">where</span> c_name <span class="token operator">=</span> <span class="token string">'英语'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>name1 <span class="token punctuation">,</span>s<span class="token punctuation">.</span>s1<span class="token punctuation">,</span>s1<span class="token punctuation">.</span>C_name<span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>Id id<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>Name<span class="token punctuation">`</span> name1<span class="token punctuation">,</span>s1<span class="token punctuation">.</span>C_name s1<span class="token keyword">FROM</span> student s <span class="token keyword">left</span> <span class="token keyword">JOIN</span> score s1<span class="token keyword">on</span> s<span class="token punctuation">.</span>Id <span class="token operator">=</span> s1<span class="token punctuation">.</span>Stu_id<span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>C_name<span class="token operator">=</span><span class="token string">'计算机'</span><span class="token punctuation">)</span> s<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score s1<span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> s1<span class="token punctuation">.</span>Stu_id<span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>C_name<span class="token operator">=</span><span class="token string">'英语'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day7_Tomcat+servlet</title>
      <link href="/2021/04/09/ying-ge/day7-tomcat/"/>
      <url>/2021/04/09/ying-ge/day7-tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍Servlet + Tomcat服务器</p><span id="more"></span><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><ul><li>Servlet是JavaEE规范之一</li><li>是运行在服务器上的一个java小程序，<strong>可以接收客户端发送过来的请求，并相应数据给客户端</strong></li></ul><h2 id="Servlet的运行流程："><a href="#Servlet的运行流程：" class="headerlink" title="Servlet的运行流程："></a>Servlet的运行流程：</h2><p>​    <web_test_04></p><ul><li><p>Servlet一般是由浏览器发起调用的，在浏览器发起调用的时候会创建servlet的实例，servlet实例由容器创建的(tomcat服务器)</p><p>  <strong>调用构造方法即创建当前类的实例</strong></p></li><li><p>  1.先由浏览器发起调用，tomcat服务器在接收到浏览器的请求之后，会创建servlet对应资源的实例，</p></li><li><p>  2.创建完servlet实例，会调用默认的初始化方法init()方法</p></li><li><p>3.初始化方法执行完毕，一定会执行servce方法 ， 请求分发处理方法，<strong>根据浏览器不同的提交类型执行不同的方法</strong></p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">通过request接收前端表示    <span class="token class-name">String</span> flag <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据前端接收到的表示，完成请求的分发处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">=</span> <span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行对应方法</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">=</span> <span class="token string">"addlist"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行另一方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  4.当tomcat服务器关闭的时候，执行销毁的方法destroy()</p></li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><ul><li>tomcat 是一款服务器，java包需要上传tomcat才可使用<ul><li>要想使用必须要有环境变量</li></ul></li></ul><h2 id="使用Tomcat"><a href="#使用Tomcat" class="headerlink" title="使用Tomcat"></a>使用Tomcat</h2><ol><li>创建一个新文件夹，存放Tomcat安装包</li><li>在环境变量中新建<code>JAVA_HOME</code>，编辑值为<code>jdk安装目录，一般在C://Program Files/JAVA</code>中</li><li>在Tomcat <code>bin目录</code>下点击startUp.bat启动，shutDown.bat停止</li></ol><h2 id="Tomcat文件包"><a href="#Tomcat文件包" class="headerlink" title="Tomcat文件包"></a>Tomcat文件包</h2><ul><li><p>bin 专门用来存放Tomcat可执行程序</p></li><li><p>conf 专门用来存放配置文件</p></li><li><p>lib 专门用来存放jar包</p></li><li><p>webapps <strong>专门用来存放部署的web工程</strong></p></li><li><p>work  Tomcat 工作室目录</p></li><li><p>conf/server.xml  可更改端口号</p></li></ul><h2 id="Tomcat启动方式"><a href="#Tomcat启动方式" class="headerlink" title="Tomcat启动方式"></a>Tomcat启动方式</h2><ul><li>在bin目录下点击startup.bat</li><li>在bin目录下使用<code>catalina run</code>命令</li></ul><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>每个Jar包是对应的组织封装的工具类</p><ul><li>servlet包完成前后端交互 </li><li>taglibs包添加样式</li></ul><h2 id="搭建Web工程步骤"><a href="#搭建Web工程步骤" class="headerlink" title="搭建Web工程步骤"></a>搭建Web工程步骤</h2><h3 id="创建Web工程"><a href="#创建Web工程" class="headerlink" title="创建Web工程"></a>创建Web工程</h3><ul><li><p>new 一个普通java工程</p></li><li><p>对创建的工程右击，选择Add Framework Suppot,导入动态web依赖</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/135458-173464.png" alt="image-20210409135457888"></p></li><li><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/222128-749873.png" alt="image-20210409222127696"></p></li></ul><ul><li><p>选中 Web appliction 动态web，会出现以下文件</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/135552-142147.png" alt="image-20210409135551275"></p><ul><li>WEB-INF是受保护的文件，外界不可访问，<strong>一般用于导入第三方类</strong></li><li>web文件夹主要是写一些静态的前端页面</li></ul></li></ul><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><ul><li><p>把存放jar包的目录放在web-info下</p></li><li><p>复制jar包到WEB_INF,然后右击add </p></li><li><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/144337-531477.png" alt="image-20210409144336210"></p></li></ul><ul><li><p>在Tomcat中也需要导入jar包，点击idea右上角<code>Project Structure</code></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/15/113651-57796.png" alt="Tomcat Jar包导入"></p></li></ul><h3 id="部署TomCat界面"><a href="#部署TomCat界面" class="headerlink" title="部署TomCat界面"></a>部署TomCat界面</h3><ul><li>选择 Add Cpnfigurtion,，点击加号，选择Tomcat Server服务器</li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/140522-675226.png" alt="image-20210409140504689"></p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/141430-628059.png" alt="image-20210409140524033"></p><ul><li>进入Server,点击Configureation选择Tomcat解压路径<ul><li>进入Open browser选择默认浏览器，并取消勾选After launch，</li><li>URL显示的为当前服务打开的网址,</li></ul></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/141142-120273.png" alt="image-20210409140801986"></p><ul><li>在Deployment（部署）中选择Artiface,设定</li></ul><img src="C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210409140923557.png" alt="image-20210409140923557"  /><ul><li>设定工程路径，在此处更改，<strong>URL也会跟随更改</strong></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/09/142004-76608.png" alt="image-20210409141012723"></p><h2 id="前端访问后端资源"><a href="#前端访问后端资源" class="headerlink" title="前端访问后端资源"></a>前端访问后端资源</h2><h3 id="web-xml中注册后端资源路径"><a href="#web-xml中注册后端资源路径" class="headerlink" title="web.xml中注册后端资源路径"></a>web.xml中注册后端资源路径</h3><ol><li><p>在src中创建一个类，并使其继承<code>HttpServlet</code>类，<code>HttpServlet</code>类是<code>Servlet</code>接口的具体实现类</p></li><li><p>重写父类的Service方法，客户端在访问服务器资源时一定会执行此方法。</p><ul><li><p><code>service方法</code>为请求分发处理，在底层，根据浏览器发出的请求作出不同的处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//此语句如果前端请求后端资源成功，此语句会打印在控制台</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前端请求后端资源成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ol start="3"><li><p>在<code>web文件夹下web.xml</code>中注册后端资源，这是必须要做的</p><ul><li><p>注册后端资源</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    起始标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--后端资源的标识  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--后端具体资源的权限定类名，简称为全类名  可以在需要注册的类上右击选择copy,copy reference 快捷键 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wufan.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--/结束标签    --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供资源访问路径</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--提供访问资源路径  给前端提供访问后端资源的路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--跟上面的标识保持一致--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注意添加/，/不存在则找不到资源路径--></span>        <span class="token comment">&lt;!--前端访问的资源路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span> /hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="类中注解注册后端资源路径"><a href="#类中注解注册后端资源路径" class="headerlink" title="类中注解注册后端资源路径"></a>类中注解注册后端资源路径</h3><ul><li>可以通过加注解的形式注册后端资源路径（效果等同于web.xmlservlet）</li></ul><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="上下文文本对象-域对象"><a href="#上下文文本对象-域对象" class="headerlink" title="上下文文本对象(域对象)"></a>上下文文本对象(域对象)</h1><ul><li><p><code>ServletContext</code>是Servlet上下文文本对象，即域对象</p></li><li><p>域对象：可以像map集合一样存储数据，以键值对形式存储</p></li><li><p>ServletContext对象在整个工程下是单例的，取值范围是整个Web工程，<strong>无论在工程内的哪个类都可以写入或者访问创建的域对象</strong></p></li><li><p>Request也是一个域对象，但是这个域对象取值范围只能是一次请求范围之内（<strong>只有在转发的时候才能取到数据</strong>）</p></li></ul><h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><p><code>ServletContext</code>对象取值作用范围是整个web工程，在不同的类中可以调用此对象获取值或写值</p><h3 id="对象获取"><a href="#对象获取" class="headerlink" title="对象获取"></a>对象获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//上下文文本对象创建</span><span class="token comment">//方法1 调用getServeltConfig.getServletContext()方法</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> getServletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2 直接调用getServletContext()方法，在底层此方法指向方法1</span><span class="token class-name">ServletContext</span> servletContext1 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读写方法"><a href="#读写方法" class="headerlink" title="读写方法"></a>读写方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//写入</span><span class="token comment">//创建完对象后，使用setAttribute(key,value)方法写入,类比map集合的put方法</span>servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取</span><span class="token comment">//通过键获取值</span><span class="token class-name">Object</span> key1 <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果想要存放数据库数据到域对象，可以创建一个集合，将数据存放集合，再将集合传给域对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Get-Post请求"><a href="#Get-Post请求" class="headerlink" title="Get.Post请求"></a>Get.Post请求</h1><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><ul><li>get请求没有请求体，因为把请求封装在<strong>地址栏</strong>上</li></ul><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><ul><li>请求体 ：发送给服务器的数据</li></ul><h2 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h2><ul><li>响应行<ul><li>响应的协议和版本号</li><li>响应状态码</li><li>响应状态描述符</li></ul></li><li>响应头 key:value 不同的请求头，不同的含义</li><li>响应体： 回传给客户端的数据</li></ul><h2 id="常用请求头说明"><a href="#常用请求头说明" class="headerlink" title="常用请求头说明"></a>常用请求头说明</h2><ul><li><code>accept</code>  表示客户端可以接受的数据类型</li><li><code>Accept-Language</code>  表示客户端可以接收的语言类型</li><li><code>User-Agent</code>  表示客户端浏览器的信息</li><li><code>Host</code>  表示请求时的服务器Ip和端口号</li></ul><h2 id="常用响应码说明"><a href="#常用响应码说明" class="headerlink" title="常用响应码说明"></a>常用响应码说明</h2><ul><li><p>200 请求成功</p></li><li><p>302 表示请求重定向</p></li><li><p>404 表示请求服务器已经收到了，但是数据不存在（请求地址错误）</p></li><li><p>500   服务器已经收到请求，但是服务器内部错误（代码错误）</p></li></ul><h1 id="HelloServletRequest"><a href="#HelloServletRequest" class="headerlink" title="HelloServletRequest"></a>HelloServletRequest</h1><ul><li>每次有请求进入Tomcat服务器，Tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中。然后传递到service方法(<code>doGet 和 doPost</code>)中给我们使用</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p><code>getRequestURI()</code>  获取请求的资源路径，即<strong>类所在路径</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> requestURI <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">req<span class="token punctuation">.</span></span>RequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值</span><span class="token operator">/</span>hello5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>getRequestURL()</code>  获取请求的同一资源定位符（绝对路径）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> requestURL <span class="token operator">=</span> <span class="token class-name">Req<span class="token punctuation">.</span>RequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>hello5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>getRemostHost()</code> 获取客户端ip地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> remoHost <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRemostHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>getParameter()</code> 获取请求的参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取请求的参数</span><span class="token class-name">String</span> flag <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据请求分发处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> falg <span class="token operator">=</span> <span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行方法</span><span class="token punctuation">&#125;</span>eles <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">=</span> <span class="token string">"addlist"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行另一种方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><code>getParameterValues()</code> 获取请求的参数（多值）</p></li><li><p><code>getMethod()</code> 获取请求的方式GET或POST</p></li><li><p><code>getRequestDispatcher()</code>  获取请求转发对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//转发方法 （）内为相对路径，req只能一次转发</span><span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/hello6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问具体的资源 传入当前的请求，响应对象</span><span class="token function">requestDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="HttpServletRespnose"><a href="#HttpServletRespnose" class="headerlink" title="HttpServletRespnose"></a>HttpServletRespnose</h1><ul><li>每次有请求时，Tomcat服务器都会床架一个Response对象传递给Servlet程序使用，HttpServletRequesdt表示请求过来的信息，HttpServletResponse表示所有响应的信息。</li><li><strong>设置返回给客户端的信息</strong></li></ul><h2 id="往客户端回传数据"><a href="#往客户端回传数据" class="headerlink" title="往客户端回传数据"></a>往客户端回传数据</h2><ul><li><p>字节流 <code>getOutputStream()</code></p><ul><li>·用于下载（传递二进制数据）</li></ul></li><li><p>字符流 <code>getWriter</code></p><ul><li><p><strong>用于回传字符串，将数据或者域对象回传给浏览器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span>getWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>要传递的数据<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="处理响应中文乱码"><a href="#处理响应中文乱码" class="headerlink" title="处理响应中文乱码"></a>处理响应中文乱码</h2><p><code>resp.setContentType(&quot;text/html;charset=UTF-8&quot;)</code></p><h1 id="转发的两种方式"><a href="#转发的两种方式" class="headerlink" title="转发的两种方式"></a>转发的两种方式</h1><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><ul><li><p>客户端给服务器发送请求，服务器告诉客户端去新地址访问，跳转到新地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//重定向语句，（）内是绝对地址</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><ul><li><p>服务器收到请求后，从一个资源跳转到另一个资源的操作叫请求转发</p></li><li><p>Request具有请求转发方法 <code>request.getRequestDispatcher(/hello1)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> r1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatchar</span><span class="token punctuation">(</span><span class="token string">"相对路径"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span>requset<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>forword方法用于将请求转发到RequesDspatcher对象封装的资源</p></li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>重定向是指向绝对路径，一般用于当前网页已经不再使用，可以无限次转发</li><li>请求转发指向相对路径，<strong>一次转发</strong></li></ul><h1 id="Web注意"><a href="#Web注意" class="headerlink" title="Web注意"></a>Web注意</h1><h2 id="使用Servlet传输数据库数据到浏览器"><a href="#使用Servlet传输数据库数据到浏览器" class="headerlink" title="使用Servlet传输数据库数据到浏览器"></a>使用Servlet传输数据库数据到浏览器</h2><ul><li><p>使用JDBC六步获取数据（此处可以通过封装工具类）</p><ul><li><strong>注：要注意向TomCat导入jar包</strong></li></ul></li><li><p>创建集合接收sql数据，可以通过封装一个类，变量与sql一致，在遍历时将数据传入此类，再将此类传入集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历结果集</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     <span class="token class-name">Integer</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">String</span> password <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//创建User对象</span>                   <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//赋值</span>                   user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                   user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//存放对象到集合 每次遍历时都会将结果传到集合</span>                   arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重定向至其他页面</p><ul><li><p>首先获取域对象</p><p><code>ServletContext servletContext = getServletConfig().getServletContext();</code></p></li><li><p>往域对象中存值</p><p><code>servletContext.setAttribute(&quot;users&quot;,arrayList);</code></p></li><li><p>请求重定向</p><p><code>resp.sendRedirect(&quot;http://localhost:8080/user22&quot;);</code></p></li><li></li></ul></li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li>当从数据库接收到数据后，要将其转化为集合，前端响应时传递集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day6_Map方法</title>
      <link href="/2021/04/08/ying-ge/day6/"/>
      <url>/2021/04/08/ying-ge/day6/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Map sd</p><span id="more"></span><h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><p>引用 </p><ul><li>Map接口和Collection接口是平级的，包含了Key-value对。</li></ul><h2 id="Map方法"><a href="#Map方法" class="headerlink" title="Map方法"></a>Map方法</h2><ul><li><p><code>map.put(键，值)</code>    添加元素</p><ul><li>在此映射中关联键与值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span> <span class="token string">"name"</span>是键，<span class="token string">"jack"</span>是值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/08/141625-539910.png" alt="key - value"></p></li><li><p><code>map2.putall(map)</code></p><ul><li>将一个集合的元素传给另一个集合，即复制集合中的所有内容</li></ul></li></ul><ul><li><code>int size = map.size()</code><ul><li>获取集合的长度</li></ul></li></ul><ul><li><p><code>containsKey(Object key)</code></p><ul><li>判断集合是否包含某一个Key，包含返回true</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><code>containsValue(Object value)</code><ul><li>判断集合是否包含某一个value</li></ul></li></ul><ul><li><p><code>map.equals(map2)</code></p><ul><li>判断两个集合的内容是否相同，相同返回true</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">euqals</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><code>map.get(Obeject Key)</code></p><ul><li>根据key的值获取value</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">Object o &#x3D; map.get(&quot;name&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><code>map.remove(Obeject Key)</code></p><ul><li>根据Key删除value,并返回value</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token comment">//返回</span>jack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>map.values()</code></p><ul><li>返回的是map的values（值）集合，可用for循环遍历</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">Collection values &#x3D; map.values();for (Object o : values)&#123;    System.out.println(o);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Map遍历方式"><a href="#Map遍历方式" class="headerlink" title="Map遍历方式"></a>Map遍历方式</h2><ol><li><p>通过key值去迭代</p><ol><li><p>获取Key集合，只有 获取key集合，才能通过Key去迭代</p><ul><li>由与HashMap是无序集合，其返回值类型为Set,并且可以为其指定泛型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//keySet方法 返回所包含的键的集合，返回值类型为Set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建迭代器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进行遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//通过next方法获取键</span>    <span class="token class-name">Object</span> name <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过get方法获取值</span>    <span class="token class-name">Object</span> values <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出对应关系</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><ol start="2"><li><p>直接使用 键-值映射关系遍历</p><ol><li><p>获取map的键值映射关系 </p><ul><li>由于HashMap.entrtSet()返回值类型为Set,所以需要为其设置返回值类型为Set，</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 for循环去遍历</p><ul><li>for的数据类型为 <code>&lt;Map.Entry&lt;String,object&gt;</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token operator">:</span> entry <span class="token operator">:</span>entries<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//使用getKey()获取键，使用getValues()获取值</span>    <span class="token class-name">Object</span> name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> values <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="hashMap"><a href="#hashMap" class="headerlink" title="hashMap"></a>hashMap</h2><ul><li>HashMap的key是不允许重复的，value可以重复，value只是Key的替代品</li><li>hashMap的值可以为空</li></ul><h3 id="hashMap存储过程"><a href="#hashMap存储过程" class="headerlink" title="hashMap存储过程"></a>hashMap存储过程</h3><p>调用put方法后，底层调用hashCode生成hash值。</p><p>hash值会确定当前节点存放在数组的哪个位置上，如果当前数组节点没有元素的话，就直接存入；</p><p>如果有元素，则根据当前节点node的key依次进行比较(equals).如果key相同，新的节点覆盖旧的节点，这也是hashMap方法不允许重复的原因。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/08/161921-416089.png" alt="hash散列表"></p><p><a href="https://blog.csdn.net/nn1__2970/article/details/87903950">https://blog.csdn.net/nn1__2970/article/details/87903950</a></p><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><ul><li><p>TreeSet是Set方法的具体实现类</p></li><li><p>通过TreeSet存放元素会自动排序</p></li><li><p>TreeSet会根据字符串首字母进行排序，不区分大小写</p></li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>Properties也是Map集合，但是只能是String类型。</li></ul><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><ul><li><p>哈希散列表：<strong>根据关键码值(Key value)而直接进行访问的数据结构，通过把关键码值映射到表中的一个位置来访问记录，以加快查找的速度</strong></p></li><li><p>hash散列表是由数组和单向列表组成：</p><ul><li>数组优点：查询效率高，随机增删效率低</li><li>链表的优点：随机增删效率高，查询效率低</li></ul></li><li><p>哈希散列表 拥有数组和链表的优点，查询效率高，随机增删</p></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li>通过hashcode将键转化为相应的哈希值，要查找键时，通过哈希值查找</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day5_集合+自动装箱</title>
      <link href="/2021/04/06/ying-ge/day5/"/>
      <url>/2021/04/06/ying-ge/day5/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>自动装箱、自动拆箱、集合、哈希表</p><span id="more"></span><h1 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h1><ul><li>自动将基本数据类型转换为引用数据类型</li><li>在集合中通常都会将数据自动装箱为引用数据类型</li></ul><ul><li><p> java中所有的基本数据类型（int,double,float,double,String,char,short,long）都有对应的包装类</p></li><li></li><li><p> <strong>除了int –&gt;Interger ,char–&gt;Character外,其余所有数据类型自动装箱皆为首字母大写</strong></p></li><li><p>int 基本数据类型  –&gt; Integer 包装类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自动装箱</span><span class="token class-name">Integer</span> total <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>等同于<span class="token class-name">Integer</span> total <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valusOf</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动拆箱</span><span class="token keyword">int</span> total1 <span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token keyword">int</span> total1 <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>double基本数据类型 –&gt;Double包装类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//double 基本数据类型 可浮点型可不浮点型</span><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//Double 引用数据类型 必须写成浮点型</span><span class="token class-name">Double</span> a1 <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>char 基本数据类型 –&gt;Character包装类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//char基本数据类型 </span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment">//char 引用数据类型 写法与char</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h1><ul><li><p>自动将包装器类型转换为基本数据类型</p></li><li><p>将引用数据赋值给基本数据类型时，会将引用数据类型拆解为基本数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Double</span> d2 <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> d2<span class="token punctuation">;</span> <span class="token comment">//此时实际上是将值传递给d3,而不是地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="装箱后数据类型方法"><a href="#装箱后数据类型方法" class="headerlink" title="装箱后数据类型方法"></a>装箱后数据类型方法</h1><ul><li><p>int —-&gt;  Integer</p><ul><li>Integer.parseInt(s)  将字符串对象转换成整型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Integer.parseInt()将字符串转换成整型，Double也有此方法</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Strig</span><span class="token punctuation">(</span><span class="token string">"56"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> parseInt <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Integer.toBinaryString(6)  将整型数据转换成二进制字符串  <strong>接收类型必须为字符串</strong></p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将656转换成二进制字符串</span><span class="token class-name">String</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">656</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果</span><span class="token number">1010010000</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  <code>Integer.toUnsignedString(需要转换的数据,转换的进制); </code></li></ul><p>  ​    将整型数据转换成r进制字符串  <strong>接收类型必须为字符串</strong></p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将整型数据转换成r进制字符串</span>        <span class="token class-name">String</span> p3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li><p>集合是一个容器，可以存放所有类型的数据，而且是不同数据类型</p><p>集合只能存放引用数据类型，但基本数据类型可以使用自动装箱存入集合</p></li></ul><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><ul><li>集合的顶层父接口，没有直接实现类<ul><li>Set:Collection的子接口，不记录元素位置，无序状态,不可重复，查找效率低</li><li>List：Collection的子接口，是一个有序的集合，可包含重复的元素，提供了按索引访问的方式。</li></ul></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List接口下有三个实现类 ：<strong>ArrayList,LinkedList,Vector</strong></p><ul><li>Vector 线程同步的动态数组，效率很低</li><li>ArrayList 实现一个动态数组，它的规模可变并且可以和链表一样被访问，允许快速随机存取，<strong>读快改慢</strong></li><li>LinkedList  提供最佳顺序存取，适合插入和移除元素。<strong>改快读慢</strong></li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p>ArrayList是List接口的一个子类，也是一个具体实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个类对象</span><span class="token class-name">ArrayList</span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="ArrayList-Vector异同"><a href="#ArrayList-Vector异同" class="headerlink" title="ArrayList,Vector异同"></a>ArrayList,Vector异同</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>底层封装了数组，具备数组的所有特性，数组可以通过查找下标读取元素，因此数组查询效率较高，但增删改效率较低。</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p><strong>ArrayList</strong>: </p><ul><li>线程不安全的list集合，效率比较高（以后开发中可以通过别的途径解决线程问题）</li><li>扩容机制： ArrayList初始长度为10，扩若时<strong>按1.5倍扩容</strong> 10* 1.5 = 15 (创建对象的时候可以改变其长度 )</li></ul><p><strong>Vector</strong>:</p><ul><li><p>线程安全的list集合，效率较低（因为在其方法中都添加了线程synchronized关键字）</p></li><li><p>扩容机制：Vector初始长度为10，扩容时<strong>按2倍扩容</strong> 10*2 = 20</p></li></ul><h3 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h3><ul><li>LinkList底层封装了链表</li><li>以节点的形式存放数据，随机增加，删除，修改，效率较高，查询效率较低！<strong>改快读慢</strong></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/06/145248-894538.png" alt="链表"></p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><ul><li><p> <code>list.add()</code>   </p></li><li><p>作用：<strong>添加数据</strong>     可添加任意数据，只要是引用数据类型即可，包括添加类对象</p></li><li><p><strong>只有List才有此方法，set是无序集合，无此方法，所以父类Collection也无此方法</strong></p></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实例化对象 由于Collection是接口，无法实例化对象，需要指向其子类（的子类）</span><span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加数据 实例.add();</span>collerction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//自动装箱，引用数据类型 Integer i = Integer.valusOf();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  <code>list.clear</code>    清空集合   <strong>此方法是所有集合都拥有的方法</strong></li><li>作用：<strong>清空集合</strong></li></ul><ul><li><code>boolean empty = list.isEmpty()</code>  <ul><li>作用：<strong>判断当前集合是否为空</strong></li><li><strong>由于是布尔类型的返回值，需要用布尔类型接收</strong></li></ul></li></ul><ul><li><code>list.remove(集合中元素)</code><ul><li>作用：<strong>删除集合中的元素</strong></li><li><strong>注意：在遍历集合时不能更改集合的元素，否则会改变迭代器状态，产生报错</strong></li></ul></li></ul><h3 id="遍历集合方法"><a href="#遍历集合方法" class="headerlink" title="遍历集合方法"></a>遍历集合方法</h3><ul><li>迭代器循环<ul><li><strong>在迭代器中无法使用集合自身方法更改集合，包括增删改，必须要使用迭代器自身方法进行更改，更改之后，重新遍历才会产生结果</strong></li><li><strong>迭代器在使用之前，必须获取迭代器对象</strong></li><li>迭代器方法：<ul><li><code>iterator.hasNext()</code>  如果仍有元素可以迭代，返回true</li><li><code>iterator.next()</code>        返回迭代的下一元素，指针继续移动一格</li><li><code>iterator.remove()</code>迭代器自身的删除方法，删除后需要重新迭代才可看出变化</li></ul></li></ul></li></ul><ul><li>加强for循环<ul><li><code>for(ElementType element:arrayName)&#123;&#125;</code></li><li>ElementType 元素类型  element 元素变量</li><li>arrayName  需要循环的集合</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">法<span class="token number">1</span><span class="token comment">//获取迭代器对象</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断集合内下一个元素是否为空，最开始没有指向任何元素，如果不为空，返回true</span><span class="token keyword">while</span><span class="token punctuation">(</span>iteratoer<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//.next返回下一节点的元素，指针往下走一格</span>    <span class="token class-name">Object</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>法<span class="token number">2</span> 加强<span class="token keyword">for</span>循环实现遍历集合<span class="token comment">//加强for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> 集合<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>法<span class="token number">3</span> 普通<span class="token keyword">for</span>循环  <span class="token comment">//适用于有序集合 List</span><span class="token comment">//创建集合对象 父类的引用指向子类的对象</span><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//list.size()获取集合长度，便于遍历</span>    <span class="token comment">//list.get(i)有序集合按照索引访问数据，从0开始</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>Set接口有HashSet和TreeSet两个实现类</li><li>HashSet可以快速定位一个元素，<strong>无序不可重复</strong>，底层是HashMap,存放的值在HashMap的Key部分</li><li>TreeSet 将放入其中的元素按序存放，加入了对象比较的方法。通过对集中的对象迭代，可以得到一个升序的集合。</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>作用： 快速定位一个元素</li><li>特点：无序不可重复，底层是HashMap,存放的值在HashMap的Key部分</li></ul><h3 id="TreeSet（未完，与HashSet一样写，并加入比较方法）"><a href="#TreeSet（未完，与HashSet一样写，并加入比较方法）" class="headerlink" title="TreeSet（未完，与HashSet一样写，并加入比较方法）"></a>TreeSet（未完，与HashSet一样写，并加入比较方法）</h3><ul><li>作用：将放入其中的元素按序存放。</li><li>特点：拥有对象比较方法，通过对集中的对象迭代，可以得到一个升序的对象集合。<ul><li>自定义类的话必须要<strong>实现</strong>比较接口，<strong>重写</strong>比较规则，底层是TreeMap，存放的值是TreeMap的key部分。</li></ul></li></ul><h4 id="自定义类的比较方法"><a href="#自定义类的比较方法" class="headerlink" title="自定义类的比较方法"></a>自定义类的比较方法</h4><ul><li>自定义类必须要<strong>实现</strong>Comparable接口</li><li>自定义类必须要重写compareTo方法<ul><li>如果是整型数据，通过二叉树判断，返回结果大于0，比较值放在被比较值后(<strong>正序</strong>)；返回结果小于0，比较值放在被比较值前（<strong>逆序</strong>）。</li></ul></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型： 强制集合只存放某一种数据类型，即不再需要强制转换</li><li>作用：在集合迭代时不需要向下转型</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//采用泛型创建集合对象  </span><span class="token comment">//&lt;>称为钻石表达式，写入值存放的数据类型。</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="泛型好处"><a href="#泛型好处" class="headerlink" title="泛型好处"></a>泛型好处</h3><ul><li>代码更加简洁【不用强制转换】</li><li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li><li>可读性和稳定性【在编写集合的时候，就限定了类型】</li></ul><h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><ul><li>Map接口有<strong>HashMap,HashTable和TreeMap等实现类</strong></li></ul><h2 id="Map实现类选择"><a href="#Map实现类选择" class="headerlink" title="Map实现类选择"></a>Map实现类选择</h2><ul><li>元素顺序很重要时选 TreeMap，</li><li>元素不比以特定顺序存储时使用HashMap。</li><li>HashMap不同步，HashTable同步，HashMap提供了所有HashTable类似功能，速度更快。</li></ul><p>引用 </p><ul><li>Map接口和Collection接口是平级的，包含了Key-value对。</li></ul><h2 id="Map方法"><a href="#Map方法" class="headerlink" title="Map方法"></a>Map方法</h2><ul><li><p><code>map.put(键，值)</code>    添加元素</p><ul><li>在此映射中关联键与值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span> <span class="token string">"name"</span>是键，<span class="token string">"jack"</span>是值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/08/141625-539910.png" alt="key - value"></p></li><li><p><code>map2.putall(map)</code></p><ul><li>将一个集合的元素传给另一个集合，即复制集合中的所有内容</li></ul></li></ul><ul><li><code>int size = map.size()</code><ul><li>获取集合的长度</li></ul></li></ul><ul><li><p><code>containsKey(Object key)</code></p><ul><li>判断集合是否包含某一个Key，包含返回true</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><code>containsValue(Object value)</code><ul><li>判断集合是否包含某一个value</li></ul></li></ul><ul><li><p><code>map.equals(map2)</code></p><ul><li>判断两个集合的内容是否相同，相同返回true</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">euqals</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><code>map.get(Obeject Key)</code></p><ul><li>根据key的值获取value</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">Object o &#x3D; map.get(&quot;name&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><code>map.remove(Obeject Key)</code></p><ul><li>根据Key删除value,并返回value</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token comment">//返回</span>jack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>map.values()</code></p><ul><li>返回的是map的values（值）集合，可用for循环遍历</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">Collection values &#x3D; map.values();for (Object o : values)&#123;    System.out.println(o);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Map遍历方式"><a href="#Map遍历方式" class="headerlink" title="Map遍历方式"></a>Map遍历方式</h2><ol><li><p>通过key值去迭代</p><ol><li><p>获取Key集合，只有 获取key集合，才能通过Key去迭代</p><ul><li>由与HashMap是无序集合，其返回值类型为Set,并且可以为其指定泛型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//keySet方法 返回所包含的键的集合，返回值类型为Set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建迭代器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进行遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//通过next方法获取键</span>    <span class="token class-name">Object</span> name <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过get方法获取值</span>    <span class="token class-name">Object</span> values <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出对应关系</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><ol start="2"><li><p>直接使用 键-值映射关系遍历</p><ol><li><p>获取map的键值映射关系 </p><ul><li>由于HashMap.entrtSet()返回值类型为Set,所以需要为其设置返回值类型为Set，</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 for循环去遍历</p><ul><li>for的数据类型为 <code>&lt;Map.Entry&lt;String,object&gt;</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token operator">:</span> entry <span class="token operator">:</span>entries<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//使用getKey()获取键，使用getValues()获取值</span>    <span class="token class-name">Object</span> name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> values <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="hashMap"><a href="#hashMap" class="headerlink" title="hashMap"></a>hashMap</h2><ul><li>HashMap的key是不允许重复的，value可以重复，value只是Key的替代品</li><li>hashMap的值可以为空</li></ul><h3 id="hashMap存储过程"><a href="#hashMap存储过程" class="headerlink" title="hashMap存储过程"></a>hashMap存储过程</h3><p>调用put方法后，底层调用hashCode生成hash值。</p><p>hash值会确定当前节点存放在数组的哪个位置上，如果当前数组节点没有元素的话，就直接存入；</p><p>如果有元素，则根据当前节点node的key依次进行比较(equals).如果key相同，新的节点覆盖旧的节点，这也是hashMap方法不允许重复的原因。</p><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/08/161921-416089.png" alt="hash散列表"></p><p><a href="https://blog.csdn.net/nn1__2970/article/details/87903950">https://blog.csdn.net/nn1__2970/article/details/87903950</a></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>TreeSet是Set方法的具体实现类</p></li><li><p>通过TreeSet存放元素会自动排序</p></li><li><p>TreeSet会根据字符串首字母进行排序，不区分大小写</p></li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>Properties也是Map集合，但是只能是String类型。</li></ul><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><ul><li><p>哈希散列表：<strong>根据关键码值(Key value)而直接进行访问的数据结构，通过把关键码值映射到表中的一个位置来访问记录，以加快查找的速度</strong></p></li><li><p>hash散列表是由数组和单向列表组成：</p><ul><li>数组优点：查询效率高，随机增删效率低</li><li>链表的优点：随机增删效率高，查询效率低</li></ul></li><li><p>哈希散列表 拥有数组和链表的优点，查询效率高，随机增删</p></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li>通过hashcode将键转化为相应的哈希值，要查找键时，通过哈希值查找</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day4_异常</title>
      <link href="/2021/04/05/ying-ge/day4/"/>
      <url>/2021/04/05/ying-ge/day4/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍了java常用的各种异常。</p><span id="more"></span><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ul><li>Java程序运行过程中发生的异常事件：<ul><li><strong>错误（Error）</strong>:JVM系统内部错误，资源耗尽等严重情况<ul><li>较严重，在代码层无法处理<ul><li>虚拟机错误 <code>VirtualMachineErroe</code></li><li>内存溢出    <code>OuyOfMemoryError</code></li><li>线程死锁  <code>ThreadDeath</code></li></ul></li></ul></li><li><strong>异常(Exception)</strong>:其他因编程错误或偶然的外在因素导致的一般性问题<ul><li>在代码层可处理<ul><li>非检查异常  编译器不要求强制处理的异常  <code>RuntimeException</code></li><li>检查异常 java要求必须要检查的异常</li></ul></li></ul></li></ul></li></ul><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><ul><li>RuntimeException<ul><li>ArithmeticException :数学计算异常</li><li><code>NullPointerException</code>空指针异常</li><li><code>ArrayIndexOuyOfBoundsException</code>数组下标越界异常</li><li><code>ClassCastException</code>类型转换异常</li></ul></li><li></li></ul><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><ul><li><pre><code>  编译时异常：基本上发生错误概率较高，java将其划分为编译时异常，要去开发人员一定要进行处理</code></pre></li><li><pre><code>  运行时异常：发生概率较低，可处理可不处理</code></pre></li></ul><ul><li>在代码层面判定编译时异常和运行时异常，就要看当前异常是否继承RuntimeException，如果继承了就是运行时异常，如果没有继承即为编译时异常。</li></ul><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul><li>JAVA中异常处理通过5个关键字实现： <code>try,catch,finally,throw,throws</code><ul><li><strong>捕获异常</strong> <ul><li><code>try</code> 执行可能产生异常的代码</li><li><code>catch</code>捕获异常</li><li><code>finally</code>无论是否发生异常代码总能执行</li></ul></li><li><strong>声明异常</strong><ul><li><code>throws</code>声明可能要抛出的异常</li></ul></li><li><strong>抛出异常</strong><ul><li><code>throw</code>手动抛出异常</li></ul></li></ul></li></ul><h3 id="try-catch方法"><a href="#try-catch方法" class="headerlink" title="try - catch方法"></a>try - catch方法</h3><ul><li><p><code>try&#123;放入需检测的代码块&#125;catch(exception的引用)&#123;&#125;final&#123;无论如何都会执行的代码块&#125;</code></p><ul><li><p>在当前位置处理异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//代码段1</span>        <span class="token comment">//产生异常的代码段2</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对异常进行处理的代码段3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//getMessage()方法是输出异常描述信息。</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        <span class="token comment">//无论如何都能执行的代码段</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在try中放入需要检测的代码块，如果出现了异常</span><span class="token comment">//则交由catch处理，如果不对异常处理，会造成程序中断，</span><span class="token comment">//当catch处写入多个异常时，子类的异常不能写在父类下面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>try块后可接0个或多个catch块，如果没有catch块，必须跟一个finally块。</p></li></ul><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><ul><li><p>语法格式 : <code>在方法名之后: throws 异常类型</code></p></li><li><p>如果一个方法会出现异常或无能力处理异常，可以在方法声明处用<code>throws</code>子句来声明抛出异常</p><ul><li><p>当方法抛出异常列表里的异常时，方法将不对这些异常进行处理，而抛向调用该方法的异常</p><p><strong>谁调用，谁处理</strong></p></li></ul></li></ul><ul><li><p>throws语句在方法定义时声明该方法要抛出的<strong>异常类型</strong>，可以有多个异常，如果出现没有声明的异常类型，java虚拟机会自动执行下去，出现异常则报错，程序终止。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FileInputStream</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果<code>throws Exception</code>，那么在调用方法处处理异常时需要声明异常类型为 <code>Exception</code>，因为方法处使用了Exception,检测到异常后，如果没有对应处理方法，则异常依旧会执行。<ul><li><strong>即声明什么异常，处理什么异常</strong></li></ul></li></ul></li></ul><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><ul><li>throw用来抛出一个异常<ul><li>例如： throw new IOException();</li></ul></li><li>throw抛出的只能够是可抛出类Throwable或者其子类的实例对象<ul><li>即：自定义异常时构造的异常方法实际上就是Throwable的子类</li></ul></li><li></li></ul><ul><li><p><strong>throw使用方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">法<span class="token number">1</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//代码段</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对异常进行处理的代码段2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>法<span class="token number">2</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类型<span class="token punctuation">&#123;</span>    <span class="token comment">//代码段1</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>throw抛出异常对象的处理方法：</li></ul><ul><li>1.自己异常，自己处理，在原处使用try-catch方法</li><li>2.向上抛出，在方法声明处添加throws Exception,在方法调用处异常处理</li><li><pre><code>此时可以抛出与throw对象相同的类型或者父类，不能是子类</code></pre></li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>以后在做开发的时候，java给我们提供的异常是不够的，要根据业务，自定义异常。</li></ul><h3 id="自定义异常步骤"><a href="#自定义异常步骤" class="headerlink" title="自定义异常步骤"></a>自定义异常步骤</h3><ul><li><p>自定义编译时异常：类使用 <code>extends</code>  继承Exception</p><ul><li><p>创建有参构造，指向父类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个编译时异常，Exception这个父类实际上继承了Throwable,message传递给了Throwable </span><span class="token comment">//定义一个异常,负数时 运行异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student_Exception</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个新的异常构造方法</span>  <span class="token comment">//由于类</span>    <span class="token keyword">public</span> <span class="token class-name">Student_Exception</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要使用异常的方法声明异常类型<ul><li>抛出异常 <code>throw 自定义的异常</code></li></ul></li></ul></li></ul></li><li><p>自定义运行时异常：类继承RuntimeException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个编译时异常，Exception这个父类实际上继承了Throwable,message传递给了Throwable</span>   <span class="token keyword">public</span> <span class="token class-name">ExceptionTest05</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同上</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">案例：    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个异常对象</span>    <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"抛出异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义年龄</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//抛出异常，使用throw 自定义异常名;</span>        <span class="token keyword">throw</span> <span class="token class-name">Student</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序正常执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day3_成员变量+内存分布</title>
      <link href="/2021/04/02/ying-ge/day3/"/>
      <url>/2021/04/02/ying-ge/day3/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>成员变量、局部变量、静态代码块、方法的内存分布</p><span id="more"></span><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><p>​        static 表示静态(类级别的)，可以修饰方法，变量，如果修饰变量，我们称之为”静态变量“，静态变量随着类加载而加载，并且只加载一次</p><ul><li>普通的局部变量 存放在栈内存中</li><li>静态变量 随着类加载时加载（编译class文件时），存放在方法区中</li></ul><p>类级别的变量存放在方法区中</p><p>实例（对象）</p><h2 id="成员变量-，局部变量"><a href="#成员变量-，局部变量" class="headerlink" title="成员变量 ，局部变量"></a>成员变量 ，局部变量</h2><ul><li>成员变量   定义在类中<ul><li>普通成员变量  ：创建实例类型(new关键字)时加载，无论是引用数据类型还是基本数据类型都存放在堆内存中。</li></ul></li></ul><ul><li><p>局部变量</p><ul><li><p>定义在普通方法中和静态方法中。</p><ul><li>引用数据类型  左边声明部分存放在栈内存中，右边赋值部分存放在堆内存中。</li><li>基本数据类型  变量的声明和赋值都存放在栈内存中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"wa"</span>  <span class="token comment">//name存放在栈内存中，wa存放在堆内存中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210804200631.png" alt="image-20210402092434344" style="zoom:200%;" /></li></ul></li></ul><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><ul><li><p>类级别的区间</p></li><li><p>静态代码块也是随着类的加载而加载，以后常用于类的<strong>初始化</strong></p></li><li><p>静态代码块会在主方法执行之前执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest02</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">//静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//结果</span>静态代码块执行main执行了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="方法的内存分布"><a href="#方法的内存分布" class="headerlink" title="方法的内存分布"></a>方法的内存分布</h2><ul><li>无论是普通方法还是静态方法，方法的分布只能是栈中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day2_类+方法</title>
      <link href="/2021/03/30/ying-ge/day2/"/>
      <url>/2021/03/30/ying-ge/day2/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>类的标准写法、构造方法、面向对象、内部类</p><span id="more"></span><h1 id="一个类的标准代码写法"><a href="#一个类的标准代码写法" class="headerlink" title="一个类的标准代码写法"></a>一个类的标准代码写法</h1><ul><li>类<ul><li>成员变量  （即属性）</li><li>构造方法  （new对象时可以初始化）<ul><li>无参构造方法</li><li>有参构造方法（形式参数初始化）</li></ul></li><li>成员方法<ul><li>getXxx()</li><li>setXxx()</li></ul></li></ul></li><li>给成员变量赋值的方式<ul><li>无参构造方法+setXxx()</li><li>带参构造方法</li></ul></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>方法就是完成特定功能代码块</li><li>函数在java中被称为方法</li><li>要想在方法外调用方法内的属性，<strong>需要具有返回值</strong></li></ul><h2 id="方法格式"><a href="#方法格式" class="headerlink" title="方法格式"></a>方法格式</h2><ul><li><p>修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名1)</p></li><li><p>方法名要见名识意</p></li></ul><h2 id="主函数组成"><a href="#主函数组成" class="headerlink" title="主函数组成"></a>主函数组成</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token comment">//public 公共访问修饰符</span>    <span class="token comment">//static 方法静态</span>    <span class="token comment">//void   空返回值类型，可以写入int,float,double</span>    <span class="token comment">//main   程序入口方法</span>    <span class="token comment">//String[] 参数类型，可以为引用数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><ul><li>主函数中要调用方法，需要新建一个类对象<ul><li><code>MethodDemo01 methodDemo01 = new MethodDemo01();</code></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//没有指定类型，在主函数中调用时可以直接以 方法名.参数类型 调用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个人再吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//指定数据类型的方法，需要有返回值，并且在主函数中需要重新接受 String stu = human.study();</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"学习他不香吗？"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>在同一个类里，允许写入多个方法<strong>名称相同，参数列表不同</strong>的方法</li><li>当调用方法时，传递数据类型不同，会自动选择不同的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义求和的方法</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span><span class="token keyword">double</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> num <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据类型为double的两数的和为"</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">float</span> num1<span class="token punctuation">,</span><span class="token keyword">float</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">float</span> num <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据类型为float的两数的和为"</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h2><ul><li>对内存消耗很大，以后基本用不到</li></ul><h1 id="JAVA内存分配"><a href="#JAVA内存分配" class="headerlink" title="JAVA内存分配"></a>JAVA内存分配</h1><ul><li>栈 存储局部变量</li><li>堆 存储new出来的东西</li><li>方法区 存储字节码文件的代码片段，字符常量池（给栈或堆调用）</li></ul><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><ul><li>类是对象的一个模板，对象是类的一个具体例子，也称为实例</li><li>new 一个具体的实例，这个实例称之为对象<ul><li>一个对象就是一个具体的实例</li><li>实例化对象即为通过new创建一个具体的对象</li></ul></li></ul><h2 id="对象和实例"><a href="#对象和实例" class="headerlink" title="对象和实例"></a>对象和实例</h2><ul><li><p>对象，即系统中用于描述客观事物的一个实体，是构成系统的一个基本 单位。</p></li><li><p>类，是具有相同数据成员和函数成员的一组对象的集合，它为属于该类的全部对象提供了抽象的描述。</p></li><li><p>实例表示对象和类的关系</p></li><li><p>实例就是对象的初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span>  b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   类名称 对象名称 <span class="token operator">=</span> <span class="token keyword">new</span> 类名称<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new Person新建了一个Person对象，b是指向Person对象的引用，这个Person对象就是指向Person类的一个实例。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>//实例化对象 对象名称 = new 类名称()<br>  类是抽象的，只是一个概括，对象是类的具体，即对象是类的一个  实际例子  ，通过new关键字分配相应内存空间给对象，因此称为实例化对象</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ul><li>类名 对象名 = new 类名();</li><li>对象名.成员变量（如果已经属性私有化，可使用 <strong>对象.get/setXxx</strong>方法进行属性操作）</li><li>对象名.成员方法</li></ul><h2 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h2><ul><li>new一个对象，会在堆内存中开辟空间，当我们想使用其中的一个变量时，会在栈内存中开辟空间，存放一个声明<strong>指向堆内存中的地址</strong></li></ul><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801172307.png" alt="实例化对象"></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>引用就是某个目标变量的别名，声明引用后，相当于目标变量有两个名称</li><li>引用不是一种新的数据类型，本身不占用内存</li></ul><ul><li><p>变量实质上是一小块内存单元，这块内存单元存储变量的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//a是变量名，1是变量值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引用变量：当变量指向一个对象时，这个变量就被称为引用变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a是引用变量，指向一个<span class="token class-name">A</span>对象，也可以说是引用了一个<span class="token class-name">A</span>对象。<span class="token class-name">A</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  第一个<span class="token class-name">A</span>只是一个声明，在栈内存中开辟空间，指向在堆内存中开辟空间的<span class="token class-name">B</span>类的实例化对象    声明的是父类，实际指向的是子类的一个对象    即父类的引用指向子类的对象    第一个<span class="token class-name">A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h1><ul><li><p>成员变量 封装在类里面的<strong>对象</strong></p></li><li><p>局部变量  方法中的变量</p></li><li><p>this关键字  代表一种指向，指向本类当中的属性或者方法</p><p><strong>局部变量优先级大于成员变量优先级</strong></p></li></ul><ul><li><p>成员变量</p><ul><li>实例变量</li><li>静态变量</li></ul></li><li><p>局部变量</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对象级别的</span>   <span class="token comment">//实例变量要想使用需要 new Demo1</span>   <span class="token comment">// 拿返回的实例去获取实例变量</span>   <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//实例变量</span>   <span class="token comment">//静态变量  类级别的，</span>   <span class="token comment">//用static修饰的变量不能使用new关键字</span>   <span class="token comment">// 只能通过 类名.变量 的形式访问</span>   <span class="token keyword">static</span>  <span class="token class-name">String</span> name1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例变量/方法即不使用静态修饰的，需要new实例后用  返回值.方法/变量/属性  的形式获取，</strong></p><p><strong>静态变量/方法即使用静态修饰，需要直接使用  类.变量/方法/属性   的形式访问</strong></p><h2 id="成员变量和局部变量区别"><a href="#成员变量和局部变量区别" class="headerlink" title="成员变量和局部变量区别"></a>成员变量和局部变量区别</h2><h3 id="类中位置不同"><a href="#类中位置不同" class="headerlink" title="类中位置不同"></a><strong>类中位置不同</strong></h3><ul><li><p>成员变量 类中方法外，即只存在于类中，不存在与任何方法中</p></li><li><p>局部变量 方法内或者方法声明上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span>  <span class="token comment">//String a即为方法声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="在内存中的位置不同"><a href="#在内存中的位置不同" class="headerlink" title="在内存中的位置不同"></a><strong>在内存中的位置不同</strong></h3><ul><li>成员变量  堆内存 （即new出来的空间）</li><li>局部变量 栈内存</li></ul><h3 id="生命周期不同"><a href="#生命周期不同" class="headerlink" title="生命周期不同"></a><strong>生命周期不同</strong></h3><ul><li>成员变量 随着对象存在而存在，随着对象消失而消失</li><li>局部变量 随着方法的调用而存在，随着方法的调用完毕而消失</li></ul><h3 id="初始化值不同"><a href="#初始化值不同" class="headerlink" title="初始化值不同"></a><strong>初始化值不同</strong></h3><ul><li><p>成员变量 有默认初始化值  （可以通过 <code>类.属性</code>的形式获取变量）</p></li><li><p>局部变量 无默认初始化值，必须先定义，赋值，才能使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>    主方法中      <span class="token class-name">String</span> name <span class="token operator">=</span> method01<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"wuguom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><ul><li><p>创建字符串对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abcdegf"</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcdegf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>contains 判断字符串是否包含某个字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">str1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>equals 判断字符串是否完全相等 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ab"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p> substring 字符串切割</p></li><li><p><code>substring(1) 从1处切割</code></p></li><li><p>substring(1,4) 从1处切割，不包含4 例：abcde 切割后：bcd</p></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>endsWith() 判断是否以某一字符串结尾</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>split 以某个字符为节点，将字符串切割成数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token comment">//使用split切割之后为数组，所以需要使用数组去接收</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>toCharArray() 将字符串切割成字符数组</p><ul><li>```java<br>char[] chars = str1.toCharArray();//快捷键 char.for<br>for (char aChar : chars) {<pre><code>System.out.println(aChar)</code></pre>}<pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;java&#x2F;统计字符串roihowejfoehfoweifoiwjwidhiwehfjivbevr &#39;w&#39;出现的个数    public class Test02 &#123;    public static void main(String[] args) &#123;        Test02 test02 &#x3D; new Test02();        System.out.println(test02.count());    &#125;    public int count()&#123;        &#x2F;&#x2F;定义字符串        String str1 &#x3D; &quot;roihowejfoehfoweifoiwjwidhiwehfjivbevr&quot;;        &#x2F;&#x2F;将字符串切割成字符数组        char[] chars &#x3D; str1.toCharArray();        int count &#x3D; 0;        for (char aChar : chars) &#123;            if (aChar ** &#39;w&#39;)&#123;                count +&#x3D; 1;            &#125;        &#125;        return count;    &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="加强for循环"><a href="#加强for循环" class="headerlink" title="加强for循环"></a>加强for循环</h2><ul><li><p>使用： for (容器中的数据类型 遍历的每一个元素 : 容器对象（数组或集合）)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> strings<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//要结束使用return ,不返回任何值</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p><strong>有参构造和无参构造实际上就是方法的重载</strong></p><p>​        构造方法也是一种方法，是java中特殊的方法，我们在创建对象的时候，使用的就是构造方法</p><p>​        构造方法分为有参构造和无参构造，针对于某个类，在我们没有定义的情况下，默认会有一个无参构造</p><p>​        </p><p>无参构造就是创建普通的对象，所有的属性都还没有赋值</p><ul><li><p>有参构造作用：类加载，创建对象的时候，就已经对属性初始化值</p></li><li><p><strong>如果定义了有参构造，默认的无参构造会被覆盖</strong></p></li><li><p><strong>构造方法组成部分：访问权限修饰符 类名(形式参数列表){}  (无返回值类型)</strong></p><ul><li><p>在创建对象时（new）时，调用了一个无参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>构造方法 访问权限修饰符 类名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">(</span>无返回值类型<span class="token punctuation">)</span>    <span class="token comment">//无参构造 访问权限修饰符 类名()&#123;&#125;  (无返回值类型)</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//有参构造 访问权限修饰符 类名(形式参数列表)&#123;&#125;  (无返回值类型)</span><span class="token comment">//有参构造方法的形式参数实际上是由用户端传递过来</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//实际上是一种方法的重载</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">//将值传递给成员变量</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>将一整个需求分为多个单元，把每一个单元都封装为一个对象，例：一个游戏，游戏角色，游戏地图等都分别封装为一个对象。</li></ul><p><strong>面向过程</strong></p><ul><li><p>面向具体的每一个步骤</p></li><li><p>针对一些业务逻辑较简单的需求很简单，但业务逻辑较复杂的需求就很吃力</p><ul><li>因为，所以，因为，所以的一个过程</li></ul></li><li><p>只适合完成一些简单的项目</p></li></ul><h2 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h2><ul><li>不断创建对象，使用对象，指挥对象做事情</li><li>将每一部分功能或者步骤封装在一个类中，</li></ul><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><ul><li>管理和维护对象之间的关系</li></ul><h2 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h2><ul><li><p>封装</p></li><li><p>多态</p></li><li><p>继承</p></li><li><p>类是模糊的，对象是具体的，对象是类的具体实现</p></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>隐藏对象的属性和实现细节，仅对外提供公共访问方式</p><p>例如创建了一个人的属性，但是不想对外界开放，就对其封装，可以通过get,set方法存值或取值</p></li></ul><p><strong>屏蔽复杂，调用简 单</strong></p><ul><li><p>当所需要的属性不想被外界获取时，使用private修饰属性，</p></li><li><p><strong>private</strong>  私有的访问权限修饰符，可以修饰属性，方法，构造，被private修饰了以后只能在本类中访问到</p><ul><li>一般所有需要封装的属性，都需要使用private修饰</li></ul></li><li><p>要想访问被私有权限修饰符修饰的属性等，可以给一个get方法,set方法，具体作用 就是存值，获取值 </p></li></ul><h4 id="对属性的封装"><a href="#对属性的封装" class="headerlink" title="对属性的封装"></a>对属性的封装</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//快捷键 Alt + Insert</span><span class="token comment">//get方法  获取需对应数据类型</span>    <span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token comment">//当前类的name</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//set方法 传递的参数要与成员变量数据类型相同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//String name给本类中的name赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要想在类外对私有属性赋值，需要在主函数中调用 对象.方法 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建学生对象</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过set方法赋值</span>student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>        <span class="token comment">//通过get获取值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>多个类中存在相同属性和行为，将这些内容抽取到单独一个类中，多个类只需要继承这个类即可</p></li><li><p>子类可以继承父类所有属性和方法</p></li><li><p>一个子类只能继承一个父类，一个父类可以被多个子类继承</p><p>(一个儿子只有一个爸爸，一个爸爸有多个儿子)</p></li><li><p>在代码层面，如果一个类没有继承任何父类，那么这个类将默认继承Object类</p></li></ul><h4 id="extends方法"><a href="#extends方法" class="headerlink" title="extends方法"></a>extends方法</h4><ul><li><blockquote><p>通过 class 子类类名 extends 父类类名</p></blockquote></li></ul><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><ul><li>重写必须要满足  子类继承父类 前提下（<strong>在子类重写</strong>）</li><li>当父类方法不能满足子类要求时，重写方法（覆盖）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token comment">//注解，起修饰，标识的作用，标识当前方法是子类重写父类方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父类实例的引用，存在这句话依旧会指向父类，重写可去掉这句话。</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a>重写和重载的区别</h4><ul><li>重载：在同一个类中，允许方法名相同，但参数列表不同</li><li>重写：当子类继承父类后，父类功能不满足子类需求，子类可以修改父类的逻辑</li></ul><h4 id="this-super"><a href="#this-super" class="headerlink" title="this super"></a>this super</h4><ul><li>this<ul><li>this()  this构造方法只能写在本类的无参构造当中</li><li>this,super如果指向构造，那么只能放在构造方法中，并且需要放在构造方法的第一部分。</li></ul></li><li>super<ul><li>super.方法名   父类方法的引用</li><li>super()  指向父类的无参构造，如果不重写，会隐式存在，子类拥有父类的构造方法。<ul><li>super(参数)指向父类的有参构造</li></ul></li></ul></li></ul><ul><li><p>通过创建子类对象，给父类的构造赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将子类的数据通过super传给父类构造方法</span><span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> animalName<span class="token punctuation">,</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>animalName<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>一个父类有多个子类，每一个子类继承父类的方法后重写的代码都不一样，表现形式自然也不一样。</li><li>即一个人喂食一群动物，在人的类中只需要定义一个方法调用父类的喂食方法，其他所有动物都继承父类的方法进行重写，在主方法中，使用父类的引用指向各个动物对象</li></ul><h4 id="多态前提和实现"><a href="#多态前提和实现" class="headerlink" title="多态前提和实现"></a>多态前提和实现</h4><ul><li><p>有继承关系</p></li><li><p>有方法重写</p></li><li><p>有父类引用指向子类对象</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//动物的引用接收子类的实例  animal是引用</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//编译阶段看左边，运行阶段看右边</span>这是向上转型<span class="token comment">//创建猫的对象</span>            <span class="token comment">//animal1引用的是Animal，即为父类的声明，但具体指向的对象是Cat。</span>            <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>向下转型        <span class="token comment">//向下转型，animal1原本是父类的引用，强制转换后指向Cat</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animal1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><ul><li>编译阶段看左边，运行阶段看右边</li></ul><p>​        当使用多态方式调用方法时，首先检查父类中是否有该方法。</p><p>​        如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><h4 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h4><ul><li><p><strong>向上转型</strong>：父类的引用指向子类的对象</p><ul><li>调用子类中重写父类的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Animal的引用具体指向Rabbit()这个实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><strong>向下转型</strong>:父类的引用转为子类对象   A a  –&gt;  B a   </p><ul><li>用处：子类中除了拥有父类的方法，还拥有自己的方法</li></ul><p>，因此是由功能较强的类型指向功能较弱的类型。</p><p>​        父类的引用这个对象实例在内存的本质上还是子类类型的</p><p>只是new 子类的引用类型被设置为了父类。</p><p>​        </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Son</span> son <span class="token operator">=</span> <span class="token punctuation">(</span>son<span class="token punctuation">)</span>father  <span class="token comment">//father原来是Father类型，此处将father转换为son类型</span>    变量son引用了变量father的地址，而father引用的对象地址是<span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>创建的<span class="token class-name">Son</span>对象，这里只是将引用的类型强制转换成了<span class="token class-name">Son</span><span class="token punctuation">,</span>本质引用地址所存储的对象就是<span class="token class-name">Son</span>类型的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        </p><ul><li><p>向下转型抛出异常</p><ul><li><p>父类强制转换为子类并不是总成功的，当引用类型的真实身份是父类本身类型时，强制类型转换就产生错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Son</span> son <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>father<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>异常原因：</p><ul><li>子类强制转换成父类时：此时Son类型对象的引用是Father类型，由于Son类型是对Father类型的扩展，调用Ftaher引用的方法在Son对象中是存在的，可行</li><li>父类强制转换成子类时：父类引用的对象时Father类型，强制转换之后,Father类型对象的引用是Son类型的，被引用的对象仍然是Father类型的，Son扩展的对象在Father中并不存在，无法调用，产生报错。</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//类型判断，如果cat是Cat的引用则执行子类的方法，避免出现类型不匹配的错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span>  <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//向下转型 子类中除了拥有父类的方法，还拥有自己的方法</span>            <span class="token comment">//使用向下转型调用自己的方法</span>            <span class="token comment">//强制转换</span>            <span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> eat1<span class="token punctuation">;</span>            cat1<span class="token punctuation">.</span><span class="token function">yeShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例：Day03 com.poly.message</p><ul><li>​    联系方式</li></ul></li></ul><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>使用多态的向下转型需要判断,如果向下转型的引用不是子类的引用，</p><h4 id="多态好处和弊端"><a href="#多态好处和弊端" class="headerlink" title="多态好处和弊端"></a>多态好处和弊端</h4><ul><li>好处<ul><li>提高了程序的维护性（由继承保证）</li><li>提高了程序的扩展性（由多态保证）</li></ul></li></ul><ul><li>弊端<ul><li>不能访问子类特有功能，只有子类重写父类方法后才可使用<ul><li>使用<strong>多态中的转型</strong>访问特有功能。</li></ul></li></ul></li></ul><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li><p>抽象类下一级为类，类下一级为实例，可以实例化的是类</p></li><li><p>使用abstract修饰的类是抽象类，不可以实例化对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token comment">//abstract冲突：</span>    <span class="token keyword">final</span><span class="token operator">:</span>冲突  被<span class="token keyword">final</span>修饰的方法不允许重写，修饰的类不能被继承     <span class="token keyword">private</span><span class="token operator">:</span>冲突  私有类型后虽然可以被子类访问，但无法调用    <span class="token keyword">static</span> <span class="token operator">:</span> 无意义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final不可以修饰抽象类，final修饰后抽象类不可被继承。</p></li><li><p>如果一个子类继承了抽象类，必须要重写抽象类中的所有抽象方法，不重写会报错。</p></li><li><p>在抽象类中可以存在普通方法，也可以定义成员变量，常量等。</p></li><li><p>抽象类可以存在普通方法，所以可以继承其他类，进行方法的重写</p></li><li><p>抽象类中存在构造方法，可以用于子类访问父类数据的初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="抽象类作用"><a href="#抽象类作用" class="headerlink" title="抽象类作用"></a>抽象类作用</h5><pre><code>- 被子类继承</code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ul><li>抽象方法没有具体的方法体实现，以一个规范存在，只能存在于抽象类中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象方法没有具体的方法体实现，以一个规范存在</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>接口不给出具体实现，只包含抽象类</li><li>接口等同于抽象类的简化</li><li>例如 计算机认识的是USB标准，但是不关心这个标准的具体实现子类。</li><li>接口中只有常量和抽象方法</li></ul><h3 id="接口特点"><a href="#接口特点" class="headerlink" title="接口特点"></a>接口特点</h3><ul><li><p><strong>用关键字 interface表示</strong></p><ul><li><p>格式：<code>interface 接口名 &#123;&#125;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>类<strong>实现</strong>接口用 **<code>implements</code>**表示  (接口与类的实现方式，即继承关系)</p><ul><li>格式：<code>class 类名 implements 接口名&#123;&#125;</code></li><li>接口  实现，类  继承</li></ul></li></ul><ul><li><strong>接口不能实例化</strong><ul><li>接口按照多态的方式，<strong>由具体的子类去完成实例化</strong>，所以也可以说是<code>接口多态</code></li></ul></li></ul><ul><li><strong>接口的子类</strong><ul><li>抽象类</li><li>重写接口的所有抽象方法</li></ul></li></ul><ul><li>接口可以与多态一样，父类的引用指向子类的对象</li></ul><h3 id="接口成员特点"><a href="#接口成员特点" class="headerlink" title="接口成员特点"></a>接口成员特点</h3><ul><li>成员变量<ul><li><strong><strong>只能是常量</strong></strong><ul><li>默认修饰符 <code>public static final</code></li><li><strong>默认修饰符可省略</strong></li></ul></li></ul></li></ul><ul><li>构造方法<ul><li>接口没有构造方法，接口主要是扩展功能，没有具体存在，</li></ul></li></ul><ul><li>成员方法<ul><li>只能是抽象方法</li><li>默认修饰符 <code>public abstract</code>，<strong>一般情况下可省去</strong></li></ul></li></ul><h2 id="类，接口关系"><a href="#类，接口关系" class="headerlink" title="类，接口关系"></a>类，接口关系</h2><h3 id="类与类"><a href="#类与类" class="headerlink" title="类与类"></a>类与类</h3><ul><li>继承关系。只能单继承，但是也可以多层继承<ul><li>A 继承 B ，B 继承 C</li></ul></li></ul><h3 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h3><ul><li><p>实现关系，可以单实现，也可以多实现</p><p>还可以在继承一个类的同时实现多个接口，并且继承所有接口的属性和方法，使用<code>,</code>隔开</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="接口与接口"><a href="#接口与接口" class="headerlink" title="接口与接口"></a>接口与接口</h3><ul><li><p>继承关系，可以单继承，也可以多继承(使用<code>,</code>隔开)</p><ul><li> 因为 实现 关系必须要重写方法，而两个接口上实际上是两个只有抽象方法的抽象类，无法重写方法</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface MyInterface extends MyInterface2,MyInterface3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="抽象类和接口区别"><a href="#抽象类和接口区别" class="headerlink" title="抽象类和接口区别"></a>抽象类和接口区别</h2><ul><li>成员区别<ul><li><strong>抽象类</strong> ： 变量，常量；有抽象方法，非抽象方法</li><li><strong>接口</strong> ：     常量，抽象方法</li></ul></li></ul><ul><li>关系区别<ul><li>类与类  继承：单继承</li><li>类与接口  实现，单实现，多实现</li><li>接口与接口 继承，单继承，多继承<ul><li><code>public interface Person extends Animal,give&#123;&#125;</code></li><li>接口可以继承多个接口，用<code>,</code>隔开即可</li></ul></li></ul></li></ul><ul><li>设计理念区别<ul><li>抽象类 被子类继承体现的是 ： <code>is a</code>的关系，共性功能<ul><li>例 猫是一个动物</li></ul></li><li>接口     被子类实现 体现的是： <code>like a</code>的关系，扩展功能<ul><li>例 豆腐像甜品</li></ul></li></ul></li></ul><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><ul><li>final :表示最终的，可以修饰类，属性和方法</li></ul><ul><li><p>如果用final修饰属性，必须给这个属性初始化值</p></li><li><p>基本数据类型 在程序允许的时候值是不可修改的</p></li><li><p>引用数据类型，在程序允许是，不可指向别的内存地址</p></li><li><p>如果用final修饰类，这个类不能被子类继承</p></li><li><p>如果用final修饰方法，这个方法不能在子类中被重写</p></li></ul><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li><p>java常量的声明</p><ul><li><p><code>static  + final</code>声明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> COUNTRY_NAME <span class="token operator">=</span> <span class="token string">"中国"</span>  <span class="token comment">//常量一般用pubic修饰</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>常量不需要多次加载</p><ul><li>如果是成员变量，则是实例（对象）级别的，每次都需要加载。</li><li>static是类级别的，随着字节码文件加载而加载，在类加载时之加载一次，占用空间最小</li></ul></li></ul></li></ul><h2 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h2><ul><li><strong>常量名称所有字母都要大写!!</strong> </li><li><strong>有多个单词时用__隔开</strong></li></ul><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><ul><li>实际上是文件夹</li><li>作用： 对类进行分类管理</li></ul><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>​    当前类所在包路径</p><p><code>package com.wufan.interface_test.personTest;</code></p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul><li><p>import -&gt; 导包  引入第三方的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li>java.lang包下的类不需要再次导入，在底层已经导入</li></ul><h1 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h1><ul><li>访问权限越小，安全性越高</li></ul><ul><li>public  ：公共访问权限修饰符，在当前工程可以访问</li></ul><ul><li>private：私有访问权限修饰符，只有在本类才能访问</li></ul><ul><li>default ：默认受保护的，只能在当前包才能访问，子类以及子包不可访问</li></ul><ul><li>protect 受保护的，只能在同包中进行访问，要想在其他包中使用，必须创建其子类。</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类定义"><a href="#内部类定义" class="headerlink" title="内部类定义"></a>内部类定义</h2><ul><li><p>将类写在其他类的内部，可以写在其他类的成员位置和局部位置，</p><p>这种类称为内部类</p></li></ul><p><strong>内部类可以使用外部类的属性和方法，如果存在属性或者方法同名，则使用this指向外部类</strong></p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p><code>外部类.内部类 引用 = new 外部类对象.new 内部类对象</code></p><h2 id="内部类使用"><a href="#内部类使用" class="headerlink" title="内部类使用"></a>内部类使用</h2><ul><li>当一个事物里包含着其他事物的时候，其他事物可以创建一个内部类。</li></ul><h2 id="内部类位置"><a href="#内部类位置" class="headerlink" title="内部类位置"></a>内部类位置</h2><ul><li>成员位置（成员内部类） 即在类中定义的类</li><li>局部位置（局部内部类） 即在方法中定义的类</li></ul><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类是内部类的简化写法</p><ul><li>前提：存在一个类或者接口<ul><li>这里的类可以是具体类也可以是抽象类</li></ul></li><li>格式：<ul><li><p><code>new 类名或接口名()&#123;重写方法&#125;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//调用操作账户的方法  创建接口的匿名对象</span>        account<span class="token punctuation">.</span>updateAcco  <span class="token function">unt</span><span class="token punctuation">(</span><span class="token number">52.5</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AccountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存了"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><strong>本质</strong><ul><li>是一个继承了类或者实现了接口的子类匿名对象</li><li><strong>匿名内部类是子类的匿名对象</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day1_java基础知识1</title>
      <link href="/2021/03/29/ying-ge/day1/"/>
      <url>/2021/03/29/ying-ge/day1/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>java基础知识、变量、运算符  基础</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="快速语句"><a href="#快速语句" class="headerlink" title="快速语句"></a>快速语句</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">sout  <span class="token comment">//快速创建输出语句</span>psvm  <span class="token comment">//快速创建主语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JAVA文件包含"><a href="#JAVA文件包含" class="headerlink" title="JAVA文件包含"></a>JAVA文件包含</h2><ul><li>项目 ：JAVA中一个项目即为一个JAVA应用</li><li>包：  为了内容的分类管理，在不同的包内有不同的类<ul><li>一般包名为域名的倒叙 ，几级则会在src文件夹中创建几个文件夹，例<code>com.imooc</code>  代表<code>文件创建在src/com/imooc</code></li></ul></li></ul><h2 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h2><ul><li>跨平台<ul><li>java针对每一个系统都提供了虚拟机(jvm)，只需要在不同的平台上安装上Jvm，在不同的系统上都可以运行Java代码</li><li>首先由一个与平台无关的编译器生成.class文件，再在各个平台的环境上运行</li></ul></li></ul><h2 id="Dos命令行执行java源代码："><a href="#Dos命令行执行java源代码：" class="headerlink" title="Dos命令行执行java源代码："></a>Dos命令行执行java源代码：</h2><ol><li>将java源文件转换成字节码文件<ul><li>使用<code>javac 当前文件名.java</code></li></ul></li><li>执行代码<ul><li>使用<code>java 类名</code></li></ul></li></ol><h2 id="JRE与JDK"><a href="#JRE与JDK" class="headerlink" title="JRE与JDK"></a>JRE与JDK</h2><ul><li><p>使用JDK开发完成的java程序，交给JRE去运行</p></li><li><p>JRE包括Java虚拟机（JVM）和Java程序需要的核心类库</p></li><li><p>JVM：Java虚拟机，与计算机底层硬件交互</p><ul><li>JVM执行.class文件</li></ul></li><li><p>JRE：Java类库</p></li><li><p>JDK：Java开发工具包</p></li><li><p>JDK包含JRE包含JVM</p></li></ul><h2 id="字节码文件"><a href="#字节码文件" class="headerlink" title="字节码文件"></a>字节码文件</h2><ul><li>JAVA运行之后在与包同名的out文件夹下生成一个字节码文件，(.class文件)，java虚拟机实际上运行.class</li></ul><h2 id="JVM虚拟机执行流程"><a href="#JVM虚拟机执行流程" class="headerlink" title="JVM虚拟机执行流程"></a>JVM虚拟机执行流程</h2><ul><li>源码编辑后，通过<code>javac</code>编译生成字节码文件</li><li>使用类加载器加载字节码文件<code>.class</code></li><li>执行引擎找到入口方法main()执行其中的字节码指令</li></ul><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ul><li>有特殊意义的字符</li><li>关键字不能被作为变量名称</li></ul><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202108/20210801172555.png" alt="image-20210327215443811" style="zoom:150%;" /><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量定义格式"><a href="#变量定义格式" class="headerlink" title="变量定义格式"></a>变量定义格式</h2><p><code>数据类型 变量名 = 初始化值</code></p><p><strong>一般一行只定义一个变量</strong></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java对每一种数据都定义了具体的数据类型，在内存上分配了不同的内存空间</p><h3 id="基本数据类型和引用数据类型区别"><a href="#基本数据类型和引用数据类型区别" class="headerlink" title="基本数据类型和引用数据类型区别"></a>基本数据类型和引用数据类型区别</h3><ol><li><p>基本数据类型在定义的时候会在栈中开辟空间，而且这份空间所表达的值就是当前变量的默认值</p><ul><li>已经声明的变量会在栈中存在，改变值的过程实际上是覆盖过程</li></ul></li><li><p>引用数据类型在定义的时候也会在栈中开辟内存，默认为null,引用数据类型如果赋值的话，要使用new关键字（创建对象的关键字），<strong>只要使用了new关键字，就会在堆内存中开辟空间</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明一个数据类型</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p><strong>所有数据类型如果在类中定义的，要想在主函数中使用，需要将变量转换为静态static <code>static int a = 5</code></strong></p></li><li><p>数值型</p><ul><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)  <ul><li>float在声明时后面要加f<ul><li><code>float f = 10.5f</code></li></ul></li></ul></li></ul></li><li><p>字符型(char)  </p><ul><li><code>char c = &#39;我&#39;;//只能有一个字符，多了报错</code> </li></ul></li><li><p>布尔型(boolean)</p><ul><li>true</li><li>false</li><li>使用<ul><li>在class中定义要想在主函数中使用，需要声明是静态变量，<ul><li><code>static boolean b = true</code></li></ul></li></ul></li></ul></li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>类(class)</li><li>接口(interface)</li><li>数组</li></ul><ul><li>只要是类都为引用数据类型</li><li>当引用数据类型使用New关键字时，则会在堆内存中开辟空间</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"sdhjdsah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>引用数据类型也可以作为属性，此时m1只是一个空指针，要使其产生作用，需要new为其在堆内存中开辟空间，才能使用其属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">Method01</span> m1 <span class="token punctuation">;</span> <span class="token comment">//此处创建的m1实际上只是拥有Method01的属性，并没有拥有m1的值</span>  <span class="token comment">//创建新的对象</span>       <span class="token class-name">Method02</span> method02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method02<span class="token punctuation">.</span>m1 <span class="token operator">=</span> method01<span class="token punctuation">;</span>  <span class="token comment">//获取method01的属性，交给m1</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><img src="https://wgmpwy.oss-cn-beijing.aliyuncs.com/typora/202104/08/131558-724372.png" alt="image-20210331130418814"></p></li></ul><ul><li><p>如果是基本数据类型，就是简单的赋值操作；引用 数据类型的话，赋值的为地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span> <span class="token comment">//在栈中开辟空间，在字符常量池中取值</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">;</span>  <span class="token comment">//简单的数据类型赋值</span><span class="token comment">//str3 str4在堆中地址不同</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在堆中开辟空间，在字符常量池中取值</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str3 <span class="token operator">=</span> str4  <span class="token comment">//引用数据类型，将str4地址赋值给str3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><ul><li><code>(要转的数据类型)(数据)</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">15.6</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">15.6</span><span class="token punctuation">;</span>        <span class="token comment">//强制转换</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d1<span class="token operator">+</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>引用数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量名的命名规则"><a href="#变量名的命名规则" class="headerlink" title="变量名的命名规则"></a>变量名的命名规则</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">text</span><span class="token punctuation">;</span><span class="token comment">/*关于java当中命名规范如果给类命名，遵从大驼峰形式 ： 首字母大写，例UserName如果给属性(变量)命名，遵从小驼峰： 首字母小写，例userName*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> userName<span class="token punctuation">;</span>  <span class="token comment">//给变量命名，遵从小驼峰</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量名分布"><a href="#变量名分布" class="headerlink" title="变量名分布"></a>变量名分布</h2><ul><li>定义在类中的变量为成员变量</li><li>定义在主函数中的变量为局部变量</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token comment">/*        System.out.println(x + y);        System.out.println(x - y);        System.out.println(x % y);*/</span><span class="token comment">//自增  x++ >> x = x+1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先运算，再赋值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先赋值，再运算</span>                <span class="token comment">//x+++y+++--y-y+++x  100 + 200 + （201-1）+ 200 + 101</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token operator">+</span>y<span class="token operator">++</span><span class="token operator">+</span><span class="token operator">--</span>y<span class="token operator">-</span>y<span class="token operator">++</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li><p>**  对于基本数据类型比较的是值，对于引用数据类型比较的是地址</p></li><li><p>!=</p></li><li><p>instanceof  检查是否是该类的对象</p><ul><li>```java<br>String name = “jack”;<br>System.out.println(name);if (name instanceof String){  //判断name是否属于String这个对象<pre><code>System.out.println(&quot;yes&quot;);</code></pre>}else {<pre><code>System.out.println(&quot;no&quot;);</code></pre>}<pre class="line-numbers language-none"><code class="language-none">## 逻辑运算符|      |      |                |      || ---- | ---- | -------------- | ---- || &amp;&amp;   | 与   |                |      || \|\| | 或   |                |      || ！   | 非   | 真为假，假为真 |      |- &amp;&amp;与逻辑运算符,判断条件是否完全成立，成立返回True，否则返回False  || 或逻辑运算符，只要一个为真即为真- 判断字符串是否完全相等 equals  &#96;&#96;&#96;java  &#x2F;&#x2F;判断字符串是否完全相等equals  if (name1.equals(&quot;张三&quot;))&#123;  &#x2F;&#x2F;if()内写入的是布尔类型的表达式  &#125;    &#x2F;&#x2F;判断字符串是否包含 contains          if (name1.contains(&quot;张&quot;) &amp;&amp; name2.contains(&quot;李&quot;))&#123;          &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="条件运算符练习"><a href="#条件运算符练习" class="headerlink" title="条件运算符练习"></a>条件运算符练习</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在控制台输出整数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//nextInt获取int型的</span><span class="token comment">//double num2 = scanner.nextDouble();  //nextDouble获取double型</span><span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t1 <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            t1 <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t1 <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>或者使用 数组实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">case1<span class="token punctuation">.</span>day1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> day01_2 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建第一个输入的数</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在控制台输入数值的类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> num1 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> num2 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> num3 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> numMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//定义中间值</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建一个数组</span>        doubles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1<span class="token punctuation">;</span>  <span class="token comment">//为数组赋值</span>        doubles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num2<span class="token punctuation">;</span>        doubles<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> num3<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>doubles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//遍历所有数据</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>doubles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> numMax<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//与中间值比较，最大输出</span>                numMax <span class="token operator">=</span> doubles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此时最大的值为："</span><span class="token operator">+</span>numMax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>三目运算符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//三目运算符 如果str包含abc,输出yes,否则no</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h2><ul><li>switch</li><li>for w</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小甲鱼Python</title>
      <link href="/2021/03/23/python/xiao-jia-yu/"/>
      <url>/2021/03/23/python/xiao-jia-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文是小甲鱼Python的学习总结，包含遍历，列表，字符串，字典等知识点，</p><span id="more"></span><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><p>测试代码</p></li><li><p>有需要变化</p></li><li><p>变量事实上是一个名字,它是可变的</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> teacher <span class="token operator">=</span> <span class="token string">'小甲鱼'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span>小甲鱼<span class="token operator">>></span><span class="token operator">></span> teacher <span class="token operator">=</span> <span class="token string">'laojiayu'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span>laojiayu<span class="token operator">>></span><span class="token operator">></span> first <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> second <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> thhird <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token operator">>></span><span class="token operator">></span> thhird<span class="token number">11</span><span class="token comment">##字符串的拼接</span><span class="token operator">>></span><span class="token operator">></span> myte<span class="token operator">=</span> <span class="token string">'xiao'</span><span class="token operator">>></span><span class="token operator">></span> yote <span class="token operator">=</span> <span class="token string">'hy'</span><span class="token operator">>></span><span class="token operator">></span> oute <span class="token operator">=</span> myte <span class="token operator">+</span> yote<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>oute<span class="token punctuation">)</span>xiaohy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用变量注意事项"><a href="#使用变量注意事项" class="headerlink" title="使用变量注意事项"></a>使用变量注意事项</h3><ul><li><p>必须给变量的赋值</p></li><li><p>变量名可包括字母、数字、下划线、但变量名不能以数字开头</p></li><li><p>字母可以大小写，但大小写意义不同</p></li><li><p>等号（=）是赋值，左名字，右为值，不可反写<br>变量命名理论可以取任何值</p><ul><li>但一般取一个专业的名字，如<code>fishc=&#39;小甲鱼&#39;</code></li></ul></li></ul><h3 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h3><ul><li>如果要创建字符串，在字符串两边加上==引号==，但必须要成双成对</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">8</span><span class="token number">13</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'5'</span><span class="token operator">+</span><span class="token string">'8'</span><span class="token string">'58'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串中需要出现单引号或双引号时</li></ul><ol><li>使用转义字符（)对字符串中引号进行转义,转义字符加在想要保留的引号前</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Let\'s go'</span><span class="token string">"Let's go"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><ul><li>遇到需要打印后有变化的字符串，可以使用原始字符串<strong>在字符串前追加一个英文字母r</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'C:\now'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token string">'C:\now'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>ow<span class="token comment">#添加了原始字符串</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">r'c:\\now'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token string">'c:\\\\now'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>c<span class="token punctuation">:</span>\\now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原始字符串在字符串结尾是不可以加 \ 的,</li></ul><h3 id="长字符串"><a href="#长字符串" class="headerlink" title="长字符串"></a>长字符串</h3><p>要得到跨越多行的字符串，需要使用<strong>三重引号字符串</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token triple-quoted-string string">'''- 字符串中需要出现单引号或双引号时1. 使用转义字符（\)对字符串中引号进行转义,转义字符加在想要保留的引号前'''</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span> 字符串中需要出现单引号或双引号时<span class="token number">1</span><span class="token punctuation">.</span> 使用转义字符（\<span class="token punctuation">)</span>对字符串中引号进行转义<span class="token punctuation">,</span>转义字符加在想要保留的引号前<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="改进游戏"><a href="#改进游戏" class="headerlink" title="改进游戏"></a>改进游戏</h1><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><h3 id="Python比较操作符"><a href="#Python比较操作符" class="headerlink" title="Python比较操作符"></a>Python比较操作符</h3><p>![image-20210114092806284](C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210114092806284.png)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#按照条件操作符操作返回值为true，不按照返回值为false</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件分支语法"><a href="#条件分支语法" class="headerlink" title="条件分支语法"></a>条件分支语法</h3><ul><li><p>if else</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#注意缩进</span><span class="token keyword">if</span> 条件：true执行条件<span class="token keyword">else</span><span class="token punctuation">:</span>    false执行条件    <span class="token comment">#elif 相当于else:</span><span class="token keyword">if</span>   <span class="token punctuation">:</span>实例score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>while循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#while可以重复运行需要循环的代码</span><span class="token keyword">while</span> 条件：true执行操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少"</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">while</span> guess <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"恭喜你答对了，但我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==思考==</p><ul><li>如何得到三次循环就结束？</li></ul><p>个人实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> <span class="token number">8</span>temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少："</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess<span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    guess <span class="token operator">=</span> int2                                                                                                                                           ``````````````````````````````````<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  <span class="token comment">#注意每次需要重新定义输入的数值，否则就不会运行=m的情况</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> m<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> m<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把："</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"都这么久了还答不出来："</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小甲鱼实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomtimes <span class="token operator">=</span> <span class="token number">3</span>secret <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------我爱鱼C工作室------------------'</span><span class="token punctuation">)</span><span class="token comment"># 这里先给guess赋值（赋一个绝对不等于secret的值）</span>guess <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print()默认是打印完字符串会自动添加一个换行符，end=" "参数告诉print()用空格代替换行</span><span class="token comment"># 嗯，小甲鱼觉得富有创意的你应该会尝试用 end="JJ"？</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不妨猜一下小甲鱼现在心里想的是哪个数字："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess <span class="token operator">!=</span> secret<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>times <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    times <span class="token operator">=</span> times <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment"># 用户每输入一次，可用机会就-1</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> secret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我草，你是小甲鱼心里的蛔虫吗？！"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜中了也没有奖励！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> secret<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哥，大了大了~~~"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"嘿，小了，小了~~~"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> times <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"再试一次吧："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"机会用光咯T_T"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩啦^_^"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机random"><a href="#随机random" class="headerlink" title="随机random"></a>随机random</h3><ul><li>random模块有函数：randint()</li><li>用法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">sercet <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 生成1,10十个随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随机实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomm <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少："</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess<span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> m<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> m<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把："</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"都这么久了还答不出来："</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><ul><li>Python区分整型和浮点型只是看有没有小数点</li></ul><h2 id="e记法"><a href="#e记法" class="headerlink" title="e记法"></a>e记法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token number">0.000000000000025</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">2.5e-14</span>   <span class="token comment">#实际上就是科学计数法</span>  <span class="token comment">#不区分大小写e\E</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">15e10</span><span class="token number">150000000000.0</span>  <span class="token comment">#若用e记法表示，其值为浮点型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>![](C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210116100541617.png)</p><ul><li><p>int() ：将一个字符串或者浮点数转化为整形</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'45'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">45</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">5.99</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#int会将所有数字变为整型</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'xiao'</span><span class="token punctuation">)</span>  <span class="token comment">#xiao不是一个表示数字的字符串，他是一个编码</span>报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>float（）：将整型和字符串转换为浮点数</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'520'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">520.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>str():将其他变为字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">5.99</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#str会将数值转换为字符串</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'5.99'</span> <span class="token comment">#' '内为字符串，以此区分</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'i love'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token string">'i love'</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">5e19</span><span class="token punctuation">)</span>   <span class="token comment">#当str被当做变量名时，则不再成为内置函数</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取关于类型的信息"><a href="#获取关于类型的信息" class="headerlink" title="获取关于类型的信息"></a>获取关于类型的信息</h2><ul><li><p>type()</p><p>用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'520'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">8.999</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>isinstance(a,str)  </p></li><li><p><strong>上述内置函数有两个值，一个是指定类型的值，一个是比较用的内置函数（str float int），两个比较，返回布尔值</strong></p></li></ul><p>用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'dhsd'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h1><h2 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># += 自加</span><span class="token comment"># -+ 自减</span><span class="token comment"># *= 自乘</span><span class="token comment"># /= 自除（无法整除返回float）</span><span class="token comment"># // 自除（d版除法，返回整数值）</span><span class="token comment"># ** 指数次幂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">+=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">11</span><span class="token comment"># 类似，自加或自减都可以将符号放在=前</span><span class="token comment">#实例</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> b<span class="token operator">=</span>c<span class="token operator">=</span>d<span class="token operator">=</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">#自加</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">-=</span> <span class="token number">3</span> <span class="token comment">#自减</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">*=</span> <span class="token number">10</span> <span class="token comment">#自乘</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">/=</span> <span class="token number">8</span> <span class="token comment">#如果有小数会以float显示</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">11</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token number">1.25</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">//</span> <span class="token number">8</span>  <span class="token comment">#d版除法，除为整数</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">%</span> <span class="token number">9</span>  <span class="token comment">#取余</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h2><p>![image-20210116132037369](C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210116132037369.png)</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">12.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token operator">-</span><span class="token number">12.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>幂操作符比其左侧优先级高，比其右侧优先级低</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">**</span><span class="token operator">-</span><span class="token number">2</span><span class="token number">0.1111111111111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>比较操作符根据表达式值的真假来返回布尔类型的值</p><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><ul><li> and  两边同时为真才为真</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>or  只需要左边或者右边为真结果都为真</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token keyword">or</span> <span class="token number">4</span><span class="token operator">></span><span class="token number">5</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>not 取与判断值相反的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分支和循环"><a href="#分支和循环" class="headerlink" title="分支和循环"></a>分支和循环</h1><h2 id="打飞机小游戏框架"><a href="#打飞机小游戏框架" class="headerlink" title="打飞机小游戏框架"></a>打飞机小游戏框架</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">加载背景音乐播放背景音乐（设置单曲循环）我方飞机诞生interval <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">#定义间隔</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 用户是否点击关闭按钮<span class="token punctuation">:</span>        退出程序        <span class="token keyword">break</span>                interval <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token keyword">if</span> interval <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">:</span>        interval <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment">#每次运行后要初始化</span>        小飞机诞生                      小飞机移动一个位置      屏幕刷新        <span class="token keyword">if</span> 用户鼠标产生移动<span class="token punctuation">:</span>        我方中心位置 <span class="token operator">=</span> 用户鼠标位置        屏幕刷新            <span class="token keyword">if</span> 我方飞机与小飞机发生肢体冲突<span class="token punctuation">:</span>        我方挂，播放撞机音乐        修改飞机图案        打印<span class="token string">"Game over"</span>        停止背景音乐，最好淡出              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>elif用法 <code>if elif else</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="悬挂else"><a href="#悬挂else" class="headerlink" title="悬挂else"></a>悬挂else</h2><p>C语言中else会与就近if匹配，Python中会强制使用正确缩进避免悬挂else。</p><h2 id="条件分支-1"><a href="#条件分支-1" class="headerlink" title="条件分支"></a>条件分支</h2><h3 id="Python比较操作符-1"><a href="#Python比较操作符-1" class="headerlink" title="Python比较操作符"></a>Python比较操作符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#按照条件操作符操作返回值为true，不按照返回值为false</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件分支语法-1"><a href="#条件分支语法-1" class="headerlink" title="条件分支语法"></a>条件分支语法</h3><ul><li><p>if else</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#注意缩进</span><span class="token keyword">if</span> 条件：true执行条件<span class="token keyword">else</span><span class="token punctuation">:</span>    false执行条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>while循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#while可以重复运行需要循环的代码</span><span class="token keyword">while</span> 条件：true执行操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少"</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">while</span> guess <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"恭喜你答对了，但我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==思考==</p><ul><li>如何得到三次循环就结束？</li></ul><p>个人实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> <span class="token number">8</span>temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少："</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess<span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    guess <span class="token operator">=</span> int2                                                                                                                                           ``````````````````````````````````<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  <span class="token comment">#注意每次需要重新定义输入的数值，否则就不会运行=m的情况</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> m<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> m<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把："</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"都这么久了还答不出来："</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小甲鱼实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomtimes <span class="token operator">=</span> <span class="token number">3</span>secret <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------我爱鱼C工作室------------------'</span><span class="token punctuation">)</span><span class="token comment"># 这里先给guess赋值（赋一个绝对不等于secret的值）</span>guess <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print()默认是打印完字符串会自动添加一个换行符，end=" "参数告诉print()用空格代替换行</span><span class="token comment"># 嗯，小甲鱼觉得富有创意的你应该会尝试用 end="JJ"？</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不妨猜一下小甲鱼现在心里想的是哪个数字："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess <span class="token operator">!=</span> secret<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>times <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    times <span class="token operator">=</span> times <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment"># 用户每输入一次，可用机会就-1</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> secret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我草，你是小甲鱼心里的蛔虫吗？！"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜中了也没有奖励！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> secret<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哥，大了大了~~~"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"嘿，小了，小了~~~"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> times <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"再试一次吧："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"机会用光咯T_T"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩啦^_^"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机random-1"><a href="#随机random-1" class="headerlink" title="随机random"></a>随机random</h3><ul><li>random模块有函数：randint()</li><li>用法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">sercet <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 生成1,10十个随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随机实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomm <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜一下心里的数是多少："</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>guess<span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> m<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜中啦！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">></span> m<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了大了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了小了"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"猜错了，请重新输入把："</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"都这么久了还答不出来："</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我不玩了不玩了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件表达式（三元操作符）"><a href="#条件表达式（三元操作符）" class="headerlink" title="条件表达式（三元操作符）"></a>条件表达式（三元操作符）</h2><p>语法： ==<code>x if 条件 else y</code>==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1.三元操作符代码</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>    small <span class="token operator">=</span> x<span class="token keyword">else</span><span class="token punctuation">:</span>    small <span class="token operator">=</span> y<span class="token comment">#改进后三元操作符</span>small <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断言（assert）-（-一般用于程序检测-）"><a href="#断言（assert）-（-一般用于程序检测-）" class="headerlink" title="断言（assert） （==一般用于程序检测==）"></a>断言（assert） （==一般用于程序检测==）</h2><p>当assert关键字后边条件为<strong>假</strong>时，程序会自动崩溃并抛出AssertionError异常</p><p>==一般用于程序检测==</p><p><strong>用Ta再程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用</strong></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    循环体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 目标 <span class="token keyword">in</span> 表达式<span class="token punctuation">:</span>          循环体    <span class="token comment">#in，用于检查一个值是否在序列中，如果在序列中，返回True，否则返回False</span>实例： 将chihuo逐字打印，并添加空格<span class="token operator">>></span><span class="token operator">></span> favourite <span class="token operator">=</span> <span class="token string">'chihuo'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> favourite<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>c h i h u o 实例：打印一个列表里的所有字符，并计算其长度<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> i<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>xiaojiayu <span class="token number">9</span>chihuo <span class="token number">6</span>lanzi <span class="token number">5</span>sjksj <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>语法： <code>range([start,] stop[, step=1])</code></p><p>==range()一般常与for循环一起使用==</p><p>range()是生成一个从start参数的值开始到stop参数的值结束的数字序列.</p><p>step=1 表示第三个参数的值默认值为1，即步长为1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#不包含9</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#步长为2，以1为起点打印</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h3><ol><li><p>break</p><p>break可以终止程序的运行，一般与while搭配，可以嵌套在while中</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">chihuo <span class="token operator">=</span> <span class="token string">'我爱吃货'</span>answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'你知道我最爱谁吗？：'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> answer <span class="token operator">==</span> chihuo<span class="token punctuation">:</span>        <span class="token keyword">break</span>    answer  <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'我爱谁你不知道吗？再猜：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'果然懂我'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我就是最爱吃货，略略略'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>continue</p><p>continue语句作用是<strong>终止本轮循环，开始下一轮循环</strong></p><p>continue在一个循环体内，当这个循环体条件成立，则continue类似于break，当条件不成立，continue就会继续执行下去.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#当i为奇数时，程序终止，当i为偶数时，程序会通过continue继续执行下去</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">continue</span>    i <span class="token operator">+=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>列表中 可以任意添加元素</p><ol><li><p>创建普通列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mmm <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dshdj'</span><span class="token punctuation">,</span><span class="token string">'dsds'</span><span class="token punctuation">,</span><span class="token string">'dsds'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mmm<span class="token punctuation">[</span><span class="token string">'dshdj'</span><span class="token punctuation">,</span> <span class="token string">'dsds'</span><span class="token punctuation">,</span> <span class="token string">'dsds'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建混合列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xiaojiayu'</span><span class="token punctuation">,</span><span class="token number">3.131341</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'xiaojiayu'</span><span class="token punctuation">,</span> <span class="token number">3.131341</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建空列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="列表中添加元素"><a href="#列表中添加元素" class="headerlink" title="列表中添加元素"></a>列表中添加元素</h2><h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h3><p>用法：<code>列表.append(需添加的元素)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'颠三倒四'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">[</span><span class="token string">'颠三倒四'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==append()只可以添加一个元素==</p><h3 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend()方法"></a>extend()方法</h3><p>extend()方法是使用一个列表来扩展另一个列表，其参数应该是一个列表==列表使用中括号括起来==</p><p>用法：extend([元素])   </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'电死到三'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">[</span><span class="token string">'颠三倒四'</span><span class="token punctuation">,</span> <span class="token string">'电死到三'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h3><p>用法：<code>列表.insert(在列表中的位置，要插入的元素)</code></p><p>​         ==位置从0开始==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'爱你哟'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token string">'爱你哟'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'爱你哈哟'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token string">'爱你哟'</span><span class="token punctuation">,</span> <span class="token string">'爱你哈哟'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从列表中获取元素"><a href="#从列表中获取元素" class="headerlink" title="从列表中获取元素"></a>从列表中获取元素</h2><p>==列表索引值从0开始==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'爱你哟'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>将列表内元素互换</p><p>通过添加中间变量的方法实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> iqy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> iqy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token operator">>></span><span class="token operator">></span> iqy<span class="token punctuation">[</span><span class="token string">'爱你哈哟'</span><span class="token punctuation">,</span> <span class="token string">'爱你哟'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从列表删除元素"><a href="#从列表删除元素" class="headerlink" title="从列表删除元素"></a>从列表删除元素</h2><h3 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h3><ul><li><p>用法：<code>列表名.remove(&#39;元素&#39;)</code></p></li><li><p>使用remove删除元素，不需要知道其在元素内的位置，但是要知道元素名字</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'ewewe'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsda'</span><span class="token punctuation">,</span> <span class="token string">'dsad'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="del-方法"><a href="#del-方法" class="headerlink" title="del 方法"></a>del 方法</h3><ul><li><p>用法：<code>del 列表名[需要删除的元素在列表中的位置]</code></p></li><li><p>del可以删除对应位置的元素（注意从0开始）</p></li><li><p>del+列表名 可以删除整个列表</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> mem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsda'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h3><ul><li><p>用法：<code>列表名.pop() #删除列表中最后一个元素并打印</code></p></li><li><p>pop( )中不加任何值，会删除最后一个元素并打印</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'fefe'</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsda'</span><span class="token punctuation">,</span> <span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'fefee'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时此方法还可以用来提取列表中最后一个元素或对应元素</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> mem<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token string">'fefee'</span><span class="token operator">>></span><span class="token operator">></span> name1 <span class="token operator">=</span> mem<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name1<span class="token string">'dsda'</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表分片（Slice）"><a href="#列表分片（Slice）" class="headerlink" title="列表分片（Slice）"></a>列表分片（Slice）</h2><ul><li><p>列表分片可以一次性获取多个元素</p></li><li><p>用法：<code>列表名[初始元素地址:结束元素地址]</code></p></li><li><p>注意，列表分片不包含结束元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">,</span> <span class="token string">'weqewq'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>python可以省略初始元素地址，则从0元素开始；省略结束元素地址，则提取到结束元素地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">,</span> <span class="token string">'weqewq'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">,</span> <span class="token string">'weqewq'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当两个元素都不写时，可以得到列表的拷贝，==一般用在重新定义复制一个列表==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mem1 <span class="token operator">=</span> mem<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem<span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">,</span> <span class="token string">'weqewq'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mem1<span class="token punctuation">[</span><span class="token string">'dsdsd'</span><span class="token punctuation">,</span> <span class="token string">'dsdasdsa'</span><span class="token punctuation">,</span> <span class="token string">'fadfa'</span><span class="token punctuation">,</span> <span class="token string">'weqewq'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>列表分片拷贝后得到的是一个单独的列表，对原有列表进行操作不影响拷贝后的列表，但直接定义<code>list1 = list2</code>，两个列表是相同的</li></ul></li></ul><h2 id="列表中常用操作符"><a href="#列表中常用操作符" class="headerlink" title="列表中常用操作符"></a>列表中常用操作符</h2><h3 id="比较操作符-1"><a href="#比较操作符-1" class="headerlink" title="比较操作符"></a>比较操作符</h3><ul><li><p>列表中定义的操作符是可以比较大小的，只要有一个元素小，则为小，从第0个元素开始比较</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">></span> <span class="token builtin">list</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span>list1 <span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>list1 <span class="token operator">==</span> list2<span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>列表之间可以拼接,类似extend()方法去扩展列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list4 <span class="token operator">=</span> list1 <span class="token operator">+</span> list2 <span class="token comment">#加号两边类型必须一致 </span><span class="token operator">>></span><span class="token operator">></span> list4<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="成员关系操作符"><a href="#成员关系操作符" class="headerlink" title="成员关系操作符"></a>成员关系操作符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'xiao'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list1<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>not in 智能判断一个层次的列表包含，列表中包含新的列表则无法检测出来,==但可以人为指定位置==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'xiaojiayu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">465</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'xiaojiayu'</span> <span class="token keyword">in</span> list5<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'xiaojiayu'</span> <span class="token keyword">in</span> list5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment">#'xiaojiayu'位于第1个位置</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表中嵌套列表可以使用 <code>列表名[嵌套列表在列表中的位置][嵌套列表中元素所处位置]</code>打印出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'xiaojiayu'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="查看列表常用方法"><a href="#查看列表常用方法" class="headerlink" title="查看列表常用方法"></a>查看列表常用方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__class_getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__delitem__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__iadd__'</span><span class="token punctuation">,</span> <span class="token string">'__imul__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__iter__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__len__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__mul__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__reversed__'</span><span class="token punctuation">,</span> <span class="token string">'__rmul__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__setitem__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'append'</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'extend'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">#index方法索引元素</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">#count方法显示元素在列表中个数</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reverse-倒转函数元素"><a href="#reverse-倒转函数元素" class="headerlink" title="reverse() 倒转函数元素"></a>reverse() 倒转函数元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sort方法-将列表中的数从小到大排队"><a href="#sort方法-将列表中的数从小到大排队" class="headerlink" title="sort方法 将列表中的数从小到大排队"></a>sort方法 将列表中的数从小到大排队</h4><ul><li><code>列表.sort()从小到大排序</code></li><li><code>列表.sort(reverse = True)颠倒顺序，从大到小排序</code>一般情况下<code>reverse = False</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从小到大排序</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment">#从大到小排序</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list3<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元组：戴上了枷锁的列表"><a href="#元组：戴上了枷锁的列表" class="headerlink" title="元组：戴上了枷锁的列表"></a>元组：戴上了枷锁的列表</h1><ul><li>元组是不可改变的</li><li>元组和列表在实际使用的时候是很相似的</li></ul><h2 id="创建和访问元组-tuple"><a href="#创建和访问元组-tuple" class="headerlink" title="创建和访问元组(tuple)"></a>创建和访问元组(tuple)</h2><ul><li><p>创建元组使用（）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>元组的<code>,</code>是关键，<code>()</code>不是关键</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果创建的元组只有一个元素，可以在此元素后+<code>，</code>确保其为元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> temp2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="更新和删除一个元组"><a href="#更新和删除一个元组" class="headerlink" title="更新和删除一个元组"></a>更新和删除一个元组</h2><ul><li><p>可以通过中间插值的方法插入一个元组，==注意元组是（ , ）==</p><p>拼接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">'qwer'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> temp<span class="token punctuation">(</span><span class="token string">'dsad'</span><span class="token punctuation">,</span> <span class="token string">'weqeda'</span><span class="token punctuation">,</span> <span class="token string">'qwer'</span><span class="token punctuation">,</span> <span class="token string">'dasd'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>元组具有不可更改性，所以一般使用<code>del 元组名</code>删除元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> temp<span class="token operator">>></span><span class="token operator">></span> tempTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#18>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    tempNameError<span class="token punctuation">:</span> name <span class="token string">'temp'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined <span class="token comment">#temp未定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串内置方法"><a href="#字符串内置方法" class="headerlink" title="字符串内置方法"></a>字符串内置方法</h2><table><thead><tr><th align="left">方法</th><th align="left">用处</th></tr></thead><tbody><tr><td align="left">capitalize()</td><td align="left">返回一个首字母大写版本的新字符串（新字符串的首字母变为大写，其它字母变为小写）</td></tr><tr><td align="left">casefold()</td><td align="left">返回一个小写版本的新字符串（新字符串的所有字母变为小写）</td></tr><tr><td align="left">center(width, fillchar=’ ‘)</td><td align="left">返回一个字符居中的新字符串（width &lt;= 字符串长度，新字符串 = 原字符串；width &gt; 字符串宽度，所有字符居中，左右使用 fillchar 参数指定的字符填充）</td></tr><tr><td align="left">count(sub[, start[, end]])</td><td align="left">返回 sub 在字符串中不重叠的出现次数，可选参数 start 和 end 用于指定起始和结束位置</td></tr><tr><td align="left">encode(encoding=’utf-8’, errors=’strict’)</td><td align="left">以 encoding 参数指定的编码格式对字符串进行编码。errors 参数指定编码出现错误时的解决方案：默认的 ‘strict’ 表示如果出错，将抛出一个 UnicodeEncodeError 的异常。其它可用的参数值是 ‘ignore’，’replace’ 和 ‘xmlcharrefreplace’</td></tr><tr><td align="left">endswith(suffix[, start[, end]])</td><td align="left">如果字符串是以 suffix 指定的子字符串为结尾，那么返回 True，否则返回 False；可选参数 start 和 end 用于指定起始和结束位置</td></tr><tr><td align="left">expandtabs([tabsize=8])</td><td align="left">返回一个使用空格替换制表符的新字符串，如果没有指定 tabsize 参数，那么默认 1 个制表符 = 8 个空格</td></tr><tr><td align="left">find(sub[, start[, end]])</td><td align="left">在字符串中查找 sub 子字符串，返回匹配的最低索引值；可选参数 start 和 end 用于指定起始和结束位置；如果未能匹配子字符串，返回 -1</td></tr><tr><td align="left">format(*args,**kwargs)</td><td align="left">返回一个格式化的新字符串；使用位置参数（args）和关键字参数（kwargs）进行替换</td></tr><tr><td align="left">format_map(mapping)</td><td align="left">返回一个格式化的新字符串；使用映射参数（mapping）进行替换</td></tr><tr><td align="left">index(sub[, start[, end]])</td><td align="left">在字符串中查找 sub 子字符串，返回匹配的最低索引值；可选参数 start 和 end 用于指定起始和结束位置；如果未能匹配子字符串，抛出 ValueError 异常</td></tr><tr><td align="left">isalnum()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False</td></tr><tr><td align="left">isalpha()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是字母则返回 True，否则返回 False</td></tr><tr><td align="left">isascii()</td><td align="left">如果字符串中所有字符都是 ASCII 则返回 True，否则返回 False；ASCII 字符编码范围是 U+0000 ~ U+007F，空字符串也是 ASCII</td></tr><tr><td align="left">isdecimal()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是十进制数字则返回 True，否则返回 False</td></tr><tr><td align="left">isdigit()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是数字则返回 True，否则返回 False</td></tr><tr><td align="left">isidentifier()</td><td align="left">如果字符串是一个合法的 Python 标识符则返回 True，否则返回 False；调用</td></tr><tr><td align="left">keyword.iskeyword(s)</td><td align="left">可以检测字符串是否一个保留标识符（比如 “if” 或 “for”）</td></tr><tr><td align="left">islower()</td><td align="left">如果字符串中至少包含一个区分大小写的英文字母，并且这些字母都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">isnumeric()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是数字则返回 True，否则返回 False</td></tr><tr><td align="left">isprintable()</td><td align="left">如果字符串是可以打印的内容则返回 True，否则返回 False</td></tr><tr><td align="left">isprintable()</td><td align="left">如果字符串是可以打印的内容则返回 True，否则返回 False</td></tr><tr><td align="left">isspace()</td><td align="left">如果字符串中至少有一个字符并且所有字符都是空格，则返回 True，否则返回 False</td></tr><tr><td align="left">istitle()</td><td align="left">如果字符串是标题化字符串（所有的单词都是以大写开始，其余字母均小写）则返回 True，否则返回 False</td></tr><tr><td align="left">isupper()</td><td align="left">如果字符串中至少包含一个区分大小写的英文字母，并且这些字母都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">join(iterable)</td><td align="left">连接多个字符串并返回一个新字符串；以调用该方法的字符串作为分隔符，插入到 iterable 参数指定的每个字符串的中间；例如：’^’.join([“F”, “i”, “sh”, “C”]) -&gt; ‘F^i^sh^C’</td></tr><tr><td align="left">ljust(width)</td><td align="left">返回一个字符左对齐的新字符串（width &lt;= 字符串长度，新字符串 = 原字符串；width &gt; 字符串宽度，所有字符左对齐，右侧使用fillchar参数指定的字符填充）</td></tr><tr><td align="left">lstrip(chars=None)</td><td align="left">返回一个去除左侧空白字符的新字符串；通过 chars 参数可以指定将要去除的字符串</td></tr><tr><td align="left">partition(sep)</td><td align="left">在字符串中搜索 sep 参数指定的分隔符，如果找到，返回一个 3 元组 (‘在sep前面的部分’, ‘sep’, ‘在sep后面的部分’)；如果未找到，则返回 (‘原字符串’, ‘’, ‘’)</td></tr><tr><td align="left">removeprefix(prefix)</td><td align="left">如果存在 prefix 参数指定的前缀子字符串，则返回一个将该前缀去除后的新字符串；如果不存在，则返回一个原字符串的拷贝</td></tr><tr><td align="left">removesuffix(suffix)</td><td align="left">如果存在 suffix 参数指定的后缀子字符串，则返回一个将该后缀去除后的新字符串；如果不存在，则返回一个原字符串的拷贝</td></tr><tr><td align="left">replace(old, new, count=-1)</td><td align="left">返回一个将所有 old 参数指定的子字符串替换为 new 的新字符串；count 参数指定替换的次数，默认是 -1，表示替换全部</td></tr><tr><td align="left">rfind(sub[, start[, end]])</td><td align="left">在字符串中自右向左查找 sub 子字符串，返回匹配的最高索引值；可选参数 start 和 end 用于指定起始和结束位置；如果未能匹配子字符串，返回 -1</td></tr><tr><td align="left">rindex(sub[, start[, end]])</td><td align="left">在字符串中自右向左查找 sub 子字符串，返回匹配的最高索引值；可选参数 start 和 end 用于指定起始和结束位置；如果未能匹配子字符串，抛出 ValueError 异常</td></tr><tr><td align="left">rjust(width, fillchar=’ ‘)</td><td align="left">返回一个字符右对齐的新字符串（width &lt;= 字符串长度，新字符串 = 原字符串；width &gt; 字符串宽度，所有字符右对齐，左侧使用 fillchar 参数指定的==字符==填充）</td></tr><tr><td align="left">rpartition(sep)</td><td align="left">在字符串中自右向左搜索sep参数指定的分隔符，如果找到，返回一个 3 元组 (‘在sep前面的部分’, ‘sep’, ‘在sep后面的部分’)；如果未找到，则返回 (‘’, ‘’, ‘原字符串’)</td></tr><tr><td align="left">rsplit(sep=None,maxsplit=-1)</td><td align="left">将字符串自右向左进行分割，并将结果以列表的形式返回；sep 参数指定一个字符串作为分隔的依据，默认是任意空白字符；maxsplit 参数用于指定分割的次数（注意：分割 2 次的结果是 3 份），默认是不限制</td></tr><tr><td align="left">rstrip(chars=None)</td><td align="left">返回一个去除右侧空白字符的新字符串；通过 chars 参数可以指定将要去除的字符串</td></tr><tr><td align="left">split(sep=None, maxsplit=-1)</td><td align="left">将字符串进行分割，并将结果以列表的形式返回；sep 参数指定一个字符串作为分隔的依据，默认是任意空白字符；maxsplit参数用于指定分割的次数（注意：分割 2 次的结果是 3 份），默认是不限制</td></tr><tr><td align="left">splitlines(keepends=False)</td><td align="left">将字符串按行分割，并将结果以列表的形式返回；keepends 参数指定是否包含换行符，True 是包含，False 是不包含</td></tr><tr><td align="left">startswith(prefix[, start[,end]])</td><td align="left">如果存在 prefix 参数指定的前缀子字符串，则返回 True，否则返回 False；可选参数 start 和 end 用于指定起始和结束位置；prefix 参数允许以元组的形式提供多个子字符串</td></tr><tr><td align="left">strip(chars=None)</td><td align="left">返回一个去除左右两侧空白字符的新字符串；通过 chars 参数可以指定将要去除的字符串</td></tr><tr><td align="left">title()</td><td align="left">返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。</td></tr><tr><td align="left">translate(table)</td><td align="left">返回一个根据 table 参数转换后的新字符串；table 参数应该提供一个转换规则（可以由 str.maketrans(‘a’, ‘b’) 进行定制，例如 “FishC”.translate(str.maketrans(“FC”, “15”)) -&gt; ‘1ish5’）</td></tr><tr><td align="left">==swapcase()==</td><td align="left">返回一个大小写字母翻转的新字符串</td></tr><tr><td align="left">upper()</td><td align="left">返回一个所有英文字母都转换成大写后的新字符串</td></tr><tr><td align="left">lower()</td><td align="left">返回一个所有英文字母都转换成小写后的新字符串</td></tr><tr><td align="left">zfill(width)</td><td align="left">返回一个左侧用 0 填充的新字符串（width &lt;= 字符串长度，新字符串 = 原字符串；width &gt; 字符串宽度，所有字符右对齐，左侧使用 0 进行填充）</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li>capitalize()方法<ul><li>用来使首字母大写</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str12 <span class="token operator">=</span> <span class="token string">'xiaoxie'</span><span class="token operator">>></span><span class="token operator">></span> str12<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Xiaoxie'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>casefold()<ul><li>将整个字符串改为小写</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str2  <span class="token operator">=</span> <span class="token string">'DAHSJKDHJ'</span><span class="token operator">>></span><span class="token operator">></span> str2<span class="token punctuation">.</span>casefold<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'dahsjkdhj'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>expandtabs()<ul><li>将字符串中的‘\t’改为空格，包含之前的字符串</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str3 <span class="token operator">=</span> <span class="token string">'I\tlove\tfishC.com!'</span><span class="token operator">>></span><span class="token operator">></span> str3<span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'I       love    fishC.com!'</span> <span class="token comment">#包含I共八个字符空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>jion(sub)</p><ul><li>以字符串作为分隔符，插入到sub中所有字符之间，并且多次打印字符串</li></ul><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">&gt;&gt;&gt; str6 &#x3D; &#39;fishC&#39;&gt;&gt;&gt; str6.join(&#39;123&#39;)&#39;1fishC2fishC3&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>lstrip()</p><ul><li>删除字符串前的空格</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str6 <span class="token operator">=</span> <span class="token string">'    i love you'</span><span class="token operator">>></span><span class="token operator">></span> str6<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'i love you'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>partition(sub)</p><ul><li>将字符串以( )内字符串分隔开来，如果字符串不包含()内内容，则返回<code>(&#39;源字符串&#39;,&#39;&#39;,&#39;&#39;)</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str6 <span class="token operator">=</span> <span class="token string">'i love fishC'</span><span class="token operator">>></span><span class="token operator">></span> str6<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'i '</span><span class="token punctuation">,</span> <span class="token string">'lo'</span><span class="token punctuation">,</span> <span class="token string">'ve fishC'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> str6<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'ex'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'i love fishC'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>replace(old,new[,count = -1])</code>  #中括号代表可有可无</p><ul><li>返回一个将所有 old 参数指定的子字符串替换为 new 的新字符串</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str7<span class="token string">'C,C,C,C,C,C,C,C,C,'</span><span class="token operator">>></span><span class="token operator">></span> str7<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>'c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>C<span class="token punctuation">,</span>C<span class="token punctuation">,</span>C<span class="token punctuation">,</span>C<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>split(sep=None, maxsplit=-1)</code></p><ul><li><p>不带参数时默认以空格为分隔符切片字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str6<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'love'</span><span class="token punctuation">,</span> <span class="token string">'fishC'</span><span class="token punctuation">]</span> <span class="token comment">#列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>带参数时以参数为分隔符切片，参数替换为空格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str6<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">' love f'</span><span class="token punctuation">,</span> <span class="token string">'shC'</span><span class="token punctuation">]</span> <span class="token comment">#按照i来切，i被替换为空格</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>strip([chars])</code></p><ul><li><p>删除字符串前边和后边的所有空格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str5 <span class="token operator">=</span> <span class="token string">'     ssssdada    '</span><span class="token operator">>></span><span class="token operator">></span> str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ssssdada'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>chars参数制定后，可以删除特定字符</p><p>但如果指定字符前有其他字符或者空格，无法删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str5<span class="token string">'ssssdada'</span><span class="token operator">>></span><span class="token operator">></span> str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token string">'dada'</span><span class="token operator">>></span><span class="token operator">></span> str4<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token string">'iiiiikkkkkmmmmmmiiiiii'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>swapcase()</code></p><ul><li><p>翻转字符串中大小写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">'<span class="token operator">>></span><span class="token operator">></span> str5<span class="token string">'ssssdada'</span><span class="token operator">>></span><span class="token operator">></span> str5<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'SSSSDADA'</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>==<code>translate(table)</code>==</p><ul><li><p>根据table的规则来转换字符串中的字符，规则可以为 <code>str.maketrans(&#39;a&#39;, &#39;b&#39;)</code>,并且可以索引字符串中的参数==自动对应==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str4 <span class="token operator">=</span> <span class="token string">'我爱宝贝我爱吃货'</span><span class="token operator">>></span><span class="token operator">></span> str4<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'宝贝吃货'</span><span class="token punctuation">,</span><span class="token string">'吃货宝贝'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'我爱吃货我爱宝贝'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'宝贝吃货'</span><span class="token punctuation">,</span><span class="token string">'吃货宝贝'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">23453</span><span class="token punctuation">:</span> <span class="token number">21507</span><span class="token punctuation">,</span> <span class="token number">36125</span><span class="token punctuation">:</span> <span class="token number">36135</span><span class="token punctuation">,</span> <span class="token number">21507</span><span class="token punctuation">:</span> <span class="token number">23453</span><span class="token punctuation">,</span> <span class="token number">36135</span><span class="token punctuation">:</span> <span class="token number">36125</span><span class="token punctuation">&#125;</span><span class="token comment">#实际上是将对应字符串的ASCII码替换掉，实现字符串的替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>zfill(width)</code></p><ul><li><p>返回长度为width的字符串，==width&lt;原字符串长度，返回原字符串；width&gt;原字符串长度，==原字符串右对齐，<strong>前边用0填充</strong></p><p><em>z是zero的意思</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str4<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token string">'0我爱宝贝我爱吃货'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>format()</p><ul><li><p>字符串整理</p></li><li><p>两种参数形式</p></li><li><p>地址参数：将()内的元素以地址形式传递给左边</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"&#123;0&#125; love &#123;1&#125;.&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">"FishC"</span><span class="token punctuation">,</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token string">'I love FishC.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关键字参数：（）内定义关键字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"&#123;a&#125; love &#123;b&#125;.&#123;c&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">"I"</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token string">"FishC"</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">"com"</span><span class="token punctuation">)</span><span class="token string">'I love FishC.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><table><thead><tr><th>符  号</th><th align="left">说   明</th></tr></thead><tbody><tr><td>%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td>%s</td><td align="left">格式化字符串</td></tr><tr><td>%d</td><td align="left">格式化整数</td></tr><tr><td>%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td>%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td>%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td align="left">格式化定点数，可指定小数点后的精度</td></tr><tr><td>%e</td><td align="left">用科学计数法格式化定点数</td></tr><tr><td>%E</td><td align="left">作用同%e，用科学计数法格式化定点数</td></tr><tr><td>%g</td><td align="left">根据值的大小决定使用%f或者%e</td></tr><tr><td>%G</td><td align="left">作用同%g，根据值的大小决定使用%F或者%E</td></tr></tbody></table><ul><li><p><code>%c</code>  格式化字符及其ASCII码</p><ul><li>格式化字符前只能空格，之后可以加‘ , ’</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%c %c %c'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token string">'a b c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>%s</code> 格式化字符串</p><ul><li>将后的字符串格式化（一般无用）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'woai'</span><span class="token punctuation">)</span><span class="token string">'woai'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token string">'98'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>%d  格式化整数</p><ul><li>无论整数还是浮点数，同一格式化为整数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5.14</span><span class="token punctuation">)</span><span class="token string">'5'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token string">'8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>%o  格式化无符号八进制数</p><ul><li>八进制数一般用0o表示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'0o%o'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token string">'0o11'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>%x  格式化无符号十六进制数</p></li><li><p>%X  格式化无符号十六进制数（大写）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'0x%X'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token string">'0x32'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>%f  格式化定点数，可指定小数点后的精度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%0.1f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5.26558</span><span class="token punctuation">)</span><span class="token string">'5.3'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%0.3f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5.26558</span><span class="token punctuation">)</span><span class="token string">'5.266'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>%e  用科学计数法格式化定点数</p></li><li><p>%E  作用同%e，用科学计数法格式化定点数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%e'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5.22</span><span class="token punctuation">)</span><span class="token string">'5.220000e+00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>%g  根据值的大小决定使用%f或者%e</p></li><li><p>%G  作用同%g，根据值的大小决定使用%F或者%E</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">592222</span><span class="token punctuation">)</span><span class="token string">'592222'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">)</span><span class="token string">'5e+06'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">0.526</span><span class="token punctuation">)</span><span class="token string">'0.526'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">0.50000</span><span class="token punctuation">)</span><span class="token string">'0.5'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">0.00000002</span><span class="token punctuation">)</span><span class="token string">'2e-08'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h2 id="序列-内置方法"><a href="#序列-内置方法" class="headerlink" title="序列 内置方法"></a>序列 内置方法</h2><table><thead><tr><th align="center">内置方法</th><th>用法</th></tr></thead><tbody><tr><td align="center">list(列表/元组)</td><td>list(参数)通过迭代将数列或者元组都转换成一个字符的数列</td></tr><tr><td align="center">tuple()</td><td>将一个可迭代对象转换成元组</td></tr><tr><td align="center">len()</td><td>查看数列或者元组的长度</td></tr><tr><td align="center">max()</td><td>返回序列或者参数集合中的最大值，字符串比较其中字符的ASCII码大小</td></tr><tr><td align="center">min()</td><td>返回序列或者参数集合中的最小值</td></tr><tr><td align="center">sum()</td><td></td></tr><tr><td align="center">sum(interable[,start = 0])</td><td>返回序列iterable和可选参数start的总和</td></tr><tr><td align="center">sorted()</td><td>从小到大排列</td></tr><tr><td align="center">reversed()</td><td>==list(reversed(列表))==，将列表逆转,但不包含排序功能，需结合sorted()方法一起使用</td></tr><tr><td align="center">enumerate()</td><td>==list(enumerate())==枚举，将元素索引值和元素形成一个元组</td></tr><tr><td align="center">zip(a,b)</td><td>==list(zip(a,b))==将a列表和b列表中的元素对应，并形成元组将a列表和b列表中的元素对应，并形成元组（多余省去）</td></tr></tbody></table><ul><li><p>list(参数)</p><ul><li>list(参数)通过迭代将数列或者元组都转换成一个字符的数列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'I love FishC.com'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>tuple()</p><ul><li>将一个可迭代对象转换成元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>len()</p><ul><li>查看数列或者元组的长度</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'I love FishC.com'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>max()</p><ul><li>返回序列或者参数集合中的最大值</li><li>字符串比较其中字符的ASCII码大小</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'I love FishC.com'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment">#此处返回的是ASCII码，V的ASCII码是最大的，</span><span class="token string">'v'</span><span class="token operator">>></span><span class="token operator">></span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token number">78</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>min()</p><ul><li>返回序列或者参数集合中的最小值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>==注意==：无论是max()还是min()，都只能判断同一种参数，或是数字，或是字符</p><p>反例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">#TypeError: '>' not supported between instances of 'str' and 'int' </span>即无法比较字符串还是数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>sum()</p><ul><li>sum(interable[,start = 0])返回序列iterable和可选参数start的总和</li><li>==sum只能用于数字==</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sum</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token number">8.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>sorted()</p><ul><li>从小到大排列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>reverse()</p><ul><li>reversed(列表)输出为对象，无法显示，需使用list(reversed())将其转为列表输出</li><li>list(reversed(列表))</li><li>将列表排序逆转,但不包含排序功能，需结合sorted()方法一起使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_reverseiterator <span class="token builtin">object</span> at <span class="token number">0x00000158A6D25610</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>enumerate()</p><ul><li>枚举，将元素索引值和元素形成一个元组</li><li>(index,元素)  -&gt;(元素索引值，元素)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>zip</p><ul><li>zip(a,b)将a列表和b列表中的元素对应，并形成元组</li><li>zip()直接输出为对象，需要list(zip(a,b))将其输出值强制转换为列表</li><li>==对应位置输出为元组，多余的省略==</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​                                   </p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><ul><li><p>使用 <code>def</code>定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">MyFirstFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'砂石款'</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>MyFirstFunction<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>可在函数名内定义一个参数，并且调用函数时需要为其赋值一个参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">MySecondFunction</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'我爱你'</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> MySecondFunction<span class="token punctuation">(</span><span class="token string">'吃货'</span><span class="token punctuation">)</span>吃货我爱你<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>各个参数之间可以以<code>,</code>隔开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>形参指函数（）内的参数</p><p>实参指为（）内参数实际的赋值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">MyFirstFunction</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">'函数定义过程中的name是叫形参'</span><span class="token comment">#因为Ta只是一个形式，表示占据一个参数位置</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'传递进来的'</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'叫做实参，因为Ta是具体的参数值'</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> MyFirstFunction<span class="token punctuation">(</span><span class="token string">'吃货'</span><span class="token punctuation">)</span>传递进来的吃货叫做实参，因为Ta是具体的参数值<span class="token operator">>></span><span class="token operator">></span> MyFirstFunction<span class="token punctuation">.</span>__doc__  <span class="token comment">#打印函数的属性</span><span class="token string">'函数定义过程中的name是叫形参'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>打印函数的属性：</p><p>`函数名.<strong>doc</strong></p><ul><li><p>或者使用help(函数名)也可实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">help</span><span class="token punctuation">(</span>MyFirstFunction<span class="token punctuation">)</span>Help on function MyFirstFunction <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>MyFirstFunction<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    函数定义过程中的name是叫形参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><ul><li>在使用函数时，可以使用函数的形参作为关键字，就不会使编程混乱了</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">SaySome</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'->'</span> <span class="token operator">+</span> words <span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span><span class="token string">'我爱'</span> <span class="token punctuation">,</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span>我爱<span class="token operator">-</span><span class="token operator">></span>吃货<span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span>words <span class="token operator">=</span> <span class="token string">'我爱'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span> 吃货<span class="token operator">-</span><span class="token operator">></span>我爱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><ul><li><p>在定义函数时即为函数参数定义一个默认值，如果调用函数时不输入参数，则以默认值输出</p></li><li><p>若只定义了一个参数，并且未指定关键字参数，则默认替换第一个，使用关键字参数，则关键字参数优先级高</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span>words <span class="token operator">=</span> <span class="token string">'我爱'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span>  <span class="token comment">#指定默认参数</span>吃货<span class="token operator">-</span><span class="token operator">></span>我爱<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">SaySome</span><span class="token punctuation">(</span>name<span class="token operator">=</span> <span class="token string">'小甲鱼'</span><span class="token punctuation">,</span>words <span class="token operator">=</span> <span class="token string">'让编程改变世界'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'->'</span> <span class="token operator">+</span> words <span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span><span class="token punctuation">)</span>小甲鱼<span class="token operator">-</span><span class="token operator">></span>让编程改变世界<span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span><span class="token string">'吃货'</span><span class="token punctuation">)</span>  <span class="token comment">#默认为name参数</span>吃货<span class="token operator">-</span><span class="token operator">></span>让编程改变世界<span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span>words <span class="token operator">=</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span> <span class="token comment">#指定关键字参数</span>小甲鱼<span class="token operator">-</span><span class="token operator">></span>吃货<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="收集参数（可变参数）"><a href="#收集参数（可变参数）" class="headerlink" title="收集参数（可变参数）"></a>收集参数（可变参数）</h2><ul><li><p>当我们不确定需要几个参数的时候使用收集参数，就可使用无限个参数</p></li><li><p>==使用方法==：<code>def 函数名(*参数)</code></p><p>即在参数前加*</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数的长度是：'</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二个参数是：'</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小甲鱼'</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">#可以随意定义参数个数，类似于将参数转换为了元组</span>参数的长度是： <span class="token number">7</span>第二个参数是： 小甲鱼<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若需要再使用其他参数，则在调用函数时，需要为后面的参数指定关键字，否则会报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">,</span>exp<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数的长度是：'</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'第二个参数是：'</span><span class="token punctuation">,</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二个参数是：'</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小甲鱼'</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>exp <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>参数的长度是： <span class="token number">6</span> 第二个参数是： <span class="token number">8</span>第二个参数是： 小甲鱼<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数与过程"><a href="#函数与过程" class="headerlink" title="函数与过程"></a>函数与过程</h2><ul><li><p>python所有函数都会有返回值，有值则返回值，没有则返回None</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello FishC'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span>Hello FishC<span class="token operator">>></span><span class="token operator">></span> temp<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token boolean">None</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NoneType'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>若想返回多个值，可以使用元组或者列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">]</span> <span class="token comment">#列表内可以包含所有类型</span><span class="token operator">>></span><span class="token operator">></span> back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">3.14</span>  <span class="token comment">#元组只需要使用 , 隔开</span><span class="token operator">>></span><span class="token operator">></span> back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="局部、全局变量"><a href="#局部、全局变量" class="headerlink" title="局部、全局变量"></a>局部、全局变量</h2><ul><li>局部变量(Local Variable)</li></ul><p>局部变量只在局部生效的变量，在函数中定义的变量为局部变量，在函数外无法访问它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">jubu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>Local<span class="token operator">=</span> <span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token comment"># print(local)</span><span class="token comment">#NameError: name 'local' is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局变量（Global Variable）</li></ul><p>全局变量无论在函数体内或者外部都可以使用，但是全局变量的修改会很麻烦，在函数内如果想要修改全局变量，Python会自动创建一个与全局变量名字相同的局部变量，但全局变量值不变。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aa  <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">>></span> <span class="token keyword">def</span> <span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>aa <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数体内的aa='</span><span class="token punctuation">,</span>aa<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Global<span class="token punctuation">(</span><span class="token punctuation">)</span>函数体内的aa<span class="token operator">=</span> <span class="token number">50</span> <span class="token comment">#此时的aa是新创建的局部变量</span><span class="token operator">>></span><span class="token operator">></span> aa <span class="token comment">#全局变量</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内嵌函数和闭包"><a href="#内嵌函数和闭包" class="headerlink" title="内嵌函数和闭包"></a>内嵌函数和闭包</h2><ul><li><p>global 关键字</p><ul><li>在函数中将局部变量更改为全局变量</li><li>使用方法：<code>global 变量名</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    count <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> MyFun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="内嵌函数（内部函数）"><a href="#内嵌函数（内部函数）" class="headerlink" title="内嵌函数（内部函数）"></a>内嵌函数（内部函数）</h3><ul><li>内部函数整个作用域都在函数内，在函数外无法使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单例子</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fun1()正在被调用。。。。'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fun2()正在被调用'</span><span class="token punctuation">)</span>fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>正在被调用。。。。fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>正在被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li><p>如果在一个内部函数对外部作用域（但不是在全局作用域）的变量进行引用，内部函数就会被认定为闭包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">FunX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">FunY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> x <span class="token operator">*</span> y   <span class="token comment"># 对x进行了引用，此时FunY为闭包</span><span class="token keyword">return</span> FunY<span class="token operator">>></span><span class="token operator">></span> i <span class="token operator">=</span> FunX<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">#x = 8</span><span class="token operator">>></span><span class="token operator">></span> i<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">#(5)为y的值</span><span class="token number">40</span><span class="token operator">>></span><span class="token operator">></span> FunX<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#即x = 8,y = 5</span><span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="闭包的注意事项"><a href="#闭包的注意事项" class="headerlink" title="闭包的注意事项"></a>闭包的注意事项</h4><ul><li><p>在闭包中所定义的变量不能在闭包外使用，类似局部变量和全局变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#虽然定义了x = 5,但实际上在返回值为Fun2()，即会运行Fun2()，若在Fun2()中对x进行修改，则Fun2()中的x为一个新定义的全局变量</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">Fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>x <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>x <span class="token operator">*=</span> x<span class="token keyword">return</span> x<span class="token keyword">return</span> Fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#UnboundLocalError: local variable 'x' referenced before assignment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若要在闭包中修改外部定义的变量，有两种方式</p><ul><li><p>使用容器的概念，将变量转换为列表，由于列表不存放在栈中，因此不会被内部函数屏蔽掉</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">Fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">return</span> Fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用关键字 nonlocal</p><p>将内部函数中需要修改的局部变量的变量强制改为外部函数变量，实现外部函数变量值的变化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">Fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">nonlocal</span> x  <span class="token comment">#此时Fun2()中x已经被定义为了非局部变量，即代替了Fun1()中的x</span>x <span class="token operator">*=</span> x<span class="token keyword">return</span> x<span class="token keyword">return</span> Fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul><li><p>使用方法：<code>lambda 原函数参数 : 原函数返回值</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span>等介于<span class="token keyword">def</span> <span class="token function">ds</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>lambda是匿名的，在一定程度上可以代替函数定义式，无须取名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">11</span><span class="token comment">#多参数使用方法</span><span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">,</span> y <span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="lambda表达式作用"><a href="#lambda表达式作用" class="headerlink" title="lambda表达式作用"></a>lambda表达式作用</h3><p>![image-20210204095536998](C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210204095536998.png)</p><h3 id="两个BIF"><a href="#两个BIF" class="headerlink" title="两个BIF"></a>两个BIF</h3><h4 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter() 过滤器"></a>filter() 过滤器</h4><ul><li><p> 使用方法：<code>filter(function or None,可迭代数据)</code></p></li><li><p>filter有两个参数，第一个参数可以是一个函数或者None</p></li><li><p>==如果第一个参数是函数，则将第二个可迭代数据里的每一个元素作为函数的参数进行计算==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#与lambda一起使用</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#一般直接使用filter无法直接显示，需要使用list()将结果显示出来</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment">#使用原来的函数定义</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> show <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>odd<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>show<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果第一个参数为None，则将第二个可迭代数据里的True选项筛选出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#例子</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>  <span class="token comment">#第一个参数为None，将非0和True筛选出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="map-映射"><a href="#map-映射" class="headerlink" title="map()  映射"></a>map()  映射</h4><ul><li>使用方法：<code>map(函数，可迭代序列)</code></li><li>​    将序列的每一个元素作为函数的参数进行运行加工，直到所有元素加工完毕，返回一个新序列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#函数定义使用</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">map2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#对列表的加入操作，int型不可以直接添加进列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="filter-和-map-区别"><a href="#filter-和-map-区别" class="headerlink" title="filter() 和 map()区别"></a>filter() 和 map()区别</h4><ul><li><p>filter()是将可迭代序列作为函数参数进行运算，返回结果为==真==的值（即结果不为0）</p></li><li><p>map()将可迭代序列作为函数参数进行运算，但是是将所有值都输出，不进行筛选</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="递归-recursion"><a href="#递归-recursion" class="headerlink" title="递归 recursion()"></a>递归 recursion()</h1><ul><li><p>函数调用自身的行为</p></li><li><p>一般情况下函数直接调用自身会报错，而python会限制递归在一百层</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> recursion<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> recursion<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#RecursionError: maximum recursion depth exceeded  达到最大深度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用sys包中的<code>setrecursionlimit(层数)</code>来定义递归深度，一般不建议过大</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="递归的使用方法"><a href="#递归的使用方法" class="headerlink" title="递归的使用方法"></a>递归的使用方法</h2><h3 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h3><ul><li><p>写一个求阶乘的函数</p></li><li><p>正整数阶乘指从1乘以2乘以3乘以4一直乘到所要求的数。</p></li><li><p>例如所给的数是5，则阶乘式是1×2×3X4×5，得到的积是120，所以120就是4的阶乘。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 阶乘factorial_1</span>正常使用函数完成阶乘<span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> i    <span class="token keyword">return</span> resultnumber <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> factorial<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d 的阶乘是： %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>number<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#使用递归完成阶乘</span><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>     <span class="token comment">#当n = 1时，不再调用自身，结束条件</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#调用函数自身</span>number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个正整数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> factorial<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d 的阶乘是： %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>number<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#函数分析</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> factorial<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>factorial<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> factorial<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    factorial<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> factorial<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        factorial<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> factorial<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            factorial<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>再一层层返回将各个factorial<span class="token punctuation">(</span><span class="token punctuation">)</span>的值返回上面的factorial<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>递归要满足调用函数自身，并且有一个正确的返回条件</li></ul><h2 id="递归思考"><a href="#递归思考" class="headerlink" title="递归思考"></a>递归思考</h2><p>递归思想实际上是分治思想，将一个难题改成两个不难的问题来解决</p><p>递归实际上就是将原本程序需要==返回的值==直接赋值给函数，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> y<span class="token punctuation">:</span>        t <span class="token operator">=</span> x <span class="token operator">%</span> y        x <span class="token operator">=</span> y        y <span class="token operator">=</span> t    <span class="token keyword">return</span> x<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">>></span><span class="token operator">>></span><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x <span class="token operator">%</span> y<span class="token punctuation">)</span>  <span class="token comment">#x的返回值是y,y的返回值是x % y</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>```bash<br>1、必须有一个明确的结束条件<br>2、每次进入更深一层递归时，问题规模(计算量)相比上次递归都应有所减少<br>3、递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）<pre class="line-numbers language-none"><code class="language-none">## 斐波那契数列 - 递归![image-20210206090907321](C:\Users\One piece\AppData\Roaming\Typora\typora-user-images\image-20210206090907321.png)后一个数都是前面两个数的和 ### 兔子例子&#96;&#96;&#96;python#一般迭代实现&gt;&gt;&gt; def tuzi(n):n1 &#x3D; 1n2 &#x3D; 1n3 &#x3D; 1if n &lt; 1:print(&#39;输入错误&#39;)return -1while (n-2) &gt; 0:n3 &#x3D; n2 + n1n1 &#x3D; n2n2 &#x3D; n3n -&#x3D; 1return n3#递归实现def tuzi1(n):    if n &lt; 1:        print(&#39;输入错误&#39;)        return -1   #1代表程序错误，终止    else:        if n &#x3D;&#x3D; 1 or n &#x3D;&#x3D; 2:            return 1        else:            return tuzi1(n-2) + tuzi1(n-1)        result &#x3D; tuzi1(20)if result !&#x3D; -1:    print(&#39;共有%d 对小兔子诞生&#39; % (result))        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#x,y,z为三根针</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">'->'</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        hanoi<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token comment">#将前n-1个盘子从x 移动到y上  此时z为中间值，为中间借用柱子，实际上是以第一个和最后一个为变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">'-->'</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token comment">#将最底下的最后一个盘子从x移动到z上</span>        hanoi<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token comment">#从y上将n-1个盘子移动到z上，可以经过x</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入汉诺塔层数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hanoi<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token string">'Z'</span><span class="token punctuation">)</span>  move<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> move<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span> move<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul><li>单词在Python中为 键(key)</li><li>单词代表的意思在Python中为 值(value )</li><li>字典源于映射 （一对一，一对多）</li></ul><h2 id="创建和访问字典"><a href="#创建和访问字典" class="headerlink" title="创建和访问字典"></a>创建和访问字典</h2><ul><li><p><strong>字典使用{}表示，列表使用[]表示，元组使用()表示</strong></p></li><li><p>字典是映射类型,</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'李宁'</span><span class="token punctuation">,</span><span class="token string">'奈特'</span><span class="token punctuation">,</span><span class="token string">'阿迪达斯'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h3><ul><li><p>方法 : <code>字典名 = &#123;key1 : value1, key2 : value2&#125;</code></p></li><li><p>一个 <code>key1 : value1</code>称为项</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'李宁'</span><span class="token punctuation">:</span>一切皆有可能<span class="token punctuation">,</span><span class="token string">'奈特'</span><span class="token punctuation">:</span><span class="token string">'Just do it'</span><span class="token punctuation">,</span><span class="token string">'阿迪达斯'</span><span class="token punctuation">:</span><span class="token string">'Impossible is nothing'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'李宁的口号是：'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">[</span><span class="token string">'李宁'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#或 添加方法二</span><span class="token operator">>></span><span class="token operator">></span> dict4<span class="token punctuation">[</span><span class="token string">'小甲鱼'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'小憨批'</span><span class="token operator">>></span><span class="token operator">></span> dict4<span class="token punctuation">&#123;</span><span class="token string">'小甲鱼'</span><span class="token punctuation">:</span> <span class="token string">'小憨批'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="字典访问"><a href="#字典访问" class="headerlink" title="字典访问"></a>字典访问</h3><ul><li><p>字典访问是使用 <code>字典名[key]</code>来实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'李宁的口号是：'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">[</span><span class="token string">'李宁'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="dict字典-方法"><a href="#dict字典-方法" class="headerlink" title="dict字典 方法"></a>dict字典 方法</h2><p><code>dict</code>是一个 工厂函数(类型)，调用<code>dict</code>会生成该类型的一个实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dict(mapping)</span><span class="token operator">>></span><span class="token operator">></span> dict3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#由于mapping为一个参数，使用元组代替</span><span class="token operator">>></span><span class="token operator">></span> dict3<span class="token punctuation">&#123;</span><span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">67</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> dict4 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>小甲鱼<span class="token operator">=</span> <span class="token string">'让编程改变世界'</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">#直接通过dict关键字创建字典，此时返回的是一个字典</span><span class="token operator">>></span><span class="token operator">></span> dict4<span class="token punctuation">&#123;</span><span class="token string">'小甲鱼'</span><span class="token punctuation">:</span> <span class="token string">'让编程改变世界'</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改已创建的字典"><a href="#修改已创建的字典" class="headerlink" title="修改已创建的字典"></a>修改已创建的字典</h3><ul><li><p>试图修改已创建的字典，如果字典中已有对应的key，字对应修改，无则创建新的字典映射</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict4 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>小甲鱼<span class="token operator">=</span> <span class="token string">'让编程改变世界'</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict4<span class="token punctuation">[</span><span class="token string">'小甲鱼'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'小憨批'</span><span class="token operator">>></span><span class="token operator">></span> dict4<span class="token punctuation">&#123;</span><span class="token string">'小甲鱼'</span><span class="token punctuation">:</span> <span class="token string">'小憨批'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字典内键方法"><a href="#字典内键方法" class="headerlink" title="字典内键方法"></a>字典内键方法</h2><ul><li>查询方法：<code>dir(dict)</code></li></ul><h3 id="fromkeys-…-方法"><a href="#fromkeys-…-方法" class="headerlink" title="fromkeys(…)方法"></a>fromkeys(…)方法</h3><ul><li><p><code>dict.fromkeys(S[,v])</code></p></li><li><p>S:字典的键值   v：字典的值，可选</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#只有键值时返回value = None</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span class="token comment">#指定Value时，之前的键值都会相应地修改</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Number'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'Number'</span><span class="token punctuation">&#125;</span><span class="token comment">#当value定义多个时，key并不会一一对应，而是将value的整个值都赋值给key</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'one,two,three'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'one,two,three'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'one,two,three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'one,two,three'</span><span class="token punctuation">&#125;</span><span class="token comment">#formkeys无法只修改一个字典中对应的键值，只会将其重新改为一个新的字典</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'数字'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'数字'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'数字'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><strong>注意事项：</strong><ul><li>只有键值时返回value = None</li><li>指定Value时，之前的键值都会相应地修改</li><li>当value定义多个时，key并不会一一对应，而是将value的整个值都赋值给key</li><li>无法只修改一个字典中对应的键值，只会将其重新改为一个新的字典</li></ul></li></ul><h3 id="keys-方法"><a href="#keys-方法" class="headerlink" title="keys()方法"></a>keys()方法</h3><ul><li><p>返回字典键的引用</p></li><li><p>一般使用在for循环中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'赞'</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="values-方法"><a href="#values-方法" class="headerlink" title="values()方法"></a>values()方法</h3><ul><li><p>返回字典值</p></li><li><p>一般用在for循环中，可以提取value</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> eachValue <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>eachValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="items-方法"><a href="#items-方法" class="headerlink" title="items()方法"></a>items()方法</h3><ul><li><p>返回字典的项  (key,value)</p></li><li><p>一般用在for循环中，使用一个元组将键 与 值表示出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> eachItem <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>eachItem<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'赞'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'赞'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'赞'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><ul><li><p>get（key[,’自定义返回值’]）</p></li><li><p>get方法要是字典中存在键，则相应打印对应的value</p></li><li><p>若字典中不存在相应地键，则返回一个None值，或者自己在后面定义返回值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span>赞<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">'木有这个键值！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>木有这个键值！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="成员资格操作符-in-和-not-in"><a href="#成员资格操作符-in-和-not-in" class="headerlink" title="成员资格操作符 in 和 not in"></a>成员资格操作符 in 和 not in</h3><ul><li><p>如果不知道一个<strong>键</strong>是否在字典中，可以使用成员操作符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">32</span> <span class="token keyword">in</span> dict1<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">31</span> <span class="token keyword">in</span> dict1<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="clear-方法-清空字典"><a href="#clear-方法-清空字典" class="headerlink" title="clear()方法  清空字典"></a>clear()方法  清空字典</h3><ul><li><p>使用<code>字典.clear()清空字典</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'吃货'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果直接将字典赋值为空，即<code>dict1 = &#123;&#125;</code>，则若此字典之前传递值给其他字典，其他字典并没有清空，使用<code>clear()</code>方法则避免此情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'吃货'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> dict1<span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#使用clear()方法则避免此情况</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="copy-方法"><a href="#copy-方法" class="headerlink" title="copy()方法"></a>copy()方法</h3><ul><li><p><code>copy()</code>是前拷贝方法，只拷贝字典的值，但不拷贝字典的地址，<strong>因此使用clear()不可删除拷贝后的字典</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'three'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">#a的地址</span><span class="token number">2591425320832</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">2591425208512</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">2591425320832</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token comment">#删除a并不能删除b</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'three'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="pop-方法-1"><a href="#pop-方法-1" class="headerlink" title="pop()方法"></a>pop()方法</h3><ul><li><p>给定键弹出对应的值,<strong>必须要指定对应的键</strong></p></li><li><p>弹出后删除字典中的键</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'吃货'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'吃货'</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'吃货'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="popitem-方法"><a href="#popitem-方法" class="headerlink" title="popitem()方法"></a>popitem()方法</h3><ul><li><p>随机从数据中弹出一个项,即 <code>(key,value)</code></p></li><li><p>键在字典中并没有顺序，因此popitem<strong>随机弹出</strong>，弹出后删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'three'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault()方法"></a>setdefault()方法</h3><ul><li><p>使用： <code>字典名.setdefault(key[,value])</code></p></li><li><p>类似于get方法,</p></li><li><p>若字典中有寻找的键，则输出对应的值</p></li><li><p>若字典中无对应键，则创建一个项，值value = None</p></li><li><p>若给键对应的值，则添加键值,已输入的键值无法修改(==get也不可以==)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'wo'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'ai'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'ni'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'wo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'ai'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'ni'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">#有对应的键</span><span class="token string">'wo'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'wo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'ai'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'ni'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#无对应键</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'wo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'ai'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'ni'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'chihuo'</span><span class="token punctuation">)</span>  <span class="token comment">#添加键值</span><span class="token string">'chihuo'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'wo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'ai'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'ni'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'chihuo'</span><span class="token punctuation">&#125;</span>  <span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="update-方法"><a href="#update-方法" class="headerlink" title="update()方法"></a>update()方法</h3><ul><li><p>使用一个字典的映射更新另一个字典</p></li><li><p>使用方法： <code>a.update(b)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'小白'</span><span class="token punctuation">:</span><span class="token string">'狗'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'wo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'ai'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'ni'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'chihuo'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'chihuo'</span><span class="token punctuation">,</span> <span class="token string">'小白'</span><span class="token punctuation">:</span> <span class="token string">'狗'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h2><p>哈希函数又被称为散列函数，将每一个数据都对应一个地址，字典的键被作为参数进行转换，得到唯一的地址，所以相同的键赋值会直接覆盖，相同的键转换后的地址是一样的</p><p>字典的键（key）必须是可哈希的，即通过散列函数可以计算出唯一的地址，但是变量，列表，字典，集合都是可变的，不能作为键(ket)来使用</p><p>python的哈希算法对相同的值计算得到的结果是一样的，12315和12315.0的值是相同的</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li><p>集合里的数都是唯一的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> num2<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>空的字典类型是字典，但字典中有值时，其本质为一个集合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> num2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'set'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>集合是无序的，不能去索引集合中的某一元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#8>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    num2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><ul><li><p>一种 直接把一堆元素用 <code>&#123; &#125;</code>括起来</p></li><li><p>一种是使用 <code>set()</code>工厂函数  且可以保证其唯一性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> set1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> set1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="课堂小例子"><a href="#课堂小例子" class="headerlink" title="课堂小例子"></a>课堂小例子</h3><ul><li><p>不使用集合将<code>num1 = y= [1,2,3,4,5,4,3,2,1,0]</code>变成不重复的元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> each <span class="token keyword">in</span> num1<span class="token punctuation">:</span><span class="token keyword">if</span> each <span class="token keyword">not</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用集合完成元素归类，即可使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#如果不使用列表，则num1会成为字典</span><span class="token operator">>></span><span class="token operator">></span> num1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment">#此时num1为列表</span><span class="token operator">>></span><span class="token operator">></span> num2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>  <span class="token comment">#此时num2为字典</span><span class="token operator">>></span><span class="token operator">></span> num2<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="访问集合中的值"><a href="#访问集合中的值" class="headerlink" title="访问集合中的值"></a>访问集合中的值</h2><ul><li><p>使用for 读取集合中的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> each <span class="token keyword">in</span> num3<span class="token punctuation">:</span>m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以通过<code>in 和 not in </code>判断一个元素是否在集合中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">in</span> m<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1'</span> <span class="token keyword">in</span> m<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><ul><li><p>frozenset   不可变集合</p></li><li><p>一旦使用frozenset去定义一个集合，此集合不可变，即不可添加也不可删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num3 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> num3<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#51>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    num3<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'frozenset'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'add'</span>  <span class="token comment">#没有此方法</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="集合内建方法"><a href="#集合内建方法" class="headerlink" title="集合内建方法"></a>集合内建方法</h2><table><thead><tr><th align="left"><strong>集合（s）.方法名</strong></th><th><strong>等价符号</strong></th><th><strong>方法说明</strong></th></tr></thead><tbody><tr><td align="left">s.issubset(t)  <strong>两个集合之间的比较</strong></td><td>s &lt;= t</td><td>子集测试（允许不严格意义上的子集）：s 中所有的元素都是 t 的成员</td></tr><tr><td align="left"></td><td>s &lt; t</td><td>子集测试（严格意义上）：s != t 而且 s 中所有的元素都是 t 的成员</td></tr><tr><td align="left">s.issuperset(t)</td><td>s &gt;= t</td><td>超集测试（允许不严格意义上的超集）：t 中所有的元素都是 s 的成员</td></tr><tr><td align="left"></td><td>s &gt; t</td><td>超集测试（严格意义上）：s != t 而且 t 中所有的元素都是 s 的成员</td></tr><tr><td align="left">s.union(t)  <strong>合并两个集合，确保唯一性</strong></td><td>s | t</td><td>合并操作：s “或” t 中的元素</td></tr><tr><td align="left">s.intersection(t) <strong>集合的交集</strong></td><td>s &amp; t</td><td>交集操作：s “与” t 中的元素</td></tr><tr><td align="left">s.difference</td><td>s - t</td><td>差分操作：在 s 中存在，在 t 中不存在的元素</td></tr><tr><td align="left">s.symmetric_difference(t) <strong>两个集合互相不包含的元素</strong></td><td>s ^ t</td><td>对称差分操作：s “或” t 中的元素，但不是 s 和 t 共有的元素</td></tr><tr><td align="left">s.copy()</td><td></td><td>返回 s 的拷贝（浅复制）</td></tr><tr><td align="left"><strong>以下方法仅适用于可变集合</strong></td><td></td><td></td></tr><tr><td align="left">s.update(t)</td><td>s |= t</td><td>将 t 中的元素添加到 s 中</td></tr><tr><td align="left">s.intersection_update(t)</td><td>s &amp;= t</td><td>交集修改操作：s 中仅包括 s 和 t 中共有的成员</td></tr><tr><td align="left">s.difference_update(t)</td><td>s -= t</td><td>差修改操作：s 中包括仅属于 s 但不属于 t 的成员</td></tr><tr><td align="left">s.symmetric_difference_update(t)</td><td>s ^= t</td><td>对称差分修改操作：s 中包括仅属于 s 或仅属于 t 的成员</td></tr><tr><td align="left">s.add(obj)</td><td></td><td>加操作：将 obj 添加到 s</td></tr><tr><td align="left">s.remove(obj)</td><td></td><td>删除操作：将 obj 从 s 中删除，如果 s 中不存在 obj，将引发异常</td></tr><tr><td align="left">s.discard(obj)</td><td></td><td>丢弃操作：将 obj 从 s 中删除，如果 s 中不存在 obj，也没事儿^_^</td></tr><tr><td align="left">s.pop()</td><td></td><td>弹出操作：移除并返回 s 中的任意一个元素</td></tr><tr><td align="left">s.clear() <strong>del(s)是将s这个参数直接删除，clear只是删除集合中的元素</strong></td><td></td><td>清除操作：清除 s 中的所有元素</td></tr></tbody></table><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul><li><p>文件使用方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> closefd<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> opener<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>需要注意的是，打开文件时，需指定其encoding(即编码)，一般可设定为 ‘UTF-8’</li></ul></li></ul><h2 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h2><table><thead><tr><th align="center">==打开模式==</th><th align="center">==执行操作==</th></tr></thead><tbody><tr><td align="center">‘r’</td><td align="center">以只读方式打开文件（默认）</td></tr><tr><td align="center">‘w’</td><td align="center">以写入的方式打开文件，会覆盖已存在的文件</td></tr><tr><td align="center">‘x’</td><td align="center">创建一个新的文件并写入，但如果文件已存在，将引发异常</td></tr><tr><td align="center">‘a’</td><td align="center">以写入模式打开，如果文件存在，则在末尾追加写入（上一次写现在继续写）</td></tr><tr><td align="center">‘b’</td><td align="center">以二进制模式打开文件</td></tr><tr><td align="center">‘t’</td><td align="center">以文本模式打开（默认）</td></tr><tr><td align="center">‘+’</td><td align="center">可读写模式，（可添加到其他模式中使用）</td></tr><tr><td align="center">‘U’</td><td align="center">通用换行符支持</td></tr></tbody></table><h2 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h2><table><thead><tr><th><strong>文件对象方法</strong></th><th><strong>执行操作</strong></th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件</td></tr><tr><td>f.read([size=-1])</td><td>从文件读取size个字符，当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回</td></tr><tr><td>f.readline([size=-1])</td><td>从文件中读取并返回一行（包括行结束符），如果有size有定义则返回size个字符</td></tr><tr><td>f.write(str)</td><td>将字符串str写入文件</td></tr><tr><td>f.writelines(seq)</td><td>向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象</td></tr><tr><td>f.seek(offset, from)</td><td>在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节</td></tr><tr><td>f.tell()</td><td>返回当前在文件中的位置</td></tr><tr><td>f.truncate([size=file.tell()])</td><td>截取文件到size个字节，默认是截取到文件指针当前位置</td></tr></tbody></table><h2 id="文件内容显示"><a href="#文件内容显示" class="headerlink" title="文件内容显示"></a>文件内容显示</h2><p>f.seek()方法结合for循环可以有效打印出文本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\密码.txt'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> each <span class="token keyword">in</span> f<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><ul><li><p>文件的写入有<code>f.write、f.writelines</code></p></li><li><p>如果需要写入文件，之前的文件需要有<code>r</code>或者<code>a</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\BaiduNetdiskDownload\\运行日志.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'我爱鱼C工作室'</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="文件任务"><a href="#文件任务" class="headerlink" title="文件任务"></a>文件任务</h2>]]></content>
      
      
      <categories>
          
          <category> 小甲鱼Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小甲鱼课后作业</title>
      <link href="/2021/03/23/python/xiao-jia-yu-ke-hou-zuo-ye/"/>
      <url>/2021/03/23/python/xiao-jia-yu-ke-hou-zuo-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文与小甲鱼Python搭配，题目与知识点对应，需多次练习</p><span id="more"></span><h1 id="02-用Python设计第一个游戏"><a href="#02-用Python设计第一个游戏" class="headerlink" title="02 用Python设计第一个游戏"></a>02 用Python设计第一个游戏</h1><ol start="0"><li><p>什么是BIF？</p><p><strong>答：</strong>python的内置函数</p></li></ol><ol><li>用课堂上小甲鱼教的方法数一数 Python3 提供了多少个 BIF？</li></ol><ol start="2"><li><p>在 Python 看来：’FishC’ 和 ‘fishc’ 一样吗？</p><p><strong>答：</strong>不一样，python区分大小写，FishC 和fishc是两个不同的参数</p></li></ol><ol start="3"><li><p>在小甲鱼看来，Python 中什么是最重要的？你赞同吗？</p><p><strong>答：</strong>Python的缩进格式最重要，强制缩进使得python的代码非常精简</p></li></ol><h1 id="06-Python常用操作符"><a href="#06-Python常用操作符" class="headerlink" title="06 Python常用操作符"></a>06 Python常用操作符</h1><p><strong>0. 请写一个程序打印出 0~100 所有的奇数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"100以内的奇数为："</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1. 我们说过现在的 Python 可以计算很大很大的数据，但是……真正的大数据计算可是要靠刚刚的硬件滴，不妨写一个小代码，让你的计算机为之崩溃？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9</strong>*</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">我们按照优先级给它们加上括号：<span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">and</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">and</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">and</span> <span class="token number">8</span> <span class="token keyword">and</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token keyword">or</span> <span class="token number">6</span> <span class="token keyword">or</span> <span class="token number">9</span><span class="token operator">==</span> <span class="token number">4</span>短路逻辑 <span class="token number">3</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">4</span>，而 <span class="token number">3</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.爱因斯坦曾出过这样一道有趣的数学题：有一个长阶梯，若每步上2阶，最后剩1阶；若每步上3阶，最后剩2阶；若每步上5阶，最后剩4阶；若每步上6阶，最后剩5阶；只有每步上7阶，最后刚好一阶也不剩。</p><p>使用程序求该阶梯有多少阶？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">7</span>x <span class="token operator">=</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    x <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"台阶共有："</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">"阶"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'找不到答案'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="07分支与循环2"><a href="#07分支与循环2" class="headerlink" title="07分支与循环2"></a>07分支与循环2</h1><ol><li><strong>if not (money &lt; 100):</strong> <strong>这行代码相当于</strong>？</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>相当于<span class="token keyword">if</span> money <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>assert 的作用是什么？</strong></li></ol><p>答：assert一般称为断言，当关键字后条件为假时，程序会直接自爆，并抛出AssertionError异常</p><p>但我们在测试程序时，一般都会使用assert在程序中置入检查点，当我们需要确保某一条件必须为真时，即可使用assert。</p><ol start="3"><li> <strong>假设有 x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> z <span class="token operator">=</span> z <span class="token punctuation">,</span> y <span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p><strong>猜猜 (x &lt; y and [x] or [y])[0] 实现什么样的功能？</strong></p><p>答：这是python未改版前的三元操作符</p></li></ol><ol start="5"><li><p><strong>成员资格运算符in</strong></p><p>答：in，用于检查一个值是否在序列中，如果在序列中，返回True，否则返回False</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'xiaojiayu'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'yu'</span> <span class="token keyword">in</span> name<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'feiyu'</span> <span class="token keyword">in</span> name<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>视频中小甲鱼使用 if elif else 在大多数情况下效率要比全部使用 if 要高，但根据一般的统计规律，一个班的成绩一般服从正态分布，也就是说平均成绩一般集中在 70~80 分之间，因此根据统计规律，我们还可以改进下程序以提高效率。</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#这样设计主要是为了减少CPU运算次数，一般将最有可能发生的情况放在最前面，减少运算次数</span>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">80</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">60</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">100</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><strong>三元操作符</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span>y <span class="token operator">=</span> <span class="token number">2</span>z <span class="token operator">=</span> <span class="token number">3</span>small <span class="token operator">=</span> <span class="token number">0</span>small <span class="token operator">=</span> x <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token keyword">and</span> x <span class="token operator">&lt;</span> z<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>y <span class="token keyword">if</span> y <span class="token operator">&lt;</span> z <span class="token keyword">else</span> z<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="09分支与循环3"><a href="#09分支与循环3" class="headerlink" title="09分支与循环3"></a>09分支与循环3</h1><ol start="0"><li><p>下面的循环会打印多少次”I Love FishC”？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I Love FishC'</span><span class="token punctuation">)</span>    <span class="token comment">#会打印5次，以0为初始，2为步长进行打印，但不包括10，计算范围在 0 &lt;= i &lt; 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下面的循环会打印多少次”I Love FishC”？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I Love FishC'</span><span class="token punctuation">)</span>    <span class="token comment">#程序会报错，因为没有定义i的范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>break、continue起到的作用</p><p>答：break在一个循环中可以进行中断，之后跳出当前循环</p><p>​      continue当循环体运行为True时，程序跳出循环；当循环体运行为False时，程序继续执行。</p></li></ol><ol start="3"><li><p>列表的理解</p><p>答：列表中可以放入字符串和字符，也可以被for循环引用</p></li></ol><ol start="4"><li><p>请问 range(10) 生成哪些数？</p><p>答：range(10)可以产生 range(0,10)     （0,10）共十位数，不包含10</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>目测以下程序会打印什么？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#第4行->第6行->第8行  遇break跳出当前循环，进入上一级</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么情况下我们要使循环永远为真？</p><p>答：当我们需要在一个循环内继续执行其他操作且操作较多时，如操作系统就是一个永远为真的循环，我们会在操作系统中做各种操作，但是都是基于操作系统去实现的。</p><p>并且break可以在我们不需要循环时跳出循环。</p></li></ol><ol start="7"><li><p>学会提高代码的效率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#此代码要求比字符串长度小的数，起始为0.</span>i <span class="token operator">=</span> <span class="token number">0</span>string <span class="token operator">=</span> <span class="token string">'ILoveFishC.com'</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment">#优化  需要优化的地方在于，之前每循环一次就需要调用一次len()函数，占用CPU，但实际上我们只需要在初始时获得len(string)，之后就不需要重复调用len()了</span>i <span class="token operator">=</span> <span class="token number">0</span>string <span class="token operator">=</span> <span class="token string">'ILoveFishC.com'</span>x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含”*“则不计算在内。</strong></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">确定密码确定机会密码输入<span class="token keyword">while</span> <span class="token punctuation">:</span><span class="token keyword">if</span> 密码输入正确<span class="token punctuation">:</span>        成功登陆    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> 密码输入中包含<span class="token operator">*</span><span class="token punctuation">:</span>            不计算机会        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> 机会小于或者等于<span class="token number">0</span><span class="token punctuation">:</span>                登出                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                机会<span class="token operator">-</span><span class="token number">1</span>                提示密码输入不正确                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>个人实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">stop <span class="token operator">=</span> <span class="token string">'*'</span>sercet <span class="token operator">=</span> <span class="token string">'我爱吃货'</span>chance <span class="token operator">=</span> <span class="token number">3</span>ok <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'接下来要开始密码输入咯'</span><span class="token punctuation">)</span><span class="token keyword">while</span> ok <span class="token operator">!=</span> sercet <span class="token keyword">and</span> chance <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>    ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> sercet <span class="token operator">==</span> ok<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码输入正确'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'恭喜你成功登陆'</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> stop <span class="token keyword">in</span> ok<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'别输入*啦！你还有'</span><span class="token punctuation">,</span>chance<span class="token punctuation">,</span><span class="token string">'次机会，请重新输入：'</span><span class="token punctuation">)</span>                       <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> chance <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'机会已用完，再见！'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                chance <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码输入错误啦！你还有'</span><span class="token punctuation">,</span>chance<span class="token punctuation">,</span><span class="token string">'次机会，请重新输入：'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li><p><strong>编写一个程序，求 100~999 之间的所有水仙花数。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">定义一个数列（可使用<span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">)</span>）x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">)</span>m <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> z <span class="token operator">**</span> <span class="token number">3</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x y z <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>教师实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义i在(100,1000)内，规定在i内循环，temp%10可以得到个位数，temp//10将数限定在十位以内，要得到个位数，就需要对temp进行十位</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    temp <span class="token operator">=</span> i    <span class="token keyword">while</span> temp<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> <span class="token punctuation">(</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span>        temp <span class="token operator">//=</span> <span class="token number">10</span>         <span class="token comment"># 注意这里要使用地板除哦~</span>    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.有红、黄、蓝三种颜色的求，其中红球 3 个，黄球 3 个，绿球 6 个。先将这 12 个球混合放在一个盒子中，从中任意摸出 8 个球，编程计算摸出球的各种颜色搭配。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#绿球个数要大于2，因为红球和黄球全部摸出也才6个，所以绿球范围（2,7）共有2,3,4,5,6种方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'red\tyellow\tgreen'</span><span class="token punctuation">)</span><span class="token keyword">for</span> red <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> yellow <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> green <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> red <span class="token operator">+</span> yellow <span class="token operator">+</span> green <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>                <span class="token comment"># 注意，下边不是字符串拼接，因此不用“+”哦~</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-12列表：打了激素的数组"><a href="#10-12列表：打了激素的数组" class="headerlink" title="10-12列表：打了激素的数组"></a>10-12列表：打了激素的数组</h1><ol start="0"><li>分析下面代码：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> old <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> new <span class="token operator">=</span> old<span class="token operator">>></span><span class="token operator">></span> old <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    答：new =[1,2,3,4,5]</p><p>​            old  = [6]</p><p>​            因为new在old变化前已经复制</p><ol><li><p><strong>请问如何将下边这个列表的’小甲鱼’修改为’小鱿鱼’？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'小甲鱼'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoyouyu'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'xiaoyouyu'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p><strong>要对一个列表进行顺序排序，请问使用什么方法？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表名<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p><strong>要对一个列表进行逆序排序，请问使用什么方法？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表名<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy() 和 clear()</strong></p><ul><li>clear()只是清除列表中的数据，但空列表仍然保存下来</li><li>copy()类似于分片拷贝 <code>列表名[:]</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'xiaoyouyu'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list2<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list2<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>按照上方例子把列表推导式还原出来</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> y<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">]</span>list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> y<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p><strong>请使用列表推导式补充被小甲鱼不小心涂掉的部分</strong></p><p><img src="https://xxx.ilovefishc.com/forum/201310/12/044035qddrqkmrqod4cqmr.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.1'</span><span class="token punctuation">,</span><span class="token string">'2.2'</span><span class="token punctuation">,</span><span class="token string">'3.3'</span><span class="token punctuation">,</span><span class="token string">'4.4'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.1'</span><span class="token punctuation">,</span><span class="token string">'2.4'</span><span class="token punctuation">,</span><span class="token string">'3.9'</span><span class="token punctuation">,</span><span class="token string">'4.16'</span><span class="token punctuation">]</span><span class="token comment">#方法1</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> slogan <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        <span class="token keyword">if</span> slogan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name <span class="token operator">+</span><span class="token string">':'</span> <span class="token operator">+</span> slogan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> list3<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>    <span class="token comment">#方法2</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> slogan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> slogan <span class="token keyword">in</span> list1 <span class="token keyword">for</span> name <span class="token keyword">in</span> list2 <span class="token keyword">if</span> slogan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h1 id="013元组-tuple"><a href="#013元组-tuple" class="headerlink" title="013元组(tuple)"></a>013元组(tuple)</h1><ol start="0"><li><p>请用一句话描述什么是列表？再用一句话描述什么是元组？</p><p>答：列表可以进行修改添加删除等操作，元组定义好之后只可以插入值，不可以改变</p></li></ol><ol><li><p>什么情况下你需要使用元组而不是列表？</p><p>答：当我们希望内容==不容易被修改时==使用元组</p><p>​        当我们需要频繁修改数据时，使用列表</p></li></ol><ol start="2"><li><p>当元组和列表掉下水，你会救谁？</p><p>答：救列表，因为列表有比元组更加丰富的内置方法，提高了编程的灵活性</p><p>​        元组一但创建就无法修改，不经常用</p></li></ol><ol start="3"><li>请将下图左边列表的内置方法与右边的注释连线，并圈出元组可以使用的方法。</li></ol><p><img src="https://xxx.ilovefishc.com/forum/201310/20/153028ki3oeeo1jkevijyi.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">append<span class="token punctuation">(</span><span class="token punctuation">)</span>     -<span class="token operator">></span> 在最后增加一个元素extend<span class="token punctuation">(</span>位置，元素<span class="token punctuation">)</span>     -<span class="token operator">></span>扩展列表（用另一个列表）count<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>计算并返回指定元素的数量remove<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>删除一个元素pop<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>删除并返回最后一个元素sort<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>按特定的顺序排序（从小到大）insert<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>在指定的位置插入一个元素copy<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>拷贝一个副本clear<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>清空所有元素reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>原地翻转所有的数据index<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>寻找并返回参数的索引值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组只可以使用其中的<code>count()、index()</code>方法</p><ol start="4"><li><p>创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？</p><p>答：当拼接==只有一个元素==的元组时，必须同时存在</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'要插入的元素'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="5"><li><p>x, y, z = 1, 2, 3 请问x, y, z是元组吗？</p><p>答：所有的多对象的、逗号分隔的、没有明确用符号定义的这些集合默认的类型都是元组</p></li></ol><ol start="6"><li> 请写出以下情景中应该使用列表还是元组来保存数据：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token punctuation">)</span> 游戏中角色的属性:列表<span class="token number">2</span><span class="token punctuation">)</span> 你的身份证信息：元组<span class="token number">3</span><span class="token punctuation">)</span> 论坛的会员：列表<span class="token number">4</span><span class="token punctuation">)</span> 团队合作开发程序，传递给一个你并不了解具体实现的函数的参数：元组<span class="token number">5</span><span class="token punctuation">)</span> 航天火箭各个组件的具体配置参数：元组  <span class="token number">6</span><span class="token punctuation">)</span> NASA系统中记录已经发现的行星数据：列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>上节课我们通过课后作业的形式学习到了“列表推导式”，那请问如果我把中括号改为小括号，会不会得到“元组推导式”呢？自己动手试试看再看答案哦</p><p>答：元组没有必要使用推导式，使用列表就够了</p></li></ol><h1 id="014-字符串：内置方法"><a href="#014-字符串：内置方法" class="headerlink" title="014 字符串：内置方法"></a>014 字符串：内置方法</h1><ol start="0"><li><p>还记得如何定义一个跨越多行的字符串吗（请至少写出两种实现的方法）？</p><p>答：</p></li></ol><ol><li>三引号字符串通常我们用于做什么使用？</li></ol><ol start="2"><li> file1 = open(‘C:\windows\temp\readme.txt’, ‘r’) 表示以只读方式打开“C:\windows\temp\readme.txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">file1 <span class="token operator">=</span> file1<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\windows\temp\readme.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>有字符串：str1 = ‘<a href="http://www.fishc.com/dvd" target="_blank">鱼C资源打包</a>‘，请问如何提取出子字符串：’<a href="http://www.fishc.com/">www.fishc.com</a></p><p>答：法1.使用index()方法获取字符串索引值，使用字符串分片方法导出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'www.'</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">)</span><span class="token number">26</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token number">28</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token string">'www.fishc.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法2.使用rpartition()方法，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">'www.fishc.com'</span><span class="token punctuation">)</span> <span class="token comment">#使用rpartition将字符串分片</span><span class="token operator">>></span><span class="token operator">></span> str3<span class="token punctuation">(</span><span class="token string">'&lt;a href="http://'</span><span class="token punctuation">,</span> <span class="token string">'www.fishc.com'</span><span class="token punctuation">,</span> <span class="token string">'/dvd" target="_blank">鱼C资源打包&lt;/a>'</span><span class="token punctuation">)</span>  <span class="token comment">#查看分片后结果</span><span class="token operator">>></span><span class="token operator">></span> str3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">#获取第2个分片信息</span><span class="token string">'www.fishc.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>如果使用负数作为索引值进行分片操作，按照第三题的要求你能够正确目测出结果吗？</p><p>答：使用负数作为索引值分片操作时，可以定义在:后，从右往左计数</p></li></ol><ol start="5"><li><p>还是第三题那个字符串，请问下边语句会显示什么内容？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token string">'fishc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>6.还原为有意义的字符串:<code>str1 = &#39;i2sl54ovvvb4e3bferi32s56h;$c43.sfc67o0cm99&#39;</code></p><ol start="7"><li>   请写一个密码安全性检查代码</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">分析：输入需要检测的密码num <span class="token operator">=</span> <span class="token string">'1234567890'</span>eng <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>asc <span class="token operator">=</span> <span class="token string">r'~!@#$%^&amp;*()_=-/,.?&lt;>;:[]&#123;&#125;|\\'</span>判断输入的密码的长度<span class="token keyword">while</span><span class="token punctuation">(</span>输入字符串为空<span class="token punctuation">)</span><span class="token punctuation">:</span>    请重新输入    重新判断输入密码长度    <span class="token keyword">if</span> 长度 <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>    长度判断为<span class="token number">1</span><span class="token keyword">elif</span> <span class="token number">8</span> <span class="token operator">&lt;</span> 长度 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">:</span>    长度判断为<span class="token number">2</span><span class="token keyword">elif</span> 长度 <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">:</span>    长度判断为<span class="token number">3</span>    <span class="token comment">#由于还需要判断密码由什么组成，因为也用1,2,3来判断 密码复杂度由高到低</span>定义复杂度为<span class="token number">0</span><span class="token comment">#判断是否包含特殊字符</span><span class="token keyword">for</span> each <span class="token keyword">in</span> passwd<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> asc<span class="token punctuation">:</span>        复杂度<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">break</span>   <span class="token comment">#判断是否包含字母</span><span class="token keyword">for</span> each <span class="token keyword">in</span> passwd<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> eng<span class="token punctuation">:</span>        复杂度<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">break</span>                <span class="token comment">#判断是否包含数字</span><span class="token keyword">for</span> each <span class="token keyword">in</span> passwd<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> num<span class="token punctuation">:</span>        复杂度<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">break</span> <span class="token comment">#将结果输出</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#将结果一直保持在while中，除非berak输出</span>        <span class="token keyword">if</span> 长度<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">or</span> 复杂度 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        密码级别为低    <span class="token keyword">elif</span> 长度 <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> 复杂度 <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> 首字母开头<span class="token punctuation">:</span>        密码级别为高    <span class="token keyword">else</span><span class="token punctuation">:</span>        密码级别为中  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的密码级别为：'</span><span class="token punctuation">,</span>密码级别<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sercet <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入需要检查的密码组合：'</span><span class="token punctuation">)</span>changdu <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sercet<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token string">'1234567890'</span>eng <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>asc <span class="token operator">=</span> <span class="token string">'~!@#$%^&amp;*()_=-/,.?&lt;>;:[]&#123;&#125;|\\'</span><span class="token keyword">while</span> <span class="token punctuation">(</span>sercet<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> changdu <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sercet <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您输入的密码为空，请重新输入：'</span><span class="token punctuation">)</span>    changdu <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sercet<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> changdu <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>    lengh <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">elif</span> <span class="token number">8</span> <span class="token operator">&lt;</span> changdu <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">:</span>    lengh <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">else</span><span class="token punctuation">:</span>    lengh <span class="token operator">=</span> <span class="token number">3</span>fuzadu <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> each <span class="token keyword">in</span> sercet<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> asc<span class="token punctuation">:</span>        fuzadu <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">break</span><span class="token keyword">for</span> each <span class="token keyword">in</span> sercet<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> eng<span class="token punctuation">:</span>        fuzadu <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">break</span><span class="token keyword">for</span> each <span class="token keyword">in</span> sercet<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token keyword">in</span> num<span class="token punctuation">:</span>        fuzadu <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">break</span>m <span class="token operator">=</span> <span class="token number">0</span>q <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码复杂度为:'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> lengh <span class="token operator">==</span> <span class="token number">1</span>  <span class="token keyword">or</span> fuzadu <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'低'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lengh <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> fuzadu <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>sercet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> eng<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'高'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请继续保持'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入正确的注册密码'</span><span class="token punctuation">)</span>    <span class="token keyword">break</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="015-字符串：格式化"><a href="#015-字符串：格式化" class="headerlink" title="015 字符串：格式化"></a>015 字符串：格式化</h1><p>1.请问以下这行代码会打印什么内容？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"&#123;&#123;1&#125;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"不打印"</span><span class="token punctuation">,</span> <span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token string">'&#123;1&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.以下代码中，a, b, c是什么参数？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"&#123;a&#125; love &#123;b&#125;.&#123;c&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">"I"</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token string">'I love FishC.com'</span><span class="token comment">#a,b,c是关键字参数，用format()内的参数来代替之前的a,b,c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.以下代码中，{0}, {1}, {2}是什么参数？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"&#123;0&#125; love &#123;1&#125;.&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"FishC"</span><span class="token punctuation">,</span> <span class="token string">"com"</span><span class="token punctuation">)</span><span class="token string">'I love FishC.com'</span><span class="token comment">#&#123;0&#125;,&#123;1&#125;,&#123;2&#125;是位置参数，用于指代后面的'I','FishC','com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>如果想要显示Pi = 3.14，format前边的字符串应该怎么填写呢？</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'&#123;0&#125; &#123;1:.2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Pi = '</span><span class="token punctuation">,</span> <span class="token number">3.1415</span><span class="token punctuation">)</span>  <span class="token comment">#':'表示接下来是参数的格式</span><span class="token string">'Pi =  3.14'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.编写一个进制转换程序，程序演示如下（提示，十进制转换二进制可以用bin()这个BIF）：</p><p><img src="https://xxx.ilovefishc.com/forum/201311/28/222408as27w77f262gkgg7.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    shuru <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个整数'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> shuru <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序结束'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        shuru <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>shuru<span class="token punctuation">)</span>        ba <span class="token operator">=</span> <span class="token string">'0o%o'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>shuru<span class="token punctuation">)</span>        shiliu <span class="token operator">=</span> <span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>shuru<span class="token punctuation">)</span>        er <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>shuru<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 十六进制：'</span><span class="token punctuation">,</span>shuru <span class="token punctuation">,</span> <span class="token string">'->'</span><span class="token punctuation">,</span>shiliu<span class="token punctuation">,</span>end <span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 八进制'</span><span class="token punctuation">,</span>shuru<span class="token punctuation">,</span><span class="token string">'->'</span><span class="token punctuation">,</span>ba<span class="token punctuation">,</span>end <span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 二进制'</span><span class="token punctuation">,</span>shuru<span class="token punctuation">,</span><span class="token string">'->'</span><span class="token punctuation">,</span>er<span class="token punctuation">,</span>end <span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>小甲鱼实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">q <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> q<span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个整数(输入Q结束程序)：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">!=</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 十六进制 : %d -> 0x%x'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 八进制 : %d -> 0o%o'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'十进制 -> 二进制 : %d -> '</span> <span class="token operator">%</span> num<span class="token punctuation">,</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        q <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="016-序列"><a href="#016-序列" class="headerlink" title="016 序列"></a>016 序列</h1><ol start="0"><li><p>我们根据列表、元组和字符串的共同特点，把它们三统称为什么？</p><p><strong>答</strong>：序列</p><p>​        都有以下特点：</p><table><thead><tr><th>1）都可以通过索引得到每一个元素</th></tr></thead><tbody><tr><td>2）默认索引值总是从0开始（当然灵活的Python还支持负数索引）</td></tr><tr><td>3）可以通过分片的方法得到一个范围内的元素的集合</td></tr><tr><td>4）有很多共同的操作符（重复操作符、拼接操作符、成员关系操作符）</td></tr></tbody></table></li></ol><ol><li><p>请问分别使用什么BIF，可以把一个可迭代对象转换为列表、元组和字符串？</p><p><strong>答</strong>：使用list()可将可迭代对象转换为列表</p><p>​        tuple()可以将对象转换为元组</p><p>​        str()将对象转换为字符串</p></li></ol><ol start="2"><li><p>你还能复述出“迭代”的概念吗？</p><p><strong>答</strong>：类似于for循环，通过对一个数列或者元组不断地进行一个一个数据的读取来实现迭代</p><p>所谓迭代，是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或结果。每一次对过程的重复被称为一次“迭代”，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。</p></li></ol><ol start="3"><li><p>你认为调用 max(‘I love FishC.com’) 会返回什么值？为什么？</p><p><strong>答</strong>：会返回‘v’，因为数列中若存在字符串，则会比较字符的ASCII码，<code>v</code>ASCII码最大，输出v</p></li></ol><ol start="4"><li><p>猜想一下 min() 这个BIF的实现过程</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> mi <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token keyword">for</span> each <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">if</span> each <span class="token operator">&lt;</span> mi<span class="token punctuation">:</span>        mi <span class="token operator">=</span> each<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最小数为：'</span><span class="token punctuation">,</span>mi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​    小甲鱼案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    least <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> x<span class="token punctuation">:</span>        <span class="token keyword">if</span> each <span class="token operator">&lt;</span> least<span class="token punctuation">:</span>            least <span class="token operator">=</span> each    <span class="token keyword">return</span> least<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token string">'123456789'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>sum()如果参数中有字符串会报错，如何忽略掉字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> each <span class="token keyword">in</span> m<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span> <span class="token keyword">or</span> <span class="token builtin">type</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#type(each)用于判断each的数据类型</span>        sum1 <span class="token operator">+=</span> each    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最后的和为：'</span><span class="token punctuation">,</span>sum1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小甲鱼案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> x<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> each        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> result<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="017-函数-Python的乐高积木"><a href="#017-函数-Python的乐高积木" class="headerlink" title="017 函数-Python的乐高积木"></a>017 函数-Python的乐高积木</h1><ol start="0"><li><p>你有听说过DRY吗？</p><p><strong>答：</strong>DRY是<code>Don&#39;t Repeat Yourself</code></p><p>​        不要复制粘贴了</p></li></ol><ol><li><p>都是重复一段代码，为什么我要使用函数（而不使用简单的拷贝黏贴）呢？</p><p><strong>答：</strong>函数可以较为方便地调用一段代码，复制粘贴影响代码的可读性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span><span class="token punctuation">)</span>降低代码量 （调用函数只需要一行，拷贝粘贴需要N行代码）<span class="token number">1</span>）降低维护成本（修改def,所有引用处都会同等修改）<span class="token number">2</span><span class="token punctuation">)</span>程序更易阅读<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>函数可以有多个参数吗?</p><p><strong>答：</strong>可以，函数可以有无数个参数，只需要使用<code>，</code>将他们隔开就行，但最好只定义三四个参数</p></li></ol><ol start="3"><li><p>创建函数使用什么关键字，要注意什么？</p><p>答：使用<code>def</code>,在定义函数后需要加<code> ()</code>，后再加<code>:</code>，缩进部分都是函数体</p></li></ol><ol start="4"><li><p>请问这个函数有多少个参数？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">-</span> a <span class="token operator">*</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>答：</strong>==有0个，此种表示方式是错误的，参数需要的是变量，此处是用元组传递==</p><p>修改：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> MyFun<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token comment">#x为元组，有3,4两元素,y为元组，有1,2两元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>请问调用以下这个函数会打印什么内容？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome To FishC.com!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>答：打印<code>Hello World</code></p><p>​        在调用函数时，程序运行到第一个<code>print</code>就认定为结束了，需要返回</p></li></ol><ol start="6"><li><p>编写一个函数power()模拟内建函数pow()，即power(x, y)为计算并返回x的y次幂的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>result <span class="token operator">*=</span> xy <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#在y内遍历，类似于循环y次</span>result <span class="token operator">*=</span> x <span class="token keyword">return</span> result <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li>编写一个函数，利用欧几里得算法（<a href="http://baike.baidu.com/view/255668.htm">脑补链接</a>）求最大公约数，例如gcd(x, y)返回值为参数x和参数y的最大公约数。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#求最大公因数</span>例如 <span class="token number">24</span> <span class="token number">20</span>的最大公因数为<span class="token number">4</span>例如 <span class="token number">100</span> <span class="token number">35</span>的最大公因数是<span class="token number">5</span><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            gcd <span class="token operator">=</span> p  <span class="token comment">#gcd值为最后一次循环的值，即为最大值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>gcd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><strong>编写一个将十进制转换为二进制的函数，要求采用“除2取余”（<a href="http://baike.baidu.com/view/1426817.htm">脑补链接</a>）的方式，结果与调用bin()一样返回字符串形式。</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Dec2Bin</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">while</span> dec<span class="token punctuation">:</span>        quo <span class="token operator">=</span> dec <span class="token operator">%</span> <span class="token number">2</span>        dec <span class="token operator">=</span> dec <span class="token operator">//</span> <span class="token number">2</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quo<span class="token punctuation">)</span>    <span class="token keyword">while</span> temp<span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token keyword">print</span><span class="token punctuation">(</span>Dec2Bin<span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#例：</span><span class="token comment">#10对2取余=0,10地板除2=5 将取余值写入temp</span><span class="token comment">#5对2取余 =1,5地板除2=2 将1写入temp</span><span class="token comment">#1对2取余 =1，1地板除2=0,将1写入temp</span><span class="token comment">#此时dec的值=0，不满足while dec,进入下一步，而temp = [0,1,1]</span><span class="token comment">#在while temp中，使用pop()将最后一位逐渐给result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="018-函数-灵活即强大"><a href="#018-函数-灵活即强大" class="headerlink" title="018 函数-灵活即强大"></a>018 函数-灵活即强大</h1><ol start="0"><li><p>请问以下哪个是形参哪个是实参</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">3</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>MyFun<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>x是形参，y是实参,形参指函数定义过程中小括号里的参数，实参指的是函数在调用过程中传递进去的参数</p></li></ol><ol><li>函数文档和直接用“#”为函数写注释有什么不同？</li></ol><p>答：为了让别人更好地理解函数，函数文档是函数的属性，可以通过help 或<code>.__doc__</code>显示出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>'这是一个函数文档，也可以当做属性    <span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">help</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>Help on function a <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>    这是一个函数文档，也可以当做属性<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>__doc__<span class="token string">'这是一个函数文档，也可以当做属性'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>使用关键字参数，可以有效避免什么问题的出现呢？</p><p>__答：__有效避免因不小心搞乱参数顺序导致bug出现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">SaySome</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'->'</span> <span class="token operator">+</span> words<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> SaySome<span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token string">'让编程改变世界！'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'小甲鱼'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>使用help(print)查看print()这个BIF有哪些默认参数？分别起到什么作用？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>Help on built<span class="token operator">-</span><span class="token keyword">in</span> function <span class="token keyword">print</span> <span class="token keyword">in</span> module builtins<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    value    <span class="token operator">-</span><span class="token operator">></span> 主要参数，也可为关键字参数sep  各个值之间默认用空格隔开<span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱吃货'</span><span class="token punctuation">,</span><span class="token string">'吃货爱我'</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>我爱吃货<span class="token operator">|</span>吃货爱我end  打印最后一个值之后默认参数是一个换行标识符<span class="token punctuation">(</span>`\n`<span class="token punctuation">)</span><span class="token builtin">file</span>  文件类型对象，默认为sys<span class="token punctuation">.</span>stdout<span class="token punctuation">(</span>标准输出流<span class="token punctuation">)</span>flush <span class="token comment">#是否强制刷新流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认参数和关键字参数表面最大的区别是什么？</p><p><strong>答：</strong>默认参数是在函数定义的时候定义的，关键字参数是在调用函数的时候调用的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">关键字参数是在函数调用的时候，通过参数名制定需要赋值的参数，这样做就不怕因为搞不清参数的顺序而导致函数调用出错。而默认参数是在参数定义的过程中，为形参赋初值，当函数调用的时候，不传递实参，则默认使用形参的初始值代替。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="5"><li><p>编写一个符合以下要求的函数：</p><p>  a) 计算打印所有参数的和乘以基数（base=3）的结果<br>  b) 如果参数中最后一个参数为（base=5），则设定基数为5，基数不参与求和计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">要打印所有的参数，使用可变参数来定义计算基数<span class="token operator">>></span><span class="token operator">></span> <span class="token comment">#5</span><span class="token keyword">def</span> <span class="token function">jishu</span><span class="token punctuation">(</span><span class="token operator">*</span>canshu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>canshu<span class="token punctuation">)</span><span class="token comment">#最后一位为5</span>    <span class="token keyword">if</span> canshu<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最后一个参数是5，重置基数为5'</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        base <span class="token operator">=</span> <span class="token number">5</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> canshu<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> m<span class="token comment">#最后一位不为5</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        base <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> canshu<span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> m    h <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">*</span> base    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数和为：'</span><span class="token punctuation">,</span><span class="token builtin">sum</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算而得的值为:'</span><span class="token punctuation">,</span>h<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> jishu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>最后一个参数是<span class="token number">5</span>，重置基数为<span class="token number">5</span>参数和为： <span class="token number">10</span>计算而得的值为<span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#小甲鱼实例</span><span class="token keyword">def</span> <span class="token function">mFun</span><span class="token punctuation">(</span><span class="token operator">*</span>param<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> param<span class="token punctuation">:</span>        result <span class="token operator">+=</span> each    result <span class="token operator">*=</span> base        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果是：'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>mFun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>题目要求：如果一个3位数等于其各位数字的立方和，则称这个数为水仙花数。例如153 = 1^3 +5^3 +3^3，因此153是一个水仙花数。编写一个程序，找出所有的水仙花数。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">总共是三位数，要找出水仙花数，需要在<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>内遍历每一个三位数<span class="token comment">#5</span><span class="token triple-quoted-string string">'''def jishu(*canshu):    sum = 0    i = len(canshu)    if canshu[i-1] == 5:        print('最后一个参数是5，重置基数为5', end = '\n')        base = 5        for m in canshu[:i-1]:            sum += m            else:        base = 3        for m in canshu:            sum += m    h = sum * base    print('参数和为：',sum)    print('计算而得的值为:',h)'''</span>result <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>k <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'水仙花数为：'</span><span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> k<span class="token punctuation">:</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> i<span class="token punctuation">:</span>        <span class="token keyword">for</span> h <span class="token keyword">in</span> i<span class="token punctuation">:</span>            x<span class="token operator">=</span> m <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> h            sum1 <span class="token operator">=</span> m <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> n <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> h <span class="token operator">**</span> <span class="token number">3</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> sum1<span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">','</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#小甲鱼实例</span><span class="token keyword">def</span> <span class="token function">Narcissus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> each        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> temp<span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> <span class="token punctuation">(</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span>            temp <span class="token operator">=</span> temp <span class="token operator">//</span> <span class="token number">10</span>  <span class="token comment"># 注意这里用地板除</span>        <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> each<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有的水仙花数分别是："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>Narcissus<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>编写一个函数 findstr()，该函数统计一个长度为 2 的子字符串在另一个字符串中出现的次数。例如：假定输入的字符串为“You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.”，子字符串为“im”，函数执行后打印“子字母串在目标字符串中共出现 3 次”。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">findstr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span>m<span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子字母串在目标字符串中共出现'</span><span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token string">'次'</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">'You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token string">'im'</span><span class="token operator">>></span><span class="token operator">></span> findstr<span class="token punctuation">(</span>a <span class="token operator">=</span> x<span class="token punctuation">,</span>b <span class="token operator">=</span> y <span class="token punctuation">)</span>子字母串在目标字符串中共出现 <span class="token number">3</span> 次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#小甲鱼实例</span><span class="token keyword">def</span> <span class="token function">findStr</span><span class="token punctuation">(</span>desStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>desStr<span class="token punctuation">)</span>    <span class="token keyword">if</span> subStr <span class="token keyword">not</span> <span class="token keyword">in</span> desStr<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在目标字符串中未找到字符串!'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> each1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">if</span> desStr<span class="token punctuation">[</span>each1<span class="token punctuation">]</span> <span class="token operator">==</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> desStr<span class="token punctuation">[</span>each1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> subStr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    count <span class="token operator">+=</span> <span class="token number">1</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子字符串在目标字符串中共出现 %d 次'</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>desStr <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入目标字符串：'</span><span class="token punctuation">)</span>subStr <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入子字符串(两个字符)：'</span><span class="token punctuation">)</span>findStr<span class="token punctuation">(</span>desStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="019-函数-我的地盘听我的"><a href="#019-函数-我的地盘听我的" class="headerlink" title="019 函数 - 我的地盘听我的"></a>019 函数 - 我的地盘听我的</h1><p>0.下边程序会输出什么？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在next()函数里...'</span><span class="token punctuation">)</span>    pre<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在pre()函数里...'</span><span class="token punctuation">)</span>    <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在next()函数里'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在pre()函数里'</span><span class="token punctuation">)</span><span class="token comment">#next()函数中嵌套了pre()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>请问一下函数有返回值吗？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello FishC!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>答：</strong>有返回值，如果没有使用return语句指定返回值，返回值为None</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span>Hello FishC!<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NoneType'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请问Python的return语句可以返回多个不同类型的值吗？</p><p><strong>答：</strong>可以，使用列表或者元组（元组只需要<code>,</code>隔开）</p></li></ol><ol start="3"><li><p>目测以下程序会打印什么内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> <span class="token number">1314</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>var <span class="token operator">=</span> <span class="token number">520</span>fun<span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答，会打印</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1214520</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>目测以下程序会打印什么内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token string">' Hi '</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> var    var <span class="token operator">=</span> <span class="token string">' Baby '</span>    <span class="token keyword">return</span> fun2<span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">+=</span> <span class="token string">'I love you'</span>    fun3<span class="token punctuation">(</span>var<span class="token punctuation">)</span>    <span class="token keyword">return</span> var<span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> <span class="token string">' 小甲鱼 '</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#此程序首先运行fun1()，fun1()中的var变为全局变量，指定全局变量var = 'Baby'，返回到fun2中，执行字符串相加语句，虽然fun2()中嵌套了fun3()，但返回值是var，并未返回fun3(),所以最后结果为 Baby I love you</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>会打印</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BabyI love you<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写一个函数，判断传入的字符串参数是否为“回文联”（回文联即用回文形式写成的对联，既可顺读，也可倒读。例如：上海自来水来自海上）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">先判断对联的字数，可以得知，相对应的字符对应地址相加为对联字数<span class="token operator">-</span><span class="token number">1</span>即使用 a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span>来判断<span class="token comment">#</span><span class="token keyword">def</span> <span class="token function">huiwen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一句对联：'</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是回文联'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你写的到底是什么'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>huiwen<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    list2 <span class="token operator">=</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token comment">#reversed用于将字符串倒置</span>    <span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token builtin">list</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#判断倒置后的字符串是否与原字符串相等</span>        <span class="token keyword">return</span> <span class="token string">'是回文联!'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'不是回文联！'</span><span class="token keyword">print</span><span class="token punctuation">(</span>palindrome<span class="token punctuation">(</span><span class="token string">'上海自来水来自海上'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个函数，分别统计出传入字符串参数（可能不只一个参数）的英文字母、空格、数字和其它字符的个数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tongji</span><span class="token punctuation">(</span><span class="token operator">*</span>str1<span class="token punctuation">)</span><span class="token punctuation">:</span>    eng <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>    num <span class="token operator">=</span> <span class="token string">'0123456789'</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        space <span class="token operator">=</span> <span class="token string">''</span>        result1 <span class="token operator">=</span> <span class="token number">0</span>        result2 <span class="token operator">=</span> <span class="token number">0</span>        result3 <span class="token operator">=</span> <span class="token number">0</span>        result4 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> m <span class="token keyword">in</span> eng<span class="token punctuation">:</span>                result1 <span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> m <span class="token keyword">in</span> num<span class="token punctuation">:</span>                    result2 <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                        result3 <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        result4 <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第%d个字符串共有：英文字母%d个，数字%d个，空格%d个，其他字符%d个'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>result1<span class="token punctuation">,</span>result2<span class="token punctuation">,</span>result3<span class="token punctuation">,</span>result4<span class="token punctuation">)</span><span class="token punctuation">)</span>tongji<span class="token punctuation">(</span><span class="token string">'     '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="020-函数-内嵌函数和闭包"><a href="#020-函数-内嵌函数和闭包" class="headerlink" title="020 函数 - 内嵌函数和闭包"></a>020 函数 - 内嵌函数和闭包</h1><ol start="0"><li><p>如果希望在函数中修改全局变量的值，应该使用什么关键字？</p><p><strong>答：</strong>使用<code>global</code>关键字</p></li></ol><ol><li><p>在嵌套的函数中，如果希望在内部函数修改外部函数的局部变量，应该使用什么关键字？</p><p><strong>答：</strong>使用 <code>nonlocal</code>关键字</p></li></ol><ol start="2"><li><p>Python 的函数可以嵌套，但要注意访问的作用域问题哦，请问以下代码存在什么问题呢？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am outside!'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am inside!'</span><span class="token punctuation">)</span>inside<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong><code>inside()</code>只作用在outside()中，无法在全局中使用</p></li></ol><ol start="3"><li><p>请问为什么代码 A 没有报错，但代码 B 却报错了？应该如何修改？</p><p>​    代码A：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        var <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>            inside<span class="token punctuation">(</span><span class="token punctuation">)</span>outside<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    代码B：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>        var <span class="token operator">=</span> <span class="token number">3</span>            inside<span class="token punctuation">(</span><span class="token punctuation">)</span>outside<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>答：</strong>因为B代码片段中内置函数<code>inside()</code>含有一个与外部变量同名的局部变量，此时将外部var变量屏蔽起来，此时无法访问外层的var变量。</p><p>​    <strong>修改</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> var  <span class="token comment">#使用var强行使用外部变量var</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>  <span class="token comment">#此时var为外部变量的值</span>        var <span class="token operator">=</span> <span class="token number">3</span>            inside<span class="token punctuation">(</span><span class="token punctuation">)</span>outside<span class="token punctuation">(</span><span class="token punctuation">)</span>为重新为var赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>请问如何访问 funIn() 呢？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">funIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'宾果！你成功访问到我啦！'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> funIn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>可以直接调用<code>funOut()</code>函数,此函数返回值为funIn()</p></li></ol><ol start="5"><li><p>请问如何访问 funIn() 呢？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">funIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'宾果！你成功访问到我啦！'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> funIn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>使用<code>funOut()()</code>，由于funOut()返回值为funIn,此时需要为其加()才可以访问</p></li></ol><ol start="6"><li><p>以下是“闭包”的一个例子，请你目测下会打印什么内容？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">funY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> x <span class="token comment">#此时x为funX()定义的变量</span>        x <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> x    <span class="token keyword">return</span> funYa <span class="token operator">=</span> funX<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#调用funY函数，自加</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>打印 6,7,8</p><p>​        </p></li><li><p>统计下边这个字符串各个字符出现的次数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''拷贝过来的字符串'''</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span><span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> list1<span class="token punctuation">:</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\n'</span><span class="token punctuation">,</span>str1<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>str1<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>拷 <span class="token number">1</span>贝 <span class="token number">1</span>过 <span class="token number">1</span>来 <span class="token number">1</span>的 <span class="token number">1</span>字 <span class="token number">1</span>符 <span class="token number">1</span>串 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>找出长字符串中的密码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''ABSaDKSbRIHcRHGcdDIF'''</span>    a <span class="token operator">=</span> <span class="token string">''</span>    lenth <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lenth<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">and</span> str1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isupper <span class="token operator">!=</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    a <span class="token operator">+=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码为：'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>mima<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#小甲鱼实例</span>str1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''ABSaDKSbRIHcRHGcdDIF'''</span>countA <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 统计前边的大写字母</span>countB <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 统计小写字母</span>countC <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 统计后边的大写字母</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token triple-quoted-string string">"""    |如果str1[i]是大写字母：    |-- 如果已经出现小写字母：    |-- -- 统计后边的大写字母    |-- 如果未出现小写字母：    |-- -- 清空后边大写字母的统计    |-- -- 统计前边的大写字母    """</span>    <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> countB<span class="token punctuation">:</span>            countC <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            countC <span class="token operator">=</span> <span class="token number">0</span>            countA <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token triple-quoted-string string">"""    |如果str1[i]是小写字母：    |-- 如果小写字母前边不是三个大写字母（不符合条件）：    |-- -- 清空所有记录，重新统计    |-- 如果小写字母前边是三个大写字母（符合条件）：    |-- -- 如果已经存在小写字母：    |-- -- -- 清空所有记录，重新统计（出现两个小写字母）    |-- -- 如果该小写字母是唯一的：    |-- -- -- countB记录出现小写字母，准备开始统计countC    """</span>    <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> countA <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            countA <span class="token operator">=</span> <span class="token number">0</span>            countB <span class="token operator">=</span> <span class="token number">0</span>            countC <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> countB<span class="token punctuation">:</span>                countA <span class="token operator">=</span> <span class="token number">0</span>                countB <span class="token operator">=</span> <span class="token number">0</span>                countC <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                countB <span class="token operator">=</span> <span class="token number">1</span>                countC <span class="token operator">=</span> <span class="token number">0</span>                target <span class="token operator">=</span> i    <span class="token triple-quoted-string string">"""    |如果前边和后边都是三个大写字母：    |-- 如果后边第四个字母也是大写字母（不符合条件）：    |-- -- 清空记录B和C，重新统计    |-- 如果后边仅有三个大写字母（符合所有条件）：    |-- -- 打印结果，并清空所有记录，进入下一轮统计    """</span>    <span class="token keyword">if</span> countA <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> countC <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> length <span class="token keyword">and</span> str1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            countB <span class="token operator">=</span> <span class="token number">0</span>            countC <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            countA <span class="token operator">=</span> <span class="token number">3</span>            countB <span class="token operator">=</span> <span class="token number">0</span>            countC <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="021-函数-lambda表达式"><a href="#021-函数-lambda表达式" class="headerlink" title="021 函数.lambda表达式"></a>021 函数.lambda表达式</h1><ol start="0"><li><p>请使用lambda表达式将下边函数转变为匿名函数？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun_A</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请将下边的匿名函数转变为普通的屌丝函数？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment">#如果x % 2 != 0,即非0时  相反结果为not(x%2)</span><span class="token keyword">return</span> x<span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>感受一下使用匿名函数后给你的编程生活带来的变化？</p><p><strong>答：</strong>使用匿名函数后减少了函数的定义以及让程序看起来更加地简洁，减少代码量和复杂度</p></li></ol><ol start="3"><li><p>你可以利用filter()和lambda表达式快速求出100以内所有3的倍数吗？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#使用list将结果显示</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token comment">#或者</span><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> n <span class="token punctuation">:</span> <span class="token keyword">not</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> 还记得列表推导式吗？完全可以使用列表推导式代替filter()和lambda组合，你可以做到吗？</p></li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#在[0,100)内遍历除3后余0的值，输出i</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><p>还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>但如果我希望打包的形式是灵活多变的列表而不是元祖（希望是<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>这种形式），你能做到吗？（采用<span class="token builtin">map</span>和<span class="token keyword">lambda</span>表达式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token punctuation">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#map可以接受多个序列作为参数，列表只需要加 [] 即可</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li><p>请目测以下表达式会打印什么？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> s <span class="token operator">*</span> ndouble <span class="token operator">=</span> make_repeat<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">#n赋值为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>double<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#s赋值为8</span><span class="token keyword">print</span><span class="token punctuation">(</span>double<span class="token punctuation">(</span><span class="token string">'FishC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#打印两次FishC</span><span class="token comment">#答：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>double<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>double<span class="token punctuation">(</span><span class="token string">'FishC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>FishCFishC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="022-函数-递归是什么"><a href="#022-函数-递归是什么" class="headerlink" title="022 函数 - 递归是什么"></a>022 函数 - 递归是什么</h1><ol start="0"><li><p>递归在编程上的形式是如何表现的呢？</p><p><strong>答：</strong>函数调用自身</p></li></ol><ol><li><p>递归必须满足哪两个基本条件？</p><p><strong>答：</strong>函数调用自身，并且有一个正确的返回条件</p></li></ol><ol start="2"><li><p>思考一下，按照递归的特性，在编程中有没有不得不使用递归的情况？</p><p><strong>答：</strong>当需要使用一个条件输出一连串有关的数据时</p></li></ol><ol start="3"><li><p>用递归去计算阶乘问题或斐波那契数列是很糟糕的算法，你知道为什么吗？</p><p><strong>答：</strong>因为递归除了调用自身，还需有一个正确的返回条件，占用更多的内存</p></li></ol><ol start="4"><li><p>请聊一聊递归的优缺点（无需官方陈词，想到什么写什么就可以）</p><p><strong>答：</strong>递归优点在于可以很方便地处理具有规律性的数据，但是若不为其定义一个正确的返回条件，容易造成内存占用过多导致崩溃</p></li></ol><ol start="5"><li>拿手机拍一张“递归自拍照片”</li></ol><ol start="6"><li><p>使用递归编写一个 power() 函数模拟内建函数 pow()，即 power(x, y) 为计算并返回 x 的 y 次幂的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> x <span class="token operator">*</span> power<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#分析  power1(2,3)</span>power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        power1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用递归编写一个函数，利用欧几里得算法求最大公约数，例如 gcd(x, y) 返回值为参数 x 和参数 y 的最大公约数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#使用一般函数求最大公约数</span><span class="token keyword">def</span> <span class="token function">gcd1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> y<span class="token punctuation">:</span>        t <span class="token operator">=</span> x <span class="token operator">%</span> y        x <span class="token operator">=</span> y        y <span class="token operator">=</span> t    <span class="token keyword">return</span> x<span class="token comment">#使用递归求最大公约数</span><span class="token keyword">def</span> <span class="token function">gcd1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> gcd1<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x <span class="token operator">%</span> y<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    gcd1<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>gcd1<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> gcd<span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>gcd1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> gcd1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    gcd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="023、024-递归-小兔崽子"><a href="#023、024-递归-小兔崽子" class="headerlink" title="023、024 递归 - 小兔崽子"></a>023、024 递归 - 小兔崽子</h1><ol start="0"><li><p>使用递归编写一个十进制转换为二进制的函数（要求采用“取2取余”的方式，结果与调用bin()一样返回字符串形式）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> n<span class="token punctuation">:</span>        result <span class="token operator">=</span> to2<span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result <span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">#实际上最后结果是反着给出的</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol><li><p>写一个函数get_digits(n)，将参数n分解出每个位的数字并按顺序存放到列表中。举例：get_digits(12345) ==&gt; [1, 2, 3, 4, 5]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可以采用除以10取余数的方法得出每一个数</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_digits</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#将n取余后的结果放在第一位</span>        get_digits<span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#将数逐渐放小</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用递归编程求解以下问题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">有<span class="token number">5</span>个人坐在一起，问第五个人多少岁？他说比第<span class="token number">4</span>个人大<span class="token number">2</span>岁。问第<span class="token number">4</span>个人岁数，他说比第<span class="token number">3</span>个人大<span class="token number">2</span>岁。问第三个人，又说比第<span class="token number">2</span>人大两岁。问第<span class="token number">2</span>个人，说比第一个人大两岁。最后问第一个人，他说是<span class="token number">10</span>岁。请问第五个人多大？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">suishu</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">+</span> suishu<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     s<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>    s<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>     s<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>         s<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>还记得求回文字符串那道题吗？现在让你使用递归的方式来求解，亲还能骄傲的说我可以吗？</p><p>题：编写一个函数，判断传入的字符串参数是否为“回文联”（回文联即用回文形式写成的对联，既可顺读，也可倒读。例如：上海自来水来自海上）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">huiwen</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> huiwen<span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一句话：'</span><span class="token punctuation">)</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">if</span> huiwen<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 是回文字符串！'</span> <span class="token operator">%</span> string<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 不是回文字符串'</span> <span class="token operator">%</span> string<span class="token punctuation">)</span><span class="token comment">#使用递归时需要注意参数的定义，有部分参数需要在函数体外为其赋值</span><span class="token comment">#或</span>string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一句话：'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">huiwen</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>start<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> string<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> huiwen<span class="token punctuation">(</span>string<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> huiwen<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 是回文字符串！'</span> <span class="token operator">%</span> string<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 不是回文字符串'</span> <span class="token operator">%</span> string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="025-字典：当索引不好用时"><a href="#025-字典：当索引不好用时" class="headerlink" title="025 字典：当索引不好用时"></a>025 字典：当索引不好用时</h1><ol start="0"><li><p>当你听到小伙伴们在谈论“映射”、“哈希”、“散列”或者“关系数组”的时候，事实上他们就是在讨论什么呢？</p><p><strong>答：</strong>实际上都是字典</p></li></ol><ol><li><p>尝试一下将数据（’F’: 70, ‘C’: 67, ‘h’: 104, ‘i’: 105, ‘s’: 115）创建为一个字典并访问键 ‘C’ 对应的值？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'F'</span><span class="token punctuation">:</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">:</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">:</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">:</span><span class="token number">115</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token number">67</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>用方括号（“[]”）括起来的数据我们叫列表，那么使用大括号（“{}”）括起来的数据我们就叫字典，对吗？</p><p><strong>答：</strong>使用大括号括起来的数据可以叫做集合，字典必须要有映射关系，而集合不需要</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'set'</span><span class="token operator">></span>  <span class="token comment">#set是集合类型</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>你如何理解有些东西字典做得到，但“万能的”列表却难以实现（臣妾做不到T_T）？</p><p><strong>答：</strong>字典可以确保数据的唯一性，并且有映射关系，列表要实现同样的功能较为复杂</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'我爱'</span><span class="token punctuation">,</span><span class="token string">'宝贝'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'宝贝'</span><span class="token punctuation">,</span><span class="token string">'爱我'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱'</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'我爱'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#获取a的索引值实现匹配</span>我爱 宝贝<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>下边这些代码，他们都在执行一样的操作吗？你看得出差别吗？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> three<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">#使用dict关键字创建字典</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>  <span class="token comment">#直接使用&#123;&#125;创建字典</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#使用列表的内置方法zip将列表一中的元素与列表二中的元素一一对应</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#使用dict(mapping)方法，使用元组代替mapping</span><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>如图，你可以推测出打了马赛克部分的代码吗？</p><p><img src="https://xxx.ilovefishc.com/forum/201403/21/002915fqfg88phmimxwxx3.png" alt="img"></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>MyDict<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>MyDict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>MyDict<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment">#split(sep=None），从左到右指定从sep处进行分割</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li><p>利用字典特性编写一个通讯录程序：</p><p><img src="https://xxx.ilovefishc.com/forum/201403/21/003109a474un0hb4caqqt4.png" alt="img"></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#利用字典创建通讯录，实现增删查功能</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|---欢迎进入通讯录程序---|'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|---1:查询联系人资料  ---|'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|---2:插入新的联系人  ---|'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|---3:删除已有联系人  ---|'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|---4:退出通讯录程序  ---|'</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">#查询资料</span><span class="token keyword">def</span> <span class="token function">code1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入联系人姓名:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'：'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您输入的联系人不存在，是否新建：(YES/NO)'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'YES'</span><span class="token punctuation">:</span>            code2<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请重新查询'</span><span class="token punctuation">)</span>            code1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#插入联系人，已存在，则询问是否修改</span><span class="token keyword">def</span> <span class="token function">code2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入联系人姓名:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的姓名在通讯录中已存在 -->>'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>        queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'是否修改资料(YES/NO)'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'YES'</span><span class="token punctuation">:</span>            changetel <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户联系电话'</span><span class="token punctuation">)</span>            dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> changetel        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请继续执行操作'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tel <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户联系电话:'</span><span class="token punctuation">)</span>        dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> tel        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您修改后的数据为：'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">code3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'接下去执行的是删除操作，请谨慎！'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入联系人姓名:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>        queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您输入的联系人不存在，请问是否需要重新输入：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'YES'</span><span class="token punctuation">:</span>            code3<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'确认删除吗？(YES,NO)'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'YES'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您已经删除'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>dict1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">code4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 感谢使用通讯录程序---|'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>   code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入相关指令代码:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>       code1<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">elif</span> code <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>       code2<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">elif</span> code <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>       code3<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">elif</span> code <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>       code4<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="026-字典：当索引不好用时"><a href="#026-字典：当索引不好用时" class="headerlink" title="026 字典：当索引不好用时"></a>026 字典：当索引不好用时</h1><ol start="0"><li><p>Python的字典是否支持一键（Key）多值（Value）？</p><p><strong>答：</strong>不支持，python字典一键对应一值，相同的键再次赋值会覆盖上一次的值</p></li></ol><ol><li><p>在字典中，如果试图为一个不存在的键（Key）赋值会怎样？</p><p><strong>答：</strong>会自动添加一个key,并为其赋值</p></li></ol><ol start="2"><li> 成员资格操作符（in和not in）可以检查一个元素是否存在序列中，当然也可以用来检查一个键（Key）是否存在字典中，那么请问哪种的检查效率更高些？为什么？</li></ol><p>   <strong>答：</strong>字典检查效率更高，字典原理是使用哈希类型的算法存储，具有唯一性</p><ol start="3"><li><p>Python对键（Key）和值（Value）有没有类型限制？</p><p><strong>*答：</strong>有，要求键必须是可哈希(hash)的对象，不能是可变类型(列表，变量，字典本身等),但Python对值没有任何限制</p></li></ol><ol start="4"><li><p>请目测下边代码执行后，字典dict1的内容是什么？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#将后面括号内的值赋予前面括号内的键</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'数字'</span><span class="token punctuation">)</span><span class="token comment">#结果</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'数字'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'数字'</span><span class="token punctuation">&#125;</span><span class="token comment">#注意</span>fromkeys方法是直接创建一个新的字典，会覆盖原有的字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果你需要将字典dict1 = {1: ‘one’, 2: ‘two’, 3: ‘three’}拷贝到dict2，你应该怎么做？</p><p><strong>答：</strong>使用copy()函数，此时清除dict1不影响dict2，两者地址不同</p></li></ol><ol start="6"><li><p>尝试编写一个用户登录程序（这次尝试将功能封装成函数），程序实现如图：</p><p><img src="https://xxx.ilovefishc.com/forum/201403/24/1902027kd7256h6xy775dd.png" alt="img"></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 新建用户:N/n ---|'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 登陆账户:E/e ---|'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 退出程序:Q/q ---|'</span><span class="token punctuation">)</span>dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">code1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'已存在用户！'</span><span class="token punctuation">)</span>        queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'是否重新输入？(Y/N)'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> code1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span>        dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> password        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'注册成功，赶紧试试登陆吧^_^'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">code2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您输入的用户名不存在，请重新输入：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>            queren <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您又输入错误啦，是否重新输入(Y/N):'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> queren <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> code2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dict1<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎进入本系统'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">denglu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 新建用户:N/n ---|'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 登陆账户:E/e ---|'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|--- 退出程序:Q/q ---|'</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'|--- 请输入指令代码：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token string">'N'</span> <span class="token keyword">or</span> code <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">:</span>            code1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> code <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token keyword">or</span> code <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>            code2<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> code <span class="token operator">==</span> <span class="token string">'Q'</span> <span class="token keyword">or</span> code <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎下次使用'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>denglu<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#小甲鱼实例</span>user_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">new_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token string">'请输入用户名：'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>        <span class="token keyword">if</span> name <span class="token keyword">in</span> user_data<span class="token punctuation">:</span>            prompt <span class="token operator">=</span> <span class="token string">'此用户名已经被使用，请重新输入：'</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    passwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span>    user_data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> passwd    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'注册成功，赶紧试试登录吧^_^'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token string">'请输入用户名：'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>        <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> user_data<span class="token punctuation">:</span>            prompt <span class="token operator">=</span> <span class="token string">'您输入的用户名不存在，请重新输入：'</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        passwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span>    pwd <span class="token operator">=</span> user_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> passwd <span class="token operator">==</span> pwd<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎进入XXOO系统，请点右上角的X结束程序！'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码错误！'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">'''|--- 新建用户：N/n ---||--- 登录账号：E/e ---||--- 推出程序：Q/q ---||--- 请输入指令代码：'''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        chosen <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> chosen<span class="token punctuation">:</span>            choice <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>            <span class="token keyword">if</span> choice <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'NnEeQq'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的指令代码错误，请重新输入：'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                chosen <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'q'</span> <span class="token keyword">or</span> choice <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token keyword">or</span> choice <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">:</span>            new_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token keyword">or</span> choice <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">:</span>            old_user<span class="token punctuation">(</span><span class="token punctuation">)</span>showmenu<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="027-集合：在我的世界里唯一"><a href="#027-集合：在我的世界里唯一" class="headerlink" title="027 集合：在我的世界里唯一"></a>027 集合：在我的世界里唯一</h1><ol start="0"><li><p>请问集合的唯一作用是什么？</p><p><strong>答：</strong>集合的所有作用就是确保包含的元素的唯一性，集合内不可能存在两个相同的元素</p></li><li><p>如果你希望创建的集合是不变的，应该怎么做？</p><p><strong>答：</strong>使用<code>frozenset</code>方法定义一个集合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num3 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#此集合不可变</span>num3 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#此集合可以修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>请问如何确定一个集合里边有多少个元素？</p><p><strong>答：</strong>可以直接使用<code>len(集合)</code>的方法确定元素，使用<code>for</code>语句读出元素</p></li></ol><ol start="3"><li><p>请目测以下代码会打印什么内容？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> num_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> num_set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#打印内容</span>打印错误，因为一个集合是无序的，无法使用具体地址访问其值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>请问 set1 = {[1, 2]} 和 set1 = set([1, 2]) 执行的结果一样吗？</p><p><strong>答：</strong>不一样，第一句不可以直接实现，列表不能直接作为 { } 元素，报错，第二句会生成一个集合{1,2}</p></li></ol><ol start="5"><li><p>打开你的IDLE，输入set1 = {1, 1.0}，你发现了什么？</p><p><strong>答：</strong>只会出现1，无论是整型还是浮点型，只要元素相同，集合就会只显示一个唯一的元素</p></li></ol><ol start="6"><li><p>请问如何给集合添加和删除元素</p><p><strong>答：</strong>添加使用<code>add()</code>方法,删除使用 <code>remove()</code>方法</p></li></ol><ol start="7"><li><p>集合类型内建方法</p><p><strong>集合类型内建方法总结</strong></p><table><thead><tr><th><strong>集合（s）.方法名</strong></th><th><strong>等价符号</strong></th><th><strong>方法说明</strong></th></tr></thead><tbody><tr><td>s.issubset(t)</td><td>s &lt;= t</td><td>子集测试（允许不严格意义上的子集）：s 中所有的元素都是 t 的成员</td></tr><tr><td></td><td>s &lt; t</td><td>子集测试（严格意义上）：s != t 而且 s 中所有的元素都是 t 的成员</td></tr><tr><td>s.issuperset(t)</td><td>s &gt;= t</td><td>超集测试（允许不严格意义上的超集）：t 中所有的元素都是 s 的成员</td></tr><tr><td></td><td>s &gt; t</td><td>超集测试（严格意义上）：s != t 而且 t 中所有的元素都是 s 的成员</td></tr><tr><td>s.union(t)</td><td>s | t</td><td>合并操作：s “或” t 中的元素</td></tr><tr><td>s.intersection(t)</td><td>s &amp; t</td><td>交集操作：s “与” t 中的元素</td></tr><tr><td>s.difference</td><td>s - t</td><td>差分操作：在 s 中存在，在 t 中不存在的元素</td></tr><tr><td>s.symmetric_difference(t)</td><td>s ^ t</td><td>对称差分操作：s “或” t 中的元素，但不是 s 和 t 共有的元素</td></tr><tr><td>s.copy()</td><td></td><td>返回 s 的拷贝（浅复制）</td></tr><tr><td><strong>以下方法仅适用于可变集合</strong></td><td></td><td></td></tr><tr><td>s.update</td><td>s |= t</td><td>将 t 中的元素添加到 s 中</td></tr><tr><td>s.intersection_update(t)</td><td>s &amp;= t</td><td>交集修改操作：s 中仅包括 s 和 t 中共有的成员</td></tr><tr><td>s.difference_update(t)</td><td>s -= t</td><td>差修改操作：s 中包括仅属于 s 但不属于 t 的成员</td></tr><tr><td>s.symmetric_difference_update(t)</td><td>s ^= t</td><td>对称差分修改操作：s 中包括仅属于 s 或仅属于 t 的成员</td></tr><tr><td>s.add(obj)</td><td></td><td>加操作：将 obj 添加到 s</td></tr><tr><td>s.remove(obj)</td><td></td><td>删除操作：将 obj 从 s 中删除，如果 s 中不存在 obj，将引发异常</td></tr><tr><td>s.discard(obj)</td><td></td><td>丢弃操作：将 obj 从 s 中删除，如果 s 中不存在 obj，也没事儿^_^</td></tr><tr><td>s.pop()</td><td></td><td>弹出操作：移除并返回 s 中的任意一个元素</td></tr><tr><td>s.clear()</td><td></td><td>清除操作：清除 s 中的所有元素</td></tr></tbody></table></li></ol><h1 id="028-文件：因为懂你，所以永恒"><a href="#028-文件：因为懂你，所以永恒" class="headerlink" title="028 文件：因为懂你，所以永恒"></a>028 文件：因为懂你，所以永恒</h1><ol start="0"><li><p>下边只有一种方式不能打开文件，请问是哪一种，为什么？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>   <span class="token comment"># A</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>   <span class="token comment"># B</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E://test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  <span class="token comment"># C</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  <span class="token comment"># D</span>B无法打开，python中<span class="token string">'\'需要进行转义，即'</span>\\<span class="token string">'才可实现'</span>\'功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol><li><p>打开一个文件我们使用open()函数，通过设置文件的打开模式，决定打开的文件具有那些性质，请问默认的打开模式是什么呢？</p><p><strong>答：</strong>open()函数默认打开‘rt’，即可读的，文本的模式打开</p></li><li><p>请问 &gt;&gt;&gt; open(‘E:\Test.bin’, ‘xb’) 是以什么样的模式打开文件的？</p><p><strong>答：</strong>以可写入的二进制模式打开文件，‘x’模式下写入文件，如果地址内已存在相同名文件，则会报错，‘w’是可写入</p></li><li><p>尽管Python有所谓的“垃圾回收机制”，但对于打开了的文件，在不需要用到的时候我们仍然需要使用f.close()将文件对象“关闭”，这是为什么呢？</p><p><strong>答：</strong>python自己的垃圾回收机制，可以在文件对象的引用计数降到0的时候自动关闭文件，但是如果对文件进行写入操作的时候，数据是暂时放在缓存中，如果此时断电了，缓存数据并不会写入文件中，为了安全，使用完文件应立即使用<code>f.close()</code>关闭文件。</p></li></ol><ol start="4"><li><p>如何将一个文件对象（f）中的数据存放进列表中？</p><p><strong>答：</strong>使用list(f)来实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\BaiduNetdiskDownload\\运行日志.txt'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'我爱鱼C工作室'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>如何迭代打印出文件对象（f）中的每一行数据？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\BaiduNetdiskDownload\\运行日志.txt'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#将文档指针置为0位置</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> each <span class="token keyword">in</span> f<span class="token punctuation">:</span>   <span class="token comment">#在f中遍历</span><span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>我爱鱼C工作室吃货吃货我爱你就像老鼠爱大米<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li><p>文件对象的内置方法f.read([size=-1])作用是读取文件对象内容，size参数是可选的，那如果设置了size=10，例如f.read(10)，将返回什么内容呢？</p><p><strong>答：</strong>将只读取到文件指针开始的连续10个字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\BaiduNetdiskDownload\\运行日志.txt'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'我爱鱼C工作室\n吃货'</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>如何获得文件对象（f）当前文件指针的位置</p><p><strong>答：</strong>使用<code>f.tell()方法</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="8"><li><p>还是视频中的那个演示文件（record.txt），请问为何f.seek(45, 0)不会出错，但f.seek(46)就出错了呢？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token number">46</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#18>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'gbk'</span> codec can't decode byte <span class="token number">0xe3</span> <span class="token keyword">in</span> position <span class="token number">4</span><span class="token punctuation">:</span> illegal multibyte sequence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答：</strong>因为使用f.seek()定位的文件指针是按照字节为单位来进行计算的，演示文件是以GBK进行编码的，按照规则，一个汉字占据两个字节，f.seek(45)的位置位于字符<code>小</code>的开始位置，因此可以正常打印，但是f.seek(46)的位置位于字符<code>小</code>的中间位置，按照编码是无法将其解码的。</p></li></ol><ol start="9"><li> 尝试将文件（ <img src="static/image/filetype/av.gif" alt="img"> <a href="https://fishc.com.cn/forum.php?mod=attachment&aid=MjI5Mzh8ODc5ZTk4MWJ8MTU2MzI4NTkwN3w2MTExODF8NDUzNjQ=">OpenMe.mp3</a> <em>(700 Bytes, 下载次数: 9363)</em> ）打印到屏幕上</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\Data\\Vs Code\\Python\\lianxi\\OpenMe.mp3'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'长期使用Windows操作系统的朋友很容易被扩展名所误导，认为扩展名决定文件类型，其实这种观念是错误的！\n'</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li><p>编写代码，将上一题中的文件（OpenMe.mp3）保存为新文件（OpenMe.txt）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\Data\\Vs Code\\Python\\lianxi\\OpenMe.mp3'</span><span class="token punctuation">)</span><span class="token operator">>></span> f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\\Data\\Vs Code\\Python\\lianxi\\OpenMe.txt'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">359</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小甲鱼Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
